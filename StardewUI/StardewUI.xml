<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StardewUI</name>
    </assembly>
    <members>
        <member name="T:StardewUI.Framework.Addons.IAddon">
            <summary>
            Entry point for a UI add-on.
            </summary>
            <remarks>
            Add-ons are a plugin-like system that allow mods to extend the UI capabilities through new views, tags, converters,
            and other features. All add-ons must be registered via <see cref="M:StardewUI.UI.RegisterAddon(StardewUI.Framework.Addons.IAddon)"/>.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.Addons.IAddon.Id">
            <summary>
            Unique ID for this addon.
            </summary>
            <remarks>
            Prevents two copies of the same addon from trying to run at the same time, and allows other addons to depend on
            the features of this one by adding it to their <see cref="P:StardewUI.Framework.Addons.IAddon.Dependencies"/>.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.Addons.IAddon.Dependencies">
            <summary>
            List of dependencies, each corresponding to another <see cref="P:StardewUI.Framework.Addons.IAddon.Id"/>, required by this addon.
            </summary>
            <remarks>
            Dependencies will always be loaded first. If any dependencies are missing, or if a cycle is detected (e.g. addon
            A depends on B which depends on A again) then the addon will be prevented from loading.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.Addons.IAddon.BehaviorFactory">
            <summary>
            Provides user-defined behavior extensions that run on existing view types.
            </summary>
            <remarks>
            All user-defined behaviors have lower priority than the built-in behaviors; a UI add-on is not allowed to remap
            an existing behavior name to its own implementation. Within the set of user-defined behaviors, the priority is
            based on inverted load order; the <em>last</em> add-on to associate a particular name with some behavior type
            will be the one to always handle that name, as long as it is not a standard behavior name.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.Addons.IAddon.ValueConverterFactory">
            <summary>
            Provides user-defined type conversions in addition to the standard conversions.
            </summary>
            <remarks>
            All user-defined converters have lower priority than the built-in converters, except for the duck-type
            converters and <see cref="T:StardewUI.Framework.Converters.StringConverterFactory"/> which are always considered last. Within the set of
            user-defined converters, the priority is based on inverted load order; the <em>last</em> add-on that registered
            a converter able to handle a particular type conversion will be the one chosen, as long as none of the standard
            conversions can apply.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.Addons.IAddon.ViewFactory">
            <summary>
            Provides user-defined view types and enables them to be used with custom markup tags.
            </summary>
            <remarks>
            All user-defined views have lower priority than the built-in views; a UI add-on is not allowed to replace the
            behavior of a standard tag such as <c>&lt;label&gt;</c> or <c>&lt;lane&gt;</c>. Within the set of user-defined
            views, the priority is based on inverted load order; the <em>last</em> add-on to associate a particular tag with
            some view type will be the one to always handle that tag, as long as it is not a standard tag.
            </remarks>
        </member>
        <member name="T:StardewUI.Framework.Api.AssetPreloader">
            <summary>
            Preloads assets for an <see cref="T:StardewUI.Framework.Api.AssetRegistry"/> so that they can be immediately or very quickly available upon
            the first request.
            </summary>
            <param name="basePath">Base directory (absolute path) of the associated mod.</param>
        </member>
        <member name="M:StardewUI.Framework.Api.AssetPreloader.#ctor(System.String)">
            <summary>
            Preloads assets for an <see cref="T:StardewUI.Framework.Api.AssetRegistry"/> so that they can be immediately or very quickly available upon
            the first request.
            </summary>
            <param name="basePath">Base directory (absolute path) of the associated mod.</param>
        </member>
        <member name="M:StardewUI.Framework.Api.AssetPreloader.Evict(System.String)">
            <summary>
            Forgets a preloaded asset. Used in hot reload scenarios when an asset is invalidated.
            </summary>
            <param name="assetName">The asset name.</param>
        </member>
        <member name="M:StardewUI.Framework.Api.AssetPreloader.Preload(System.Collections.Generic.IEnumerable{StardewUI.Framework.Api.DirectoryMapping},System.Collections.Generic.IEnumerable{StardewUI.Framework.Api.DirectoryMapping})">
            <summary>
            Starts preloading all assets in the configured directories.
            </summary>
            <param name="viewDirectories">Directories containing views, relative to the calling mod.</param>
            <param name="spriteDirectories">Directories containing sprite textures and data, relative to the calling
            mod.</param>
            <returns>A task that completes when all assets have been preloaded.</returns>
        </member>
        <member name="M:StardewUI.Framework.Api.AssetPreloader.GetAndRemoveSpriteSheetData(System.String)">
            <summary>
            Gets a preloaded sprite sheet configuration, and removes it from the preload cache if found.
            </summary>
            <param name="assetName">The asset name.</param>
            <returns>The preloaded sprite sheet data, or <c>null</c> if no such asset was found during preload.</returns>
        </member>
        <member name="M:StardewUI.Framework.Api.AssetPreloader.GetAndRemoveTexture(System.String)">
            <summary>
            Gets a preloaded texture, and removes its data from the preload cache if found.
            </summary>
            <remarks>
            Textures must always be created on the game's main thread, so retrieving a preloaded texture is not free.
            However, it is usually cheaper than loading it directly through SMAPI or XNA's pipeline.
            </remarks>
            <param name="assetName">The asset name.</param>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/> with the preloaded texture data, or <c>null</c> if preloaded texture data is
            available.</returns>
        </member>
        <member name="M:StardewUI.Framework.Api.AssetPreloader.GetAndRemoveView(System.String)">
            <summary>
            Gets a preloaded view, and removes it from the preload cache if found.
            </summary>
            <param name="assetName">The asset name.</param>
            <returns>The preloaded view document, or <c>null</c> if no such asset was found during preload.</returns>
        </member>
        <member name="T:StardewUI.Framework.Api.AssetRegistry">
            <summary>
            Helper for registering UI assets and collections of assets.
            </summary>
            <remarks>
            Asset registries are instanced per mod, via the the <see cref="T:StardewUI.Framework.Api.ViewEngine"/> which is also instanced.
            </remarks>
        </member>
        <member name="M:StardewUI.Framework.Api.AssetRegistry.EnableHotReloading(System.String)">
            <summary>
            Starts monitoring the file system for changes to any of the mod's assets.
            </summary>
            <param name="sourceDirectory">Source directory to watch and sync changes from.</param>
        </member>
        <member name="M:StardewUI.Framework.Api.AssetRegistry.RegisterCustomData(System.String,System.String)">
            <inheritdoc cref="M:StardewUI.Framework.IViewEngine.RegisterCustomData(System.String,System.String)" />
        </member>
        <member name="M:StardewUI.Framework.Api.AssetRegistry.RegisterSprites(System.String,System.String)">
            <inheritdoc cref="M:StardewUI.Framework.IViewEngine.RegisterSprites(System.String,System.String)" />
        </member>
        <member name="M:StardewUI.Framework.Api.AssetRegistry.RegisterViews(System.String,System.String)">
            <inheritdoc cref="M:StardewUI.Framework.IViewEngine.RegisterViews(System.String,System.String)" />
        </member>
        <member name="M:StardewUI.Framework.Api.AssetRegistry.TryGetProvidingModId(StardewUI.Framework.Dom.Document,System.String@)">
            <inheritdoc cref="M:StardewUI.Framework.IViewEngine.RegisterViews(System.String,System.String)" />
        </member>
        <member name="T:StardewUI.Framework.Api.DirectoryMapping">
            <summary>
            Associates a SMAPI/XNA asset prefix with a directory on disk.
            </summary>
            <remarks>
            Used internally by classes such as <see cref="T:StardewUI.Framework.Api.AssetRegistry"/> and <see cref="T:StardewUI.Framework.Api.AssetPreloader"/>.
            </remarks>
            <param name="AssetPrefix">The prefix for assets loaded from this directory, e.g. <c>Mods/ModName/Views</c>.</param>
            <param name="ModDirectory">The directory on disk where the assets are located.</param>
        </member>
        <member name="M:StardewUI.Framework.Api.DirectoryMapping.#ctor(System.String,System.String)">
            <summary>
            Associates a SMAPI/XNA asset prefix with a directory on disk.
            </summary>
            <remarks>
            Used internally by classes such as <see cref="T:StardewUI.Framework.Api.AssetRegistry"/> and <see cref="T:StardewUI.Framework.Api.AssetPreloader"/>.
            </remarks>
            <param name="AssetPrefix">The prefix for assets loaded from this directory, e.g. <c>Mods/ModName/Views</c>.</param>
            <param name="ModDirectory">The directory on disk where the assets are located.</param>
        </member>
        <member name="P:StardewUI.Framework.Api.DirectoryMapping.AssetPrefix">
            <summary>The prefix for assets loaded from this directory, e.g. <c>Mods/ModName/Views</c>.</summary>
        </member>
        <member name="P:StardewUI.Framework.Api.DirectoryMapping.ModDirectory">
            <summary>The directory on disk where the assets are located.</summary>
        </member>
        <member name="T:StardewUI.Framework.Api.DocumentView">
            <summary>
            A view based on a <see cref="T:StardewUI.Framework.Dom.Document"/>.
            </summary>
            <remarks>
            This view type mainly exists as glue for the API, to be used in a <see cref="T:StardewUI.ViewMenu"/>.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.Api.DocumentView.Context">
            <summary>
            The data context (model) to provide to the root node.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Api.DocumentView.#ctor(StardewUI.Framework.Binding.IViewNodeFactory,StardewUI.Framework.Sources.IValueSource{StardewUI.Framework.Dom.Document})">
            <summary>
            Initializes a new <see cref="T:StardewUI.Framework.Api.DocumentView"/> instance.
            </summary>
            <param name="viewNodeFactory">Factory for creating and binding <see cref="T:StardewUI.Framework.Binding.IViewNode"/>s.</param>
            <param name="documentSource">Source providing the StarML document describing the view.</param>
        </member>
        <member name="T:StardewUI.Framework.Api.DocumentViewMenu">
            <summary>
            <see cref="T:StardewUI.ViewMenu"/> implementation based on a StarML <see cref="T:StardewUI.Framework.Dom.Document"/>.
            </summary>
            <param name="viewNodeFactory">Factory for creating and binding <see cref="T:StardewUI.Framework.Binding.IViewNode"/>s.</param>
            <param name="documentSource">Source providing the StarML document describing the view.</param>
            <param name="data">Data to be bound to the view.</param>
        </member>
        <member name="M:StardewUI.Framework.Api.DocumentViewMenu.#ctor(StardewUI.Framework.Binding.IViewNodeFactory,StardewUI.Framework.Sources.IValueSource{StardewUI.Framework.Dom.Document},System.Object)">
            <summary>
            <see cref="T:StardewUI.ViewMenu"/> implementation based on a StarML <see cref="T:StardewUI.Framework.Dom.Document"/>.
            </summary>
            <param name="viewNodeFactory">Factory for creating and binding <see cref="T:StardewUI.Framework.Binding.IViewNode"/>s.</param>
            <param name="documentSource">Source providing the StarML document describing the view.</param>
            <param name="data">Data to be bound to the view.</param>
        </member>
        <member name="E:StardewUI.Framework.Api.DocumentViewMenu.Closing">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Api.DocumentViewMenu.CanClose">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Api.DocumentViewMenu.CloseAction">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Api.DocumentViewMenu.CloseSound">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Api.DocumentViewMenu.Menu">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Api.DocumentViewMenu.PositionSelector">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Api.DocumentViewMenu.ClearCursorAttachment">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Api.DocumentViewMenu.EnableCloseButton(Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Single)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Api.DocumentViewMenu.SetCursorAttachment(Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Nullable{Microsoft.Xna.Framework.Point},System.Nullable{Microsoft.Xna.Framework.Point},System.Nullable{Microsoft.Xna.Framework.Color})">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Api.DocumentViewMenu.SetGutters(System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Api.DocumentViewMenu.cleanupBeforeExit">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Api.DocumentViewMenu.CreateView">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Api.DocumentViewMenu.CustomClose">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Api.DocumentViewMenu.GetCloseBehavior">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Api.DocumentViewMenu.GetOriginPosition(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Api.DocumentViewMenu.OnClosed(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Api.IUpdatable">
            <summary>
            Provides a method to perform per-frame updates.
            </summary>
            <remarks>
            Used on types such as the <see cref="T:StardewUI.Framework.Api.ViewDrawable"/> that require regular updates but are not implicitly update by
            any part of the vanilla game logic such as <see cref="T:StardewUI.ViewMenu"/>. To receive updates, the instance must be
            tracked in a <see cref="T:StardewUI.Framework.Api.ViewEngine"/>.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.Api.IUpdatable.IsDisposed">
            <summary>
            Whether this instance has been disposed and should no longer receive updates.
            </summary>
            <remarks>
            This is handled by the <see cref="T:StardewUI.Framework.Api.ViewEngine"/> and used to remove stale instances.
            </remarks>
        </member>
        <member name="M:StardewUI.Framework.Api.IUpdatable.Update(System.TimeSpan)">
            <summary>
            Performs the scheduled update.
            </summary>
            <param name="elapsed">Time elapsed since last game tick.</param>
        </member>
        <member name="T:StardewUI.Framework.Api.ViewDrawable">
            <summary>
            An <see cref="T:StardewUI.Framework.IViewDrawable"/> based on a <see cref="T:StardewUI.Framework.Api.DocumentView"/>.
            </summary>
            <param name="view">The view to draw.</param>
        </member>
        <member name="M:StardewUI.Framework.Api.ViewDrawable.#ctor(StardewUI.Framework.Api.DocumentView)">
            <summary>
            An <see cref="T:StardewUI.Framework.IViewDrawable"/> based on a <see cref="T:StardewUI.Framework.Api.DocumentView"/>.
            </summary>
            <param name="view">The view to draw.</param>
        </member>
        <member name="P:StardewUI.Framework.Api.ViewDrawable.ActualSize">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Api.ViewDrawable.Context">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Api.ViewDrawable.IsDisposed">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Api.ViewDrawable.MaxSize">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Api.ViewDrawable.Dispose">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Api.ViewDrawable.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Api.ViewDrawable.Update(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Api.ViewEngine">
            <summary>
            Implementation for the public <see cref="T:StardewUI.Framework.IViewEngine"/> API.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Api.ViewEngine.SourceResolver">
            <summary>
            Source resolver for resolving documents created by this view engine back to their original mod.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Api.ViewEngine.#ctor(StardewUI.Framework.Content.IAssetCache,StardewModdingAPI.IModHelper,StardewUI.Framework.Binding.IViewNodeFactory)">
            <summary>
            Initializes a new <see cref="T:StardewUI.Framework.Api.ViewEngine"/> instance.
            </summary>
            <param name="assetCache">Cache for obtaining document assets. Used for asset-based views.</param>
            <param name="helper">SMAPI mod helper for the API consumer mod (not for StardewUI).</param>
            <param name="viewNodeFactory">Factory for creating and binding <see cref="T:StardewUI.Framework.Binding.IViewNode"/>s.</param>
        </member>
        <member name="M:StardewUI.Framework.Api.ViewEngine.CreateDrawableFromAsset(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Api.ViewEngine.CreateDrawableFromMarkup(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Api.ViewEngine.CreateMenuControllerFromAsset(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Api.ViewEngine.CreateMenuControllerFromMarkup(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Api.ViewEngine.CreateMenuFromAsset(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Api.ViewEngine.CreateMenuFromMarkup(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Api.ViewEngine.EnableHotReloading(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Api.ViewEngine.PreloadAssets">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Api.ViewEngine.PreloadModels(System.Type[])">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Api.ViewEngine.RegisterCustomData(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Api.ViewEngine.RegisterSprites(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Api.ViewEngine.RegisterViews(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.BackoffRule">
            <summary>
            Defines the rules for exponential backoff.
            </summary>
            <param name="initialDuration">Duration to wait before the first retry attempt.</param>
            <param name="maxDuration">Maximum duration to wait before any retry attempt; i.e. no matter how many retries have
            already occurred for a given key, it will not extend the duration any longer than this.</param>
            <param name="multiplier">Amount to multiply the current duration on each subsequent retry, starting from
            <paramref name="initialDuration"/> and going no higher than <paramref name="maxDuration"/>.</param>
        </member>
        <member name="M:StardewUI.Framework.BackoffRule.#ctor(System.TimeSpan,System.TimeSpan,System.Single)">
            <summary>
            Defines the rules for exponential backoff.
            </summary>
            <param name="initialDuration">Duration to wait before the first retry attempt.</param>
            <param name="maxDuration">Maximum duration to wait before any retry attempt; i.e. no matter how many retries have
            already occurred for a given key, it will not extend the duration any longer than this.</param>
            <param name="multiplier">Amount to multiply the current duration on each subsequent retry, starting from
            <paramref name="initialDuration"/> and going no higher than <paramref name="maxDuration"/>.</param>
        </member>
        <member name="F:StardewUI.Framework.BackoffRule.Default">
            <summary>
            Standard backoff rule deemed suitable for most types of UI retries.
            </summary>
            <remarks>
            Uses an initial delay of 50 ms, maximum delay of 5 s, and multiplier of 4.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.BackoffRule.InitialDuration">
            <summary>
            Gets the duration to wait before the first retry attempt.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.BackoffRule.GetNextDuration(System.TimeSpan)">
            <summary>
            Gets the duration to wait before the next retry attempt.
            </summary>
            <param name="previousDuration">The wait duration that was used on the previous attempt.</param>
        </member>
        <member name="T:StardewUI.Framework.BackoffState">
            <summary>
            State of an exponential backoff, e.g. as used in a <see cref="T:StardewUI.Framework.BackoffTracker`1"/>.
            </summary>
            <param name="initialDuration">The initial duration to wait for a retry.</param>
        </member>
        <member name="M:StardewUI.Framework.BackoffState.#ctor(System.TimeSpan)">
            <summary>
            State of an exponential backoff, e.g. as used in a <see cref="T:StardewUI.Framework.BackoffTracker`1"/>.
            </summary>
            <param name="initialDuration">The initial duration to wait for a retry.</param>
        </member>
        <member name="P:StardewUI.Framework.BackoffState.Duration">
            <summary>
            The most recent duration waited/waiting for a retry.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.BackoffState.Elapsed">
            <summary>
            Time elapsed waiting for the current/next retry.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.BackoffTracker`1">
            <summary>
            Tracks exponential backoff times for a set of keys.
            </summary>
            <remarks>
            Keys are stored in a <see cref="T:System.Collections.Generic.Dictionary`2"/>, so must have unique hash codes for correct operation.
            </remarks>
            <typeparam name="T">Type of key or other object to track.</typeparam>
            <param name="rule">Configures the backoff duration and scaling.</param>
        </member>
        <member name="M:StardewUI.Framework.BackoffTracker`1.#ctor(StardewUI.Framework.BackoffRule)">
            <summary>
            Tracks exponential backoff times for a set of keys.
            </summary>
            <remarks>
            Keys are stored in a <see cref="T:System.Collections.Generic.Dictionary`2"/>, so must have unique hash codes for correct operation.
            </remarks>
            <typeparam name="T">Type of key or other object to track.</typeparam>
            <param name="rule">Configures the backoff duration and scaling.</param>
        </member>
        <member name="M:StardewUI.Framework.BackoffTracker`1.Tick(System.TimeSpan)">
            <summary>
            Advances the timer on any pending keys, allowing them to be used again on the next <see cref="M:StardewUI.Framework.BackoffTracker`1.TryRun``1(`0,System.Func{``0},``0@)"/> if they
            have waited long enough.
            </summary>
            <param name="elapsed">Time elapsed since last tick.</param>
        </member>
        <member name="M:StardewUI.Framework.BackoffTracker`1.TryRun``1(`0,System.Func{``0},``0@)">
            <summary>
            Attempts to run an arbitrary action, if it is currently allowed by backoff rules.
            </summary>
            <remarks>
            If the action is run, but still fails (throws), then the timer for the specified <paramref name="key"/> will be
            reset and the next duration will be increased.
            </remarks>
            <typeparam name="TResult">Result type of the <paramref name="action"/>.</typeparam>
            <param name="key">Unique key representing the specific action to run, e.g. asset to load.</param>
            <param name="action">The action to run, if currently allowed.</param>
            <param name="result">Holds the result of any successful <paramref name="action"/>, or <c>null</c> if the action
            was not run or failed to run.</param>
            <returns><c>true</c> if the <paramref name="action"/> was allowed (i.e. does not have a pending delay due to
            backoff rules) and was successful; <c>false</c> if the action is delayed or failed.</returns>
        </member>
        <member name="T:StardewUI.Framework.Behaviors.BehaviorFactory">
            <summary>
            A behavior factory based on per-name delegates. Can be used as a base class for other factories.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.BehaviorFactory.Add(StardewUI.Framework.Behaviors.IBehaviorFactory)">
            <summary>
            Adds a new delegate factory which this factory will be allowed to use as a fallback for any behavior names not
            handled directly.
            </summary>
            <param name="factory">The delegate factory.</param>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.BehaviorFactory.CanCreateBehavior(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Behaviors.BehaviorFactory.CreateBehavior(System.Type,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Behaviors.BehaviorFactory.Register``1(System.String)">
            <summary>
            Registers a behavior for a given name using the behavior's default parameterless constructor.
            </summary>
            <remarks>
            Used for behaviors that do not take arguments, only data.
            </remarks>
            <typeparam name="TBehavior">The behavior type.</typeparam>
            <param name="name">The markup name used to create to the <typeparamref name="TBehavior"/> type.</param>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.BehaviorFactory.Register(System.String,System.Func{System.String,StardewUI.Framework.Behaviors.IViewBehavior})">
            <summary>
            Registers a behavior for a given name using a delegate function.
            </summary>
            <param name="name">The markup name used to create this type of behavior.</param>
            <param name="factory">Delegate function that accepts the construction argument (if any) and creates the
            corresponding behavior.</param>
        </member>
        <member name="T:StardewUI.Framework.Behaviors.BehaviorTarget">
            <summary>
            Encapsulates the target of an <see cref="T:StardewUI.Framework.Behaviors.IViewBehavior"/>.
            </summary>
            <param name="View">The view that will receive the behavior.</param>
            <param name="ViewState">State overrides for the <paramref name="View"/>.</param>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.BehaviorTarget.#ctor(StardewUI.IView,StardewUI.Framework.Behaviors.IViewState)">
            <summary>
            Encapsulates the target of an <see cref="T:StardewUI.Framework.Behaviors.IViewBehavior"/>.
            </summary>
            <param name="View">The view that will receive the behavior.</param>
            <param name="ViewState">State overrides for the <paramref name="View"/>.</param>
        </member>
        <member name="P:StardewUI.Framework.Behaviors.BehaviorTarget.View">
            <summary>The view that will receive the behavior.</summary>
        </member>
        <member name="P:StardewUI.Framework.Behaviors.BehaviorTarget.ViewState">
            <summary>State overrides for the <paramref name="View"/>.</summary>
        </member>
        <member name="T:StardewUI.Framework.Behaviors.ConditionalFlagBehavior">
            <summary>
            Updates a view state flag with a boolean value corresponding to the behavior's data.
            </summary>
            <remarks>
            Essentially enables arbitrary state names to be linked with context properties that are boolean-valued or
            convertible to boolean, primarily as a bridge for the <see cref="T:StardewUI.Framework.Behaviors.FlagStateBehavior`1"/> which in turn allows
            property changes to be associated with the state. In other words, part one of the two-part process used to create
            conditional attributes.
            </remarks>
            <param name="flagName">Name of the flag to set when <see cref="P:StardewUI.Framework.Behaviors.ViewBehavior`2.Data"/> is
            <c>true</c>.</param>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.ConditionalFlagBehavior.#ctor(System.String)">
            <summary>
            Updates a view state flag with a boolean value corresponding to the behavior's data.
            </summary>
            <remarks>
            Essentially enables arbitrary state names to be linked with context properties that are boolean-valued or
            convertible to boolean, primarily as a bridge for the <see cref="T:StardewUI.Framework.Behaviors.FlagStateBehavior`1"/> which in turn allows
            property changes to be associated with the state. In other words, part one of the two-part process used to create
            conditional attributes.
            </remarks>
            <param name="flagName">Name of the flag to set when <see cref="P:StardewUI.Framework.Behaviors.ViewBehavior`2.Data"/> is
            <c>true</c>.</param>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.ConditionalFlagBehavior.OnAttached">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Behaviors.ConditionalFlagBehavior.OnNewData(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Behaviors.FlagEventArgs">
            <summary>
            Arguments for events relating to a flag included in an <see cref="T:StardewUI.Framework.Behaviors.IViewState"/>.
            </summary>
            <param name="name">The name of the affected flag.</param>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.FlagEventArgs.#ctor(System.String)">
            <summary>
            Arguments for events relating to a flag included in an <see cref="T:StardewUI.Framework.Behaviors.IViewState"/>.
            </summary>
            <param name="name">The name of the affected flag.</param>
        </member>
        <member name="P:StardewUI.Framework.Behaviors.FlagEventArgs.Name">
            <summary>
            The name of the affected flag.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Behaviors.FlagStateBehavior`1">
            <summary>
            Behavior that applies a property override when a named view state flag is detected.
            </summary>
            <remarks>
            The flag is generally added or removed by <see cref="T:StardewUI.Framework.Behaviors.ConditionalFlagBehavior"/> as part of a two-step approach to
            creating conditional attributes.
            </remarks>
            <param name="flagName">Name of the flag to watch.</param>
            <param name="propertyName">Name of the overridden property.</param>
            <typeparam name="TValue">Value type for the overridden property.</typeparam>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.FlagStateBehavior`1.#ctor(System.String,System.String)">
            <summary>
            Behavior that applies a property override when a named view state flag is detected.
            </summary>
            <remarks>
            The flag is generally added or removed by <see cref="T:StardewUI.Framework.Behaviors.ConditionalFlagBehavior"/> as part of a two-step approach to
            creating conditional attributes.
            </remarks>
            <param name="flagName">Name of the flag to watch.</param>
            <param name="propertyName">Name of the overridden property.</param>
            <typeparam name="TValue">Value type for the overridden property.</typeparam>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.FlagStateBehavior`1.OnAttached">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Behaviors.FlagStateBehavior`1.OnDetached(StardewUI.IView)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Behaviors.FlagStateBehavior`1.OnNewData(`0)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Behaviors.HoverStateBehavior`1">
            <summary>
            Behavior that applies a property override when a view enters a hover state.
            </summary>
            <remarks>
            The override is added on pointer enter (i.e. when initiating hover) and removed on pointer leave.
            </remarks>
            <typeparam name="TValue">Value type for the overridden property.</typeparam>
            <param name="propertyName">Name of the overridden property.</param>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.HoverStateBehavior`1.#ctor(System.String)">
            <summary>
            Behavior that applies a property override when a view enters a hover state.
            </summary>
            <remarks>
            The override is added on pointer enter (i.e. when initiating hover) and removed on pointer leave.
            </remarks>
            <typeparam name="TValue">Value type for the overridden property.</typeparam>
            <param name="propertyName">Name of the overridden property.</param>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.HoverStateBehavior`1.Update(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Behaviors.HoverStateBehavior`1.OnAttached">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Behaviors.HoverStateBehavior`1.OnDetached(StardewUI.IView)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Behaviors.HoverStateBehavior`1.OnNewData(`0)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Behaviors.IBehaviorFactory">
            <summary>
            Factory for creating <see cref="T:StardewUI.Framework.Behaviors.IViewBehavior"/> instances from markup data.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.IBehaviorFactory.CanCreateBehavior(System.String,System.String)">
            <summary>
            Checks if the factory can create behaviors with a specified name and argument.
            </summary>
            <param name="name">The behavior name.</param>
            <param name="argument">The argument for the behavior, if any. Most implementations can ignore this parameter,
            but in some cases it is used for disambiguation.</param>
            <returns><c>true</c> if this factory should handle the specified <paramref name="name"/>, when given the
            specified <paramref name="argument"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.IBehaviorFactory.CreateBehavior(System.Type,System.String,System.String)">
            <summary>
            Creates a new behavior.
            </summary>
            <param name="viewType">The specific type of <see cref="T:StardewUI.IView"/> that will receive the behavior.</param>
            <param name="name">The behavior name that specifies the type of behavior.</param>
            <param name="argument">Additional argument provided in the markup, distinct from the behavior's
            <see cref="P:StardewUI.Framework.Behaviors.IViewBehavior.DataType"/>. Enables prefixed behaviors such as <c>tween:opacity</c></param>.
            <returns>A new behavior of a type corresponding to the <paramref name="name"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="name"/> does not correspond to any
            supported behavior type.</exception>
        </member>
        <member name="T:StardewUI.Framework.Behaviors.IPropertyStates`1">
            <summary>
            Provides methods for tracking and modifying state-based overrides for a view's property.
            </summary>
            <remarks>
            <para>
            State overrides provide a clean priority scheme and reversion path for semantic states such as "hover" or "pressed".
            Instead of behaviors modifying an <see cref="T:StardewUI.IView"/> directly, they can instead push their override to the view's
            propert states, and as long as that override remains the topmost state, it is authoritative for that specific view
            and property. If it is later removed, then whichever other state is subsequently on top takes precedence.
            </para>
            <para>
            Using this abstraction avoids the need for individual behaviors to save the previous value, and more importantly,
            prevents unintended conflicts between multiple behaviors each trying to act on the same property of the same view.
            </para>
            </remarks>
            <typeparam name="T">The property value type.</typeparam>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.IPropertyStates`1.Push(System.String,`0)">
            <summary>
            Pushes a new state to the top of the stack, making it the active override.
            </summary>
            <remarks>
            If a state with the specified <paramref name="stateName"/> already exists on the stack, then this will remove
            the previous instance and add the new instance on top.
            </remarks>
            <param name="stateName">The name of the new state.</param>
            <param name="value">The property value to use when while the state is active.</param>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.IPropertyStates`1.Replace(System.String,`0)">
            <summary>
            Replaces the value associated with a specified state.
            </summary>
            <remarks>
            If no state with the specified <paramref name="stateName"/> is on the stack, then this does nothing. It will not
            push a new state.
            </remarks>
            <param name="stateName">The name of the state on the stack.</param>
            <param name="value">The new value to associate with the specified <paramref name="stateName"/>.</param>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.IPropertyStates`1.ReplaceOrPush(System.String,`0)">
            <summary>
            Replaces any existing value associated with a specified state, or pushes a new state to the top of the stack if
            a previous state does not already exist.
            </summary>
            <param name="stateName">The name of the new state.</param>
            <param name="value">The property value to associate with the specified <paramref name="stateName"/>.</param>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.IPropertyStates`1.TryPeek(System.ValueTuple{System.String,`0}@)">
            <summary>
            Gets the state name and value with highest priority, i.e. on top of the stack.
            </summary>
            <param name="result">The state name and value of the active override, or the default for
            <typeparamref name="T"/> if the function returned <c>false</c>.</param>
            <returns><c>true</c> if there was at least one active override for this property; <c>false</c> if the stack is
            currently empty.</returns>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.IPropertyStates`1.TryPeekValue(`0@)">
            <summary>
            Gets the value with highest priority, i.e. on top of the stack.
            </summary>
            <param name="value">The value of the active override, or the default for <typeparamref name="T"/> if the
            function returned <c>false</c>.</param>
            <returns><c>true</c> if there was at least one active override for this property; <c>false</c> if the stack is
            currently empty.</returns>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.IPropertyStates`1.TryRemove(System.String,`0@)">
            <summary>
            Removes a specified state override, if one exists.
            </summary>
            <param name="stateName">The name of the state on the stack.</param>
            <param name="value">The value associated with the specified <paramref name="stateName"/>, if there was an
            existing override, or <c>null</c> if there was no instance of that state.</param>
            <returns><c>true</c> if an override for the specified <paramref name="stateName"/> was removed from the stack;
            <c>false</c> if no such state was on the stack.</returns>
        </member>
        <member name="T:StardewUI.Framework.Behaviors.IViewBehavior">
            <summary>
            Provides methods for attaching arbitrary data-dependent behavior to a view.
            </summary>
            <remarks>
            Add-ons should normally not use this interface directly, and instead derive from
            <see cref="T:StardewUI.Framework.Behaviors.ViewBehavior`2"/> for type safety.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.Behaviors.IViewBehavior.DataType">
            <summary>
            The type of data that the behavior accepts in <see cref="M:StardewUI.Framework.Behaviors.IViewBehavior.SetData(System.Object)"/>.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.IViewBehavior.CanUpdate">
            <summary>
            Checks whether the behavior is allowed to <see cref="M:StardewUI.Framework.Behaviors.IViewBehavior.Update(System.TimeSpan)"/>.
            </summary>
            <remarks>
            Implementations can override this in order to selectively disable updates. Typically, updates will be disabled
            when the behavior cannot run due to not having an attached view or data.
            </remarks>
            <returns><c>true</c> to continue running <see cref="M:StardewUI.Framework.Behaviors.IViewBehavior.Update(System.TimeSpan)"/> ticks, <c>false</c> to skip updates.</returns>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.IViewBehavior.Initialize(StardewUI.Framework.Behaviors.BehaviorTarget)">
            <summary>
            Initializes the target (view, state overrides, etc.) for the behavior.
            </summary>
            <remarks>
            The framework guarantees that <see cref="M:StardewUI.Framework.Behaviors.IViewBehavior.Update(System.TimeSpan)"/> will never be called before <c>Initialize</c>, so views may
            be implemented with default parameterless constructors and perform initialization in this method.
            </remarks>
            <param name="target">The target of the behavior.</param>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.IViewBehavior.PreUpdate(System.TimeSpan)">
            <summary>
            Runs on every update tick, before any bindings or views update.
            </summary>
            <remarks>
            Typically used to read information about the underlying view as it existed at the beginning of the frame, e.g.
            to handle a transition.
            </remarks>
            <param name="elapsed"></param>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.IViewBehavior.SetData(System.Object)">
            <summary>
            Updates the behavior's current data.
            </summary>
            <param name="data">The new data.</param>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.IViewBehavior.Update(System.TimeSpan)">
            <summary>
            Runs on every update tick.
            </summary>
            <param name="elapsed">Time elapsed since the last update.</param>
        </member>
        <member name="T:StardewUI.Framework.Behaviors.IViewState">
            <summary>
            Provides access to all state-based overrides associated with a view.
            </summary>
        </member>
        <member name="E:StardewUI.Framework.Behaviors.IViewState.FlagChanged">
            <summary>
            Event raised when a flag changes, i.e. as the outcome of <see cref="M:StardewUI.Framework.Behaviors.IViewState.SetFlag(System.String,System.Object)"/>.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.IViewState.GetDefaultValue``1(System.String)">
            <summary>
            Retrieves the default value for a given property.
            </summary>
            <remarks>
            <para>
            The default value is the value that will be used when there are no states for that property, i.e. when
            <see cref="M:StardewUI.Framework.Behaviors.IViewState.GetProperty``1(System.String)"/> returns <c>null</c> for the specified <paramref name="propertyName"/> or when the
            property's states are empty.
            </para>
            <para>
            Defaults are real-time; if the property is linked via data binding, then the default value is the value that is
            currently bound.
            </para>
            </remarks>
            <typeparam name="T">The property value type.</typeparam>
            <param name="propertyName">The property name.</param>
            <returns>The default value for the specified <paramref name="propertyName"/>.</returns>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.IViewState.GetFlag``1(System.String)">
            <summary>
            Gets the current value of a flag, if one is set.
            </summary>
            <param name="name">The flag name.</param>
            <typeparam name="T">Type of the flag value.</typeparam>
            <returns>The flag value, or the default of <typeparamref name="T"/> if not set.</returns>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.IViewState.GetOrAddProperty``1(System.String)">
            <summary>
            Gets the override states for the specified property, creating a new one if it does not already exist.
            </summary>
            <typeparam name="T">The property value type.</typeparam>
            <param name="propertyName">The property name.</param>
            <returns>The state overrides for the specified property on the current view.</returns>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.IViewState.GetProperty``1(System.String)">
            <summary>
            Gets the override states for the specified property, if any exist.
            </summary>
            <param name="propertyName">The property name.</param>
            <returns>The state overrides for the specified property, or <c>null</c> if none have been added.</returns>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.IViewState.SetFlag(System.String,System.Object)">
            <summary>
            Sets an arbitrary flag that other behaviors can read and/or be notified about.
            </summary>
            <param name="name">The flag name.</param>
            <param name="value">The flag value, or <c>null</c> to unset.</param>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.IViewState.Write(StardewUI.IView)">
            <summary>
            Writes the active overrides to the target view.
            </summary>
            <param name="view">The view that should receive the state/overrides.</param>
        </member>
        <member name="T:StardewUI.Framework.Behaviors.PropertyStateList`1">
            <summary>
            Simple list-based implementation of <see cref="T:StardewUI.Framework.Behaviors.IPropertyStates`1"/> optimized for low override counts, typically
            fewer than 5 and never more than 10-20.
            </summary>
            <remarks>
            Internally uses a <see cref="T:System.Collections.Generic.List`1"/>, which is memory-efficient and has fast appends, but requires shifting items
            when a state is removed from the middle of the list. This is suitable for small stacks (e.g. a pressed state on top
            of a hover state, where the latter might be removed before the former), but if the stacks become very large, i.e.
            having hundreds of items, then a different implementation such as linked list or linked hash set might be required.
            Pushing a new state also requires checking for the existing state first, which is faster than hashing for very small
            lists but, similar to removals, may be inefficient for very large ones.
            </remarks>
            <typeparam name="T">The property value type.</typeparam>
        </member>
        <member name="P:StardewUI.Framework.Behaviors.PropertyStateList`1.Count">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Behaviors.PropertyStateList`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Behaviors.PropertyStateList`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Behaviors.PropertyStateList`1.Push(System.String,`0)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Behaviors.PropertyStateList`1.Replace(System.String,`0)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Behaviors.PropertyStateList`1.TryPeek(System.ValueTuple{System.String,`0}@)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Behaviors.PropertyStateList`1.TryPeekValue(`0@)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Behaviors.PropertyStateList`1.TryRemove(System.String,`0@)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Behaviors.RootBehaviorFactory">
            <summary>
            Behavior factory for built-in behavior types.
            </summary>
            <param name="addonFactories">Behavior factories registered by add-ons, in order of priority. All add-on factories
            are considered after the standard behavior names.</param>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.RootBehaviorFactory.#ctor(System.Collections.Generic.IEnumerable{StardewUI.Framework.Behaviors.IBehaviorFactory})">
            <summary>
            Behavior factory for built-in behavior types.
            </summary>
            <param name="addonFactories">Behavior factories registered by add-ons, in order of priority. All add-on factories
            are considered after the standard behavior names.</param>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.RootBehaviorFactory.CanCreateBehavior(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Behaviors.RootBehaviorFactory.CreateBehavior(System.Type,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Behaviors.StateBehaviorFactory">
            <summary>
            Factory for creating behaviors that apply single-property overrides on state transitions, such as
            <c>hover:transform</c>.
            </summary>
            <remarks>
            Also handles transitions, which follow a similar creation mechanism.
            </remarks>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.StateBehaviorFactory.CanCreateBehavior(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Behaviors.StateBehaviorFactory.CreateBehavior(System.Type,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Behaviors.TransitionBehavior`1">
            <summary>
            Behavior that applies gradual transitions (AKA tweens) to view properties.
            </summary>
            <typeparam name="TValue">Value type for the transitioned property.</typeparam>
            <param name="propertyName">Name of the overridden property.</param>
            <param name="lerp">Interpolation function for the transitioned property type.</param>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.TransitionBehavior`1.#ctor(System.String,StardewUI.Animation.Lerp{`0})">
            <summary>
            Behavior that applies gradual transitions (AKA tweens) to view properties.
            </summary>
            <typeparam name="TValue">Value type for the transitioned property.</typeparam>
            <param name="propertyName">Name of the overridden property.</param>
            <param name="lerp">Interpolation function for the transitioned property type.</param>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.TransitionBehavior`1.PreUpdate(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Behaviors.TransitionBehavior`1.Update(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Behaviors.TransitionBehavior`1.OnAttached">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Behaviors.TransitionBehavior`1.OnDetached(StardewUI.IView)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Behaviors.ViewBehavior`2">
            <summary>
            Base class for a behavior extension, which enables self-contained, stateful behaviors to be "attached" to an
            arbitrary view without having to extend the view itself.
            </summary>
            <remarks>
            Behaviors receive the <see cref="P:StardewUI.Framework.Behaviors.ViewBehavior`2.View"/> which is decorated by the behavior, and some arbitrary <see cref="P:StardewUI.Framework.Behaviors.ViewBehavior`2.Data"/>
            obtained from the attribute value or binding. They then become part of the UI's update loop, via their
            <see cref="M:StardewUI.Framework.Behaviors.ViewBehavior`2.Update(System.TimeSpan)"/> method running every tick.
            </remarks>
            <typeparam name="TView">Base type for all views that support this behavior.</typeparam>
            <typeparam name="TData">Type of data provided to this behavior as an argument/binding.</typeparam>
        </member>
        <member name="P:StardewUI.Framework.Behaviors.ViewBehavior`2.Data">
            <summary>
            The assigned or bound data.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Behaviors.ViewBehavior`2.View">
            <summary>
            The currently-attached view.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Behaviors.ViewBehavior`2.ViewState">
            <summary>
            State overrides for the <see cref="P:StardewUI.Framework.Behaviors.ViewBehavior`2.View"/>.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.ViewBehavior`2.CanUpdate">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Behaviors.ViewBehavior`2.Dispose">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Behaviors.ViewBehavior`2.Initialize(StardewUI.Framework.Behaviors.BehaviorTarget)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Behaviors.ViewBehavior`2.PreUpdate(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Behaviors.ViewBehavior`2.Update(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Behaviors.ViewBehavior`2.OnAttached">
            <summary>
            Runs after the behavior is attached to a target.
            </summary>
            <remarks>
            Setup code should go in this method to ensure that the values of <see cref="P:StardewUI.Framework.Behaviors.ViewBehavior`2.View"/> and <see cref="P:StardewUI.Framework.Behaviors.ViewBehavior`2.ViewState"/>
            are actually assigned. If code runs in the behavior's constructor, these are not guaranteed to be populated.
            </remarks>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.ViewBehavior`2.OnDetached(StardewUI.IView)">
            <summary>
            Runs when the behavior is detached from a target.
            </summary>
            <remarks>
            <para>
            Behaviors may receive new views as part of a "rebind", if the old view is destroyed and recreated, for example
            as the result of a conditional binding changing states.
            </para>
            <para>
            <c>OnDetached</c> is always immediately followed by <see cref="M:StardewUI.Framework.Behaviors.ViewBehavior`2.OnAttached"/>. A behavior cannot remain in a
            detached state; however, overriding this method gives behaviors the opportunity to clean up state from the old
            view (e.g. remove event handlers) before the new one is attached.
            </para>
            <para>
            Also runs when the behavior is disposed, so detach logic does not need to be duplicated in
            <see cref="M:StardewUI.Framework.Behaviors.ViewBehavior`2.OnDispose"/>.
            </para>
            </remarks>
            <param name="view">The view that was previously attached.</param>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.ViewBehavior`2.OnDispose">
            <summary>
            Runs when the behavior is being disposed.
            </summary>
            <remarks>
            The default implementation does nothing. Overriding this allows subclasses to perform their own cleanup, if
            required by the specific feature.
            </remarks>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.ViewBehavior`2.OnNewData(`1)">
            <summary>
            Runs when the <see cref="P:StardewUI.Framework.Behaviors.ViewBehavior`2.Data"/> of this behavior is changed.
            </summary>
            <remarks>
            At the time this method runs, <see cref="P:StardewUI.Framework.Behaviors.ViewBehavior`2.Data"/> has already been assigned to the new value. After the method
            completes, the <paramref name="previousData"/> will no longer be accessible to this behavior.
            </remarks>
            <param name="previousData"></param>
        </member>
        <member name="T:StardewUI.Framework.Behaviors.ViewState">
            <summary>
            View state manager based on the view's runtime descriptor and defaults.
            </summary>
            <param name="viewDescriptor">Descriptor for the managed view type, providing property accessors.</param>
            <param name="viewDefaults">Default values for the managed view type.</param>
            <param name="previousState">The previous state from which to restore the transient property values.</param>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.ViewState.#ctor(StardewUI.Framework.Descriptors.IViewDescriptor,StardewUI.Framework.Descriptors.IViewDefaults,StardewUI.Framework.Behaviors.ViewState)">
            <summary>
            View state manager based on the view's runtime descriptor and defaults.
            </summary>
            <param name="viewDescriptor">Descriptor for the managed view type, providing property accessors.</param>
            <param name="viewDefaults">Default values for the managed view type.</param>
            <param name="previousState">The previous state from which to restore the transient property values.</param>
        </member>
        <member name="E:StardewUI.Framework.Behaviors.ViewState.FlagChanged">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Behaviors.ViewState.GetDefaultValue``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Behaviors.ViewState.GetFlag``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Behaviors.ViewState.GetOrAddProperty``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Behaviors.ViewState.GetProperty``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Behaviors.ViewState.SetFlag(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Behaviors.ViewState.Write(StardewUI.IView)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Behaviors.VisibilityStateBehavior`1">
            <summary>
            Behavior that applies a property override when a view enters or leaves the visible state.
            </summary>
            <remarks>
            The override is added when the view's <see cref="P:StardewUI.IView.Visibility"/> becomes <see cref="M:StardewUI.Layout.Visibility.#ctor"/> and
            removed when it becomes <see cref="F:StardewUI.Layout.Visibility.Hidden"/>. In addition, the state corresponding to the view's initial
            visibility is applied as soon as the behavior as initialized, allowing for transitions to occur when the view is
            first created even if the visibility never explicitly changes.
            </remarks>
            <typeparam name="TValue">Value type for the overridden property.</typeparam>
            <param name="propertyName">Name of the overridden property.</param>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.VisibilityStateBehavior`1.#ctor(System.String)">
            <summary>
            Behavior that applies a property override when a view enters or leaves the visible state.
            </summary>
            <remarks>
            The override is added when the view's <see cref="P:StardewUI.IView.Visibility"/> becomes <see cref="M:StardewUI.Layout.Visibility.#ctor"/> and
            removed when it becomes <see cref="F:StardewUI.Layout.Visibility.Hidden"/>. In addition, the state corresponding to the view's initial
            visibility is applied as soon as the behavior as initialized, allowing for transitions to occur when the view is
            first created even if the visibility never explicitly changes.
            </remarks>
            <typeparam name="TValue">Value type for the overridden property.</typeparam>
            <param name="propertyName">Name of the overridden property.</param>
        </member>
        <member name="M:StardewUI.Framework.Behaviors.VisibilityStateBehavior`1.Update(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Behaviors.VisibilityStateBehavior`1.OnAttached">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Behaviors.VisibilityStateBehavior`1.OnDetached(StardewUI.IView)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Behaviors.VisibilityStateBehavior`1.OnNewData(`0)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Binding.IArgumentSource">
            <summary>
            Provides a method to obtain the value of a single argument to a method call, such as an event handler.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Binding.IArgumentSource.GetValue(System.Object)">
            <summary>
            Gets the current argument value.
            </summary>
            <param name="eventArgs">The current event arguments, if being read from an event binding.</param>
        </member>
        <member name="T:StardewUI.Framework.Binding.BoundArgumentSource">
            <summary>
            Provides an argument value based on an arbitrary <see cref="T:StardewUI.Framework.Sources.IValueSource"/>.
            </summary>
            <remarks>
            Causes the <paramref name="source"/> to update every time the value is read, and therefore is designed to be read
            relatively infrequently, i.e. only when the method is actually being called.
            </remarks>
            <param name="source">The source of the argument value.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.BoundArgumentSource.#ctor(StardewUI.Framework.Sources.IValueSource)">
            <summary>
            Provides an argument value based on an arbitrary <see cref="T:StardewUI.Framework.Sources.IValueSource"/>.
            </summary>
            <remarks>
            Causes the <paramref name="source"/> to update every time the value is read, and therefore is designed to be read
            relatively infrequently, i.e. only when the method is actually being called.
            </remarks>
            <param name="source">The source of the argument value.</param>
        </member>
        <member name="T:StardewUI.Framework.Binding.EventArgumentSource">
            <summary>
            Helper for creating generic <see cref="T:StardewUI.Framework.Binding.EventArgumentSource`3"/> using types known
            only at runtime.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Binding.EventArgumentSource.Create(System.Type,System.Type,StardewUI.Framework.Descriptors.IPropertyDescriptor,StardewUI.Framework.Converters.IValueConverterFactory)">
            <summary>
            Creates a new, typed <see cref="T:StardewUI.Framework.Binding.EventArgumentSource`3"/>.
            </summary>
            <param name="eventArgsType">The type of the event argument object, generally deriving from
            <see cref="T:System.EventArgs"/>.</param>
            <param name="destinationType">The type actually needed for the invocation argument, which may be different from
            the event property's type.</param>
            <param name="propertyDescriptor">Descriptor with the accessor and metadata for the origin property on the
            <paramref name="eventArgsType"/>.</param>
            <param name="converterFactory">Factory for creating <see cref="T:StardewUI.Framework.Converters.IValueConverter`2"/>
            instances, used to convert values from the event arguments to the <paramref name="destinationType"/>.</param>
        </member>
        <member name="T:StardewUI.Framework.Binding.EventArgumentSource`3">
            <summary>
            Provides an argument value to an event handler by reading a property of the event arguments.
            </summary>
            <typeparam name="TEventArgs">The type of the event argument object, generally deriving from
            <see cref="T:System.EventArgs"/>.</typeparam>
            <typeparam name="TSource">Type of property to read from the <typeparamref name="TEventArgs"/> object.</typeparam>
            <typeparam name="TDestination">The type actually needed for the invocation argument, which may be different from the
            event property's type.</typeparam>
            <param name="propertyDescriptor">Descriptor with the accessor and metadata for the origin property on the
            <typeparamref name="TEventArgs"/> type.</param>
            <param name="converterFactory">Factory for creating <see cref="T:StardewUI.Framework.Converters.IValueConverter`2"/>
            instances, used to convert <typeparamref name="TSource"/> to <typeparamref name="TDestination"/>.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.EventArgumentSource`3.#ctor(StardewUI.Framework.Descriptors.IPropertyDescriptor,StardewUI.Framework.Converters.IValueConverterFactory)">
            <summary>
            Provides an argument value to an event handler by reading a property of the event arguments.
            </summary>
            <typeparam name="TEventArgs">The type of the event argument object, generally deriving from
            <see cref="T:System.EventArgs"/>.</typeparam>
            <typeparam name="TSource">Type of property to read from the <typeparamref name="TEventArgs"/> object.</typeparam>
            <typeparam name="TDestination">The type actually needed for the invocation argument, which may be different from the
            event property's type.</typeparam>
            <param name="propertyDescriptor">Descriptor with the accessor and metadata for the origin property on the
            <typeparamref name="TEventArgs"/> type.</param>
            <param name="converterFactory">Factory for creating <see cref="T:StardewUI.Framework.Converters.IValueConverter`2"/>
            instances, used to convert <typeparamref name="TSource"/> to <typeparamref name="TDestination"/>.</param>
        </member>
        <member name="T:StardewUI.Framework.Binding.IAttributeBindingFactory">
            <summary>
            Service for creating <see cref="T:StardewUI.Framework.Binding.IAttributeBinding"/> instances for the individual attributes of a bound view.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Binding.IAttributeBindingFactory.TryCreateBinding(StardewUI.Framework.Descriptors.IViewDescriptor,StardewUI.Framework.Dom.IAttribute,StardewUI.Framework.Binding.BindingContext,StardewUI.Framework.Content.IResolutionScope)">
            <summary>
            Attempts to creates a new attribute binding.
            </summary>
            <param name="viewDescriptor">Descriptor for the bound view, providing access to its properties.</param>
            <param name="attribute">The attribute data.</param>
            <param name="context">The binding context, including the bound data and descriptor for the data type.</param>
            <param name="resolutionScope">Scope for resolving externalized attributes, such as translation keys.</param>
            <returns>The created binding, or <c>null</c> if the arguments do not support creating a binding, such as an
            <paramref name="attribute"/> bound to a <c>null</c> value of <paramref name="context"/>.</returns>
        </member>
        <member name="T:StardewUI.Framework.Binding.AttributeBindingFactory">
            <summary>
            A general <see cref="T:StardewUI.Framework.Binding.IAttributeBindingFactory"/> implementation using dependency injection for all resolution.
            </summary>
            <param name="valueSourceFactory">The factory responsible for creating <see cref="T:StardewUI.Framework.Sources.IValueSource`1"/> instances from
            attribute data.</param>
            <param name="valueConverterFactory">The factory responsible for creating
            <see cref="T:StardewUI.Framework.Converters.IValueConverter`2"/> instances, used to convert bound values to the types required
            by the target view.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.AttributeBindingFactory.#ctor(StardewUI.Framework.Sources.IValueSourceFactory,StardewUI.Framework.Converters.IValueConverterFactory)">
            <summary>
            A general <see cref="T:StardewUI.Framework.Binding.IAttributeBindingFactory"/> implementation using dependency injection for all resolution.
            </summary>
            <param name="valueSourceFactory">The factory responsible for creating <see cref="T:StardewUI.Framework.Sources.IValueSource`1"/> instances from
            attribute data.</param>
            <param name="valueConverterFactory">The factory responsible for creating
            <see cref="T:StardewUI.Framework.Converters.IValueConverter`2"/> instances, used to convert bound values to the types required
            by the target view.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.AttributeBindingFactory.TryCreateBinding(StardewUI.Framework.Descriptors.IViewDescriptor,StardewUI.Framework.Dom.IAttribute,StardewUI.Framework.Binding.BindingContext,StardewUI.Framework.Content.IResolutionScope)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.AttributeBindingFactory.Warmup``2">
            <summary>
            Prepares the reflection cache for a future binding from the specified source type to destination type.
            </summary>
            <remarks>
            This does not actually create a binding and is safe to call during startup. This overload is preferred over
            <see cref="M:StardewUI.Framework.Binding.AttributeBindingFactory.Warmup(System.Type,System.Type)"/> when possible, as it does not use any reflection, and can be called from the
            main thread.
            </remarks>
            <typeparam name="TSource">The type of the source (e.g. attribute/context) value.</typeparam>
            <typeparam name="TDestination">The type of the destination (e.g. view) value.</typeparam>
        </member>
        <member name="M:StardewUI.Framework.Binding.AttributeBindingFactory.Warmup(System.Type,System.Type)">
            <summary>
            Prepares the reflection cache for a future binding from the specified source type to destination type.
            </summary>
            <param name="sourceType">The type of the source (e.g. attribute/context) value.</param>
            <param name="destinationType">The type of the destination (e.g. view) value.</param>
        </member>
        <member name="T:StardewUI.Framework.Binding.BackoffNodeDecorator">
            <summary>
            A transparent binding node whose purpose is to throttle failed updates and log any errors.
            </summary>
            <param name="node">The owned node.</param>
            <param name="backoffRule">Configures the backoff duration and scaling when an update fails.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.BackoffNodeDecorator.#ctor(StardewUI.Framework.Binding.IViewNode,StardewUI.Framework.BackoffRule)">
            <summary>
            A transparent binding node whose purpose is to throttle failed updates and log any errors.
            </summary>
            <param name="node">The owned node.</param>
            <param name="backoffRule">Configures the backoff duration and scaling when an update fails.</param>
        </member>
        <member name="P:StardewUI.Framework.Binding.BackoffNodeDecorator.Children">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Binding.BackoffNodeDecorator.Context">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Binding.BackoffNodeDecorator.FloatingElements">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Binding.BackoffNodeDecorator.Views">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.BackoffNodeDecorator.Dispose">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.BackoffNodeDecorator.Print(System.Text.StringBuilder,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.BackoffNodeDecorator.Reset">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.BackoffNodeDecorator.Update(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Binding.BinaryCondition">
            <summary>
            A condition based on the comparison of two values.
            </summary>
            <remarks>
            <para>
            Passes whenever both values are equal. Used for <c>*switch</c> and <c>*case</c> attributes.
            </para>
            <para>
            Any type may be used for either operand, but a conversion must be available from one of the types to the other type
            in order for the condition to ever pass. If the two types are different, and conversion both ways is possible, then
            priority will be given to the type implementing <see cref="T:System.IEquatable`1"/> on itself; if the best type is still
            ambiguous, then left->right conversion will be chosen over right->left.
            </para>
            </remarks>
            <param name="valueSourceFactory">The factory responsible for creating <see cref="T:StardewUI.Framework.Sources.IValueSource`1"/> instances from
            attribute data.</param>
            <param name="valueConverterFactory">The factory responsible for creating
            <see cref="T:StardewUI.Framework.Converters.IValueConverter`2"/> instances, used to convert bound values to the types required
            by the target view.</param>
            <param name="leftScope">Scope for resolving any externalized <paramref name="leftAttribute"/> values, such as
            translation keys.</param>
            <param name="leftAttribute">The attribute containing the expression for the LHS operand.</param>
            <param name="rightScope">Scope for resolving any externalized <paramref name="rightAttribute"/> values, such as
            translation keys.</param>
            <param name="rightAttribute">The attribute containing the expression for the RHS operand.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.BinaryCondition.#ctor(StardewUI.Framework.Sources.IValueSourceFactory,StardewUI.Framework.Converters.IValueConverterFactory,StardewUI.Framework.Content.IResolutionScope,StardewUI.Framework.Dom.IAttribute,StardewUI.Framework.Content.IResolutionScope,StardewUI.Framework.Dom.IAttribute)">
            <summary>
            A condition based on the comparison of two values.
            </summary>
            <remarks>
            <para>
            Passes whenever both values are equal. Used for <c>*switch</c> and <c>*case</c> attributes.
            </para>
            <para>
            Any type may be used for either operand, but a conversion must be available from one of the types to the other type
            in order for the condition to ever pass. If the two types are different, and conversion both ways is possible, then
            priority will be given to the type implementing <see cref="T:System.IEquatable`1"/> on itself; if the best type is still
            ambiguous, then left->right conversion will be chosen over right->left.
            </para>
            </remarks>
            <param name="valueSourceFactory">The factory responsible for creating <see cref="T:StardewUI.Framework.Sources.IValueSource`1"/> instances from
            attribute data.</param>
            <param name="valueConverterFactory">The factory responsible for creating
            <see cref="T:StardewUI.Framework.Converters.IValueConverter`2"/> instances, used to convert bound values to the types required
            by the target view.</param>
            <param name="leftScope">Scope for resolving any externalized <paramref name="leftAttribute"/> values, such as
            translation keys.</param>
            <param name="leftAttribute">The attribute containing the expression for the LHS operand.</param>
            <param name="rightScope">Scope for resolving any externalized <paramref name="rightAttribute"/> values, such as
            translation keys.</param>
            <param name="rightAttribute">The attribute containing the expression for the RHS operand.</param>
        </member>
        <member name="P:StardewUI.Framework.Binding.BinaryCondition.LeftContext">
            <summary>
            The context used to derive the LHS value, if the left attribute is a context binding.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Binding.BinaryCondition.LeftContextSelector">
            <summary>
            Optional source for automatically updating the <see cref="P:StardewUI.Framework.Binding.BinaryCondition.LeftContext"/>.
            </summary>
            <remarks>
            If specified, then this selector will be automatically run on every <see cref="M:StardewUI.Framework.Binding.BinaryCondition.Update"/> and assigned to the
            <see cref="P:StardewUI.Framework.Binding.BinaryCondition.LeftContext"/>; otherwise, the <see cref="P:StardewUI.Framework.Binding.BinaryCondition.LeftContext"/> must be set explicitly in order to change
            the evaluation context for the left-hand value.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.Binding.BinaryCondition.RightContext">
            <summary>
            The context used to derive the RHS value, if the right attribute is a context binding.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Binding.BinaryCondition.RightContextSelector">
            <summary>
            Optional source for automatically updating the <see cref="P:StardewUI.Framework.Binding.BinaryCondition.RightContext"/>.
            </summary>
            <remarks>
            If specified, then this selector will be automatically run on every <see cref="M:StardewUI.Framework.Binding.BinaryCondition.Update"/> and assigned to the
            <see cref="P:StardewUI.Framework.Binding.BinaryCondition.RightContext"/>; otherwise, the <see cref="P:StardewUI.Framework.Binding.BinaryCondition.RightContext"/> must be set explicitly in order to change
            the evaluation context for the right-hand value.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.Binding.BinaryCondition.Passed">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.BinaryCondition.Dispose">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.BinaryCondition.Update">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Binding.BindingContext">
            <summary>
            Context, or scope, of a bound view, providing the backing data and tools for accessing its properties.
            </summary>
            <param name="Descriptor">Descriptor of the <see cref="P:StardewUI.Framework.Binding.BindingContext.Data"/> type, used to read current values.</param>
            <param name="Data">The bound data.</param>
            <param name="Parent">The parent context from which this context was derived, if any.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.BindingContext.#ctor(StardewUI.Framework.Descriptors.IObjectDescriptor,System.Object,StardewUI.Framework.Binding.BindingContext)">
            <summary>
            Context, or scope, of a bound view, providing the backing data and tools for accessing its properties.
            </summary>
            <param name="Descriptor">Descriptor of the <see cref="P:StardewUI.Framework.Binding.BindingContext.Data"/> type, used to read current values.</param>
            <param name="Data">The bound data.</param>
            <param name="Parent">The parent context from which this context was derived, if any.</param>
        </member>
        <member name="P:StardewUI.Framework.Binding.BindingContext.Descriptor">
            <summary>Descriptor of the <see cref="P:StardewUI.Framework.Binding.BindingContext.Data"/> type, used to read current values.</summary>
        </member>
        <member name="P:StardewUI.Framework.Binding.BindingContext.Data">
            <summary>The bound data.</summary>
        </member>
        <member name="P:StardewUI.Framework.Binding.BindingContext.Parent">
            <summary>The parent context from which this context was derived, if any.</summary>
        </member>
        <member name="M:StardewUI.Framework.Binding.BindingContext.Create(System.Object,StardewUI.Framework.Binding.BindingContext)">
            <summary>
            Creates a <see cref="T:StardewUI.Framework.Binding.BindingContext"/> from the specified data, automatically building a new descriptor if the
            data type has not been previously seen.
            </summary>
            <param name="data">The bound data.</param>
            <param name="parent">The parent context from which this context was derived, if any.</param>
            <returns>A new <see cref="T:StardewUI.Framework.Binding.BindingContext"/> whose <see cref="P:StardewUI.Framework.Binding.BindingContext.Data"/> is the specified <paramref name="data"/>
            and whose <see cref="P:StardewUI.Framework.Binding.BindingContext.Descriptor"/> is the descriptor of <paramref name="data"/>'s runtime type.</returns>
        </member>
        <member name="M:StardewUI.Framework.Binding.BindingContext.Redirect(StardewUI.Framework.Dom.ContextRedirect)">
            <summary>
            Resolves a redirected context, using this context as the starting point.
            </summary>
            <param name="redirect">The redirect data.</param>
            <returns>The resolved <see cref="T:StardewUI.Framework.Binding.BindingContext"/>, or <c>null</c> if the <paramref name="redirect"/> does not
            resolve to a valid context.</returns>
        </member>
        <member name="T:StardewUI.Framework.Binding.BindingDirection">
            <summary>
            The direction of data flow in a data binding.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Binding.BindingDirection.In">
            <summary>
            An input binding, i.e. the view receives its value from the context.
            </summary>
            <remarks>
            This is implicitly the binding type for all read-only sources, such as assets.
            </remarks>
        </member>
        <member name="F:StardewUI.Framework.Binding.BindingDirection.Out">
            <summary>
            An output binding, i.e. the view publishes its value to the context.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Binding.BindingDirection.InOut">
            <summary>
            A binding that is both input and output, i.e. the view receives its value from the context and also publishes
            its value to the context, depending on where the most recent change occurred.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Binding.BindingDirectionExtensions">
            <summary>
            Extension methods for the <see cref="T:StardewUI.Framework.Binding.BindingDirection"/> enum.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Binding.BindingDirectionExtensions.IsIn(StardewUI.Framework.Binding.BindingDirection)">
            <summary>
            Gets whether or not a direction includes an input binding, i.e. is either <see cref="F:StardewUI.Framework.Binding.BindingDirection.In"/>
            or <see cref="F:StardewUI.Framework.Binding.BindingDirection.InOut"/>.
            </summary>
            <param name="direction">The binding direction.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.BindingDirectionExtensions.IsOut(StardewUI.Framework.Binding.BindingDirection)">
            <summary>
            Gets whether or not a direction includes an output binding, i.e. is either <see cref="F:StardewUI.Framework.Binding.BindingDirection.Out"/>
            or <see cref="F:StardewUI.Framework.Binding.BindingDirection.InOut"/>.
            </summary>
            <param name="direction">The binding direction.</param>
        </member>
        <member name="T:StardewUI.Framework.Binding.BindingException">
            <summary>
            The exception that is thrown when an unrecoverable error happens during data binding for a view.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Binding.BindingException.Node">
            <summary>
            The specific node that failed to bind, if known.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Binding.BindingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StardewUI.Framework.Binding.BindingException"/> class.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Binding.BindingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StardewUI.Framework.Binding.BindingException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.BindingException.#ctor(System.String,StardewUI.Framework.Dom.SNode)">
            <summary>
            Initializes a new instance of the <see cref="T:StardewUI.Framework.Binding.BindingException"/> class with a specified error message and a
            reference to the failed node.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="node">The specific node that failed to bind.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.BindingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:StardewUI.Framework.Binding.BindingException"/> class with a specified error message and a
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if not
            specified.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.BindingException.#ctor(System.String,StardewUI.Framework.Dom.SNode,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:StardewUI.Framework.Binding.BindingException"/> class with a specified error message and
            references to the failed node and inner exception that are the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="node">The specific node that failed to bind.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if not
            specified.</param>
        </member>
        <member name="T:StardewUI.Framework.Binding.BoundViewDefaults">
            <summary>
            View defaults that provide the current data-bound values for any bound attributes/properties and fall back to the
            original ("blank") view defaults for unbound properties.
            </summary>
            <param name="original">The original or reference defaults for the managed view type.</param>
            <param name="attributes">The bound property attributes for the view's node.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.BoundViewDefaults.#ctor(StardewUI.Framework.Descriptors.IViewDefaults,System.Collections.Generic.IEnumerable{StardewUI.Framework.Binding.IAttributeBinding})">
            <summary>
            View defaults that provide the current data-bound values for any bound attributes/properties and fall back to the
            original ("blank") view defaults for unbound properties.
            </summary>
            <param name="original">The original or reference defaults for the managed view type.</param>
            <param name="attributes">The bound property attributes for the view's node.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.BoundViewDefaults.GetDefaultValue``1(System.String)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Binding.ConditionalNode">
            <summary>
            A structural node that only passes through its child node when some condition passes.
            </summary>
            <param name="innerNode">The node to conditionally render.</param>
            <param name="condition">The condition to evaluate.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.ConditionalNode.#ctor(StardewUI.Framework.Binding.IViewNode,StardewUI.Framework.Binding.ICondition)">
            <summary>
            A structural node that only passes through its child node when some condition passes.
            </summary>
            <param name="innerNode">The node to conditionally render.</param>
            <param name="condition">The condition to evaluate.</param>
        </member>
        <member name="P:StardewUI.Framework.Binding.ConditionalNode.Children">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Binding.ConditionalNode.Context">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Binding.ConditionalNode.FloatingElements">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Binding.ConditionalNode.Views">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.ConditionalNode.Dispose">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.ConditionalNode.Reset">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.ConditionalNode.Print(System.Text.StringBuilder,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.ConditionalNode.ToString">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.ConditionalNode.Update(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Binding.ContextUpdateTracker">
            <summary>
            Tracks context instances that already had updates dispatched this frame, to prevent duplication.
            </summary>
            <remarks>
            Used by the <see cref="T:StardewUI.Framework.Binding.ContextUpdatingNodeDecorator"/>.
            </remarks>
        </member>
        <member name="F:StardewUI.Framework.Binding.ContextUpdateTracker.Instance">
            <summary>
            Global instance for entire framework.
            </summary>
            <remarks>
            <para>
            Entire view trees may share the same context data; this is entirely up to the client(s). Therefore, the same
            tracker instance must be shared by all nodes in order to prevent duplication.
            </para>
            <para>
            The instance is expected to be reset in the <c>ModEntry</c> or similar entry point.
            </para>
            </remarks>
        </member>
        <member name="M:StardewUI.Framework.Binding.ContextUpdateTracker.Reset">
            <summary>
            Resets all state; to be called at the beginning of each frame.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Binding.ContextUpdateTracker.TrackUpdate(System.Object)">
            <summary>
            Tracks the update of a context instance so that <see cref="M:StardewUI.Framework.Binding.ContextUpdateTracker.WasAlreadyUpdated(System.Object)"/> returns <c>true</c>
            for the given <paramref name="contextData"/> until <see cref="M:StardewUI.Framework.Binding.ContextUpdateTracker.Reset"/> is called.
            </summary>
            <param name="contextData">The context that was updated.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.ContextUpdateTracker.WasAlreadyUpdated(System.Object)">
            <summary>
            Checks if a context instance already received an update tick dispatch for the current frame.
            </summary>
            <param name="contextData">The context that may have been previously updated.</param>
            <returns><c>true</c> if the <paramref name="contextData"/> already received an update tick, otherwise
            <c>false</c>.</returns>
        </member>
        <member name="T:StardewUI.Framework.Binding.ContextUpdatingNodeDecorator">
            <summary>
            A transparent binding node that propagates <see cref="M:StardewUI.Framework.Binding.IViewNode.Update(System.TimeSpan)"/> ticks to an eligible context.
            </summary>
            <param name="node">The owned node.</param>
            <param name="tracker">Shared instance tracking all context updates per frame.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.ContextUpdatingNodeDecorator.#ctor(StardewUI.Framework.Binding.IViewNode,StardewUI.Framework.Binding.ContextUpdateTracker)">
            <summary>
            A transparent binding node that propagates <see cref="M:StardewUI.Framework.Binding.IViewNode.Update(System.TimeSpan)"/> ticks to an eligible context.
            </summary>
            <param name="node">The owned node.</param>
            <param name="tracker">Shared instance tracking all context updates per frame.</param>
        </member>
        <member name="P:StardewUI.Framework.Binding.ContextUpdatingNodeDecorator.Children">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Binding.ContextUpdatingNodeDecorator.Context">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Binding.ContextUpdatingNodeDecorator.FloatingElements">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Binding.ContextUpdatingNodeDecorator.Views">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.ContextUpdatingNodeDecorator.Dispose">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.ContextUpdatingNodeDecorator.Print(System.Text.StringBuilder,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.ContextUpdatingNodeDecorator.Reset">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.ContextUpdatingNodeDecorator.Update(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Binding.EventBinding">
            <summary>
            Helper for creating generic <see cref="T:StardewUI.Framework.Binding.EventBinding`2"/> instances efficiently using types known
            only at runtime.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Binding.EventBinding.Create(System.Object,StardewUI.Framework.Descriptors.IEventDescriptor,System.Object,StardewUI.Framework.Descriptors.IMethodDescriptor,StardewUI.Framework.Binding.IArgumentSource[])">
            <summary>
            Creates a new event binding.
            </summary>
            <param name="eventTarget">The target that will raise the event, i.e. the view.</param>
            <param name="eventDescriptor">Descriptor (name, types, arguments, etc.) for the event.</param>
            <param name="destinationContext">Target object on which the <paramref name="destinationMethod"/> should be
            invoked.</param>
            <param name="destinationMethod">Method to invoke when the specified event is raised.</param>
            <param name="argumentSources">Sources to provide the argument values to the
            <paramref name="destinationMethod"/>.</param>
            <returns></returns>
        </member>
        <member name="T:StardewUI.Framework.Binding.EventBinding`2">
            <summary>
            Internal, transient state of an event binding created by the <see cref="T:StardewUI.Framework.Binding.EventBindingFactory"/>.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Binding.IEventBindingFactory">
            <summary>
            Service for creating <see cref="T:StardewUI.Framework.Binding.IEventBinding"/> instances for a view's events, and subscribing the handlers.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Binding.IEventBindingFactory.TryCreateBinding(StardewUI.IView,StardewUI.Framework.Descriptors.IViewDescriptor,StardewUI.Framework.Dom.IEvent,StardewUI.Framework.Binding.BindingContext)">
            <summary>
            Attempts to creates a new event binding.
            </summary>
            <param name="view">The view to bind to; the target that will raise the bound event.</param>
            <param name="viewDescriptor">Descriptor for the bound view, providing access to its events.</param>
            <param name="event">The event data.</param>
            <param name="context">The binding context, including the type descriptor and handler methods.</param>
            <returns>The created binding, or <c>null</c> if the arguments do not support creating a binding, such as an
            <paramref name="event"/> bound to a <c>null</c> value of <paramref name="context"/>.</returns>
        </member>
        <member name="T:StardewUI.Framework.Binding.EventBindingFactory">
            <summary>
            Reflection-based implementation of an <see cref="T:StardewUI.Framework.Binding.IEventBindingFactory"/>.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Binding.EventBindingFactory.#ctor(StardewUI.Framework.Sources.IValueSourceFactory,StardewUI.Framework.Converters.IValueConverterFactory)">
            <summary>
            Reflection-based implementation of an <see cref="T:StardewUI.Framework.Binding.IEventBindingFactory"/>.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Binding.EventBindingFactory.TryCreateBinding(StardewUI.IView,StardewUI.Framework.Descriptors.IViewDescriptor,StardewUI.Framework.Dom.IEvent,StardewUI.Framework.Binding.BindingContext)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.EventBindingFactory.Warmup(System.Type)">
            <summary>
            Prepares the reflection cache for the use of an event argument type.
            </summary>
            <remarks>
            This method may run slowly and should always be run on a low-priority background thread.
            </remarks>
            <param name="eventArgsType">The <see cref="T:System.EventArgs"/> subtype.</param>
        </member>
        <member name="T:StardewUI.Framework.Binding.IAttributeBinding">
            <summary>
            Binding instance for a single attribute on a single view.
            </summary>
            <remarks>
            <para>
            Encapsulates the source of the value and provides a method to update the target view if the value has changed.
            </para>
            <para>
            This is primarily for internal use, as a way of tracking fine-grained changes to views instead of having to rebind
            the entire view when anything changes.
            </para>
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.Binding.IAttributeBinding.DestinationPropertyName">
            <summary>
            The name of the bound property on the destination view.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Binding.IAttributeBinding.Direction">
            <summary>
            The data flow direction for this binding.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Binding.IAttributeBinding.GetBoundValue">
            <summary>
            Gets the current value bound for this attribute, regardless of the view's actual value.
            </summary>
            <remarks>
            <para>
            This method performs conversion (if necessary) from the source type to the destination type, but does not look
            at the destination view itself. It can be used to determine what the view's value "should be", which is part of
            the behavior system.
            </para>
            <para>
            Alternatively, this can be thought of as the value that the view would have after calling
            <see cref="M:StardewUI.Framework.Binding.IAttributeBinding.UpdateView(StardewUI.IView,System.Boolean)"/> with the <c>force</c> argument set to <c>true</c>.
            </para>
            </remarks>
            <returns>The currently bound value, or <c>null</c> if the value does not exist or cannot be determined, for
            example in the case of an <see cref="F:StardewUI.Framework.Grammar.AttributeValueType.OutputBinding"/>.</returns>
        </member>
        <member name="M:StardewUI.Framework.Binding.IAttributeBinding.UpdateSource(StardewUI.IView)">
            <summary>
            Updates the source to match the view's current value.
            </summary>
            <remarks>
            Allowed when the <see cref="P:StardewUI.Framework.Binding.IAttributeBinding.Direction"/> is either <see cref="F:StardewUI.Framework.Binding.BindingDirection.Out"/> or
            <see cref="F:StardewUI.Framework.Binding.BindingDirection.InOut"/>.
            </remarks>
            <param name="target">The bound view.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.IAttributeBinding.UpdateView(StardewUI.IView,System.Boolean)">
            <summary>
            Updates a target view with the most recent source value.
            </summary>
            <remarks>
            Allowed when the <see cref="P:StardewUI.Framework.Binding.IAttributeBinding.Direction"/> is either <see cref="F:StardewUI.Framework.Binding.BindingDirection.In"/> or
            <see cref="F:StardewUI.Framework.Binding.BindingDirection.InOut"/>.
            </remarks>
            <param name="target">The view to receive the update.</param>
            <param name="force">If <c>true</c>, always re-publishes the latest value to the view even if the source value
            has not changed. Typically used for initial updates immediately after creation.</param>
            <returns><c>true</c> if the view was updated; <c>false</c> if the update was skipped because the source value
            had not changed.</returns>
        </member>
        <member name="T:StardewUI.Framework.Binding.ICondition">
            <summary>
            A condition used in a <see cref="T:StardewUI.Framework.Binding.ConditionalNode"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Binding.ICondition.Context">
            <summary>
            The context for evaluating the condition; i.e. the context of the node to which the condition applies.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Binding.ICondition.Passed">
            <summary>
            Whether or not the condition was passing as of the last <see cref="M:StardewUI.Framework.Binding.ICondition.Update"/>.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Binding.ICondition.Update">
            <summary>
            Re-evaluates the condition and updates the <see cref="P:StardewUI.Framework.Binding.ICondition.Passed"/> state.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Binding.ConditionExtensions">
            <summary>
            Extensions for the <see cref="T:StardewUI.Framework.Binding.ICondition"/> interface.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Binding.ConditionExtensions.NegateIf(StardewUI.Framework.Binding.ICondition,System.Boolean)">
            <summary>
            Checks a negation flag, and returns a negated version of the <paramref name="condition"/> if set.
            </summary>
            <param name="condition">The original condition.</param>
            <param name="isNegated">Whether or not to negate the <paramref name="condition"/>.</param>
            <returns>A negated version of the <paramref name="condition"/>, if <paramref name="isNegated"/> is <c>true</c>;
            otherwise, the original <paramref name="condition"/>.</returns>
        </member>
        <member name="T:StardewUI.Framework.Binding.IEventBinding">
            <summary>
            Binding instance for a single event on a single view.
            </summary>
            <remarks>
            Removes/unsubscribes the event handler when disposed.
            </remarks>
        </member>
        <member name="T:StardewUI.Framework.Binding.IncludedViewNode">
            <summary>
            Quasi-structural node that loads its content from a shared game asset.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Binding.IncludedViewNode.#ctor(StardewUI.Framework.Sources.IValueSourceFactory,StardewUI.Framework.Converters.IValueConverterFactory,StardewUI.Framework.Content.IAssetCache,StardewUI.Framework.Content.IResolutionScope,System.Func{StardewUI.Framework.Dom.Document,StardewUI.Framework.Binding.IViewNode},StardewUI.Framework.Dom.IAttribute,StardewUI.Framework.Dom.IAttribute)">
            <summary>
            Quasi-structural node that loads its content from a shared game asset.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Binding.IncludedViewNode.Children">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Binding.IncludedViewNode.Context">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Binding.IncludedViewNode.FloatingElements">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Binding.IncludedViewNode.Views">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.IncludedViewNode.Dispose">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.IncludedViewNode.Print(System.Text.StringBuilder,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.IncludedViewNode.Reset">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.IncludedViewNode.ToString">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.IncludedViewNode.Update(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Binding.IViewBinder">
            <summary>
            Service for creating view bindings and their dependencies.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Binding.IViewBinder.Bind(StardewUI.IView,StardewUI.Framework.Dom.IElement,StardewUI.Framework.Binding.BindingContext,StardewUI.Framework.Content.IResolutionScope)">
            <summary>
            Creates a view binding.
            </summary>
            <param name="view">The view that will be bound.</param>
            <param name="element">The element data providing the literal or binding attributes.</param>
            <param name="context">The binding context/data, for any non-asset bindings using bindings whose
            <see cref="T:StardewUI.Framework.Grammar.AttributeValueType"/> is one of the recognized
            <see cref="M:StardewUI.Framework.Grammar.AttributeValueTypeExtensions.IsContextBinding(StardewUI.Framework.Grammar.AttributeValueType)"/> types.</param>
            <param name="resolutionScope">Scope for resolving externalized attributes, such as translation keys.</param>
            <returns>A view binding that can be used to propagate changes in the <paramref name="context"/> or any dependent
            assets to the <paramref name="view"/>.</returns>
        </member>
        <member name="M:StardewUI.Framework.Binding.IViewBinder.GetDescriptor(StardewUI.IView)">
            <summary>
            Retrieves the descriptor for a view, which provides information about its properties.
            </summary>
            <remarks>
            Descriptors participate in view binding but may also be used for other purposes, such as updating child lists.
            </remarks>
            <param name="view">The view instance.</param>
            <returns>The descriptor for the <paramref name="view"/>.</returns>
        </member>
        <member name="T:StardewUI.Framework.Binding.IViewNode">
            <summary>
            Encapsulates a single bound node in a view tree.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Binding.IViewNode.Child">
            <summary>
            Child of an <see cref="T:StardewUI.Framework.Binding.IViewNode"/>, specifying the node data and the view outlet in which it should appear.
            </summary>
            <param name="Node">The child node.</param>
            <param name="OutletName">The outlet in which the <paramref name="Node"/> should be inserted.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.IViewNode.Child.#ctor(StardewUI.Framework.Binding.IViewNode,System.String)">
            <summary>
            Child of an <see cref="T:StardewUI.Framework.Binding.IViewNode"/>, specifying the node data and the view outlet in which it should appear.
            </summary>
            <param name="Node">The child node.</param>
            <param name="OutletName">The outlet in which the <paramref name="Node"/> should be inserted.</param>
        </member>
        <member name="P:StardewUI.Framework.Binding.IViewNode.Child.Node">
            <summary>The child node.</summary>
        </member>
        <member name="P:StardewUI.Framework.Binding.IViewNode.Child.OutletName">
            <summary>The outlet in which the <paramref name="Node"/> should be inserted.</summary>
        </member>
        <member name="M:StardewUI.Framework.Binding.IViewNode.Child.Dispose">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Binding.IViewNode.Children">
            <summary>
            The children of this node.
            </summary>
            <remarks>
            Node children represent views in potentia. Every DOM node maps to (at least) one <see cref="T:StardewUI.Framework.Binding.IViewNode"/>, but
            views are created lazily and may not exist for nodes with conditional attributes or other rules.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.Binding.IViewNode.Context">
            <summary>
            The currently-bound context data, used as the source for any <see cref="F:StardewUI.Framework.Grammar.AttributeValueType.InputBinding"/>,
            <see cref="F:StardewUI.Framework.Grammar.AttributeValueType.OneTimeBinding"/>, <see cref="F:StardewUI.Framework.Grammar.AttributeValueType.OutputBinding"/> or
            <see cref="F:StardewUI.Framework.Grammar.AttributeValueType.TwoWayBinding"/> attributes.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Binding.IViewNode.FloatingElements">
            <summary>
            The floating elements for this node, if any have been created.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Binding.IViewNode.Views">
            <summary>
            The views for this node, if any have been created.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Binding.IViewNode.Print(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Prints the string representation of this node.
            </summary>
            <param name="sb">The output builder to receive to the node's text.</param>
            <param name="includeChildren">Whether or not to include the string representation of any/all child nodes between
            this node's opening and close tags. If this is <c>false</c> or there are no children, it will be formatted as a
            self-closing tag.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.IViewNode.Reset">
            <summary>
            Clears any <see cref="P:StardewUI.Framework.Binding.IViewNode.Views"/> associated with this node and resets it to the default state before it was bound.
            </summary>
            <remarks>
            <para>
            Propagates the request down to <see cref="P:StardewUI.Framework.Binding.IViewNode.Children"/>, but is not required to clear <see cref="P:StardewUI.Framework.Binding.IViewNode.Children"/>
            and does not affect the <see cref="P:StardewUI.Framework.Binding.IViewNode.Context"/> assignment.
            </para>
            <para>
            This is used to "unbind" the target of a structural node like <see cref="T:StardewUI.Framework.Binding.ConditionalNode"/> and in some cases
            prepare it for subsequent reuse.
            </para>
            </remarks>
        </member>
        <member name="M:StardewUI.Framework.Binding.IViewNode.Update(System.TimeSpan)">
            <summary>
            Performs the regular per-frame update for this node.
            </summary>
            <param name="elapsed">Time elapsed since last update.</param>
            <returns><c>true</c> if any aspect of the view tree from this level downward was changed, i.e. as a result of
            a new <see cref="P:StardewUI.Framework.Binding.IViewNode.Context"/>, changed context properties, invalidated assets, or the <see cref="T:StardewUI.View"/> being
            created for the first time; <c>false</c> if no changes were made.</returns>
        </member>
        <member name="T:StardewUI.Framework.Binding.IViewNodeFactory">
            <summary>
            High-level abstraction for translating node trees into bound view trees.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Binding.IViewNodeFactory.CreateNode(StardewUI.Framework.Dom.Document)">
            <summary>
            Creates a bound view node, and all descendants, from the root of a parsed <see cref="T:StardewUI.Framework.Dom.Document"/>.
            </summary>
            <remarks>
            This method automatically infers the correct <see cref="T:StardewUI.Framework.Content.IResolutionScope"/>, so it does not require an explicit
            scope to be given.
            </remarks>
            <param name="document">The markup document.</param>
            <returns>An <see cref="T:StardewUI.Framework.Binding.IViewNode"/> providing the <see cref="T:StardewUI.IView"/> bound with the node's attributes and
            children, which automatically applies changes on each <see cref="M:StardewUI.Framework.Binding.IViewNode.Update(System.TimeSpan)"/>.</returns>
        </member>
        <member name="M:StardewUI.Framework.Binding.IViewNodeFactory.CreateNode(StardewUI.Framework.Dom.SNode,System.Collections.Generic.IReadOnlyList{StardewUI.Framework.Dom.INodeTransformer},StardewUI.Framework.Content.IResolutionScope)">
            <summary>
            Creates a bound view node, and all descendants, from parsed node data.
            </summary>
            <param name="node">The node data.</param>
            <param name="nodeTransformers">Transformers to run on each document node before using it to create a runtime
            (bound) view node.</param>
            <param name="resolutionScope">Scope for resolving externalized attributes, such as translation keys.</param>
            <returns>An <see cref="T:StardewUI.Framework.Binding.IViewNode"/> providing the <see cref="T:StardewUI.IView"/> bound with the node's attributes and
            children, which automatically applies changes on each <see cref="M:StardewUI.Framework.Binding.IViewNode.Update(System.TimeSpan)"/>.</returns>
        </member>
        <member name="T:StardewUI.Framework.Binding.NegatedCondition">
            <summary>
            Wrapper for an <see cref="T:StardewUI.Framework.Binding.ICondition"/> that negates its outcome.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Binding.NegatedCondition.#ctor(StardewUI.Framework.Binding.ICondition)">
            <summary>
            Wrapper for an <see cref="T:StardewUI.Framework.Binding.ICondition"/> that negates its outcome.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Binding.NegatedCondition.Context">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Binding.NegatedCondition.Passed">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.NegatedCondition.Dispose">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.NegatedCondition.Update">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Binding.ReflectionViewBinder">
            <summary>
            An <see cref="T:StardewUI.Framework.Binding.IViewBinder"/> implementation using reflected view descriptors.
            </summary>
            <param name="attributeBindingFactory">Factory for creating the <see cref="T:StardewUI.Framework.Binding.IAttributeBinding"/> instances used to
            bind individual attributes of the view.</param>
            <param name="eventBindingFactory">Factory for creating the <see cref="T:StardewUI.Framework.Binding.IEventBinding"/> instances used to bind events
            raised by the view.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.ReflectionViewBinder.#ctor(StardewUI.Framework.Binding.IAttributeBindingFactory,StardewUI.Framework.Binding.IEventBindingFactory)">
            <summary>
            An <see cref="T:StardewUI.Framework.Binding.IViewBinder"/> implementation using reflected view descriptors.
            </summary>
            <param name="attributeBindingFactory">Factory for creating the <see cref="T:StardewUI.Framework.Binding.IAttributeBinding"/> instances used to
            bind individual attributes of the view.</param>
            <param name="eventBindingFactory">Factory for creating the <see cref="T:StardewUI.Framework.Binding.IEventBinding"/> instances used to bind events
            raised by the view.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.ReflectionViewBinder.Bind(StardewUI.IView,StardewUI.Framework.Dom.IElement,StardewUI.Framework.Binding.BindingContext,StardewUI.Framework.Content.IResolutionScope)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.ReflectionViewBinder.GetDescriptor(StardewUI.IView)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Binding.RepeaterNode">
            <summary>
            A structural node that accepts a collection (<see cref="T:System.Collections.Generic.IEnumerable`1"/>) valued attribute and repeats its inner
            elements with each child bound to a collection element, in the same order as the collection.
            </summary>
            <param name="valueSourceFactory">The factory responsible for creating <see cref="T:StardewUI.Framework.Sources.IValueSource`1"/> instances from
            attribute data.</param>
            <param name="childCreator">Delegate for creating a new child node.</param>
            <param name="resolutionScope">Scope for resolving externalized attributes, such as translation keys.</param>
            <param name="repeatAttribute">The attribute containing the collection expression.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.RepeaterNode.#ctor(StardewUI.Framework.Sources.IValueSourceFactory,System.Func{StardewUI.Framework.Binding.IViewNode.Child},StardewUI.Framework.Content.IResolutionScope,StardewUI.Framework.Dom.IAttribute)">
            <summary>
            A structural node that accepts a collection (<see cref="T:System.Collections.Generic.IEnumerable`1"/>) valued attribute and repeats its inner
            elements with each child bound to a collection element, in the same order as the collection.
            </summary>
            <param name="valueSourceFactory">The factory responsible for creating <see cref="T:StardewUI.Framework.Sources.IValueSource`1"/> instances from
            attribute data.</param>
            <param name="childCreator">Delegate for creating a new child node.</param>
            <param name="resolutionScope">Scope for resolving externalized attributes, such as translation keys.</param>
            <param name="repeatAttribute">The attribute containing the collection expression.</param>
        </member>
        <member name="P:StardewUI.Framework.Binding.RepeaterNode.Children">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Binding.RepeaterNode.Context">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Binding.RepeaterNode.FloatingElements">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Binding.RepeaterNode.Views">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.RepeaterNode.Warmup">
            <summary>
            Pre-initializes some reflection state in order to make future invocations faster.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Binding.RepeaterNode.Dispose">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.RepeaterNode.Print(System.Text.StringBuilder,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.RepeaterNode.Reset">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.RepeaterNode.ToString">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.RepeaterNode.Update(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Binding.RootViewFactory">
            <summary>
            View factory for built-in view types.
            </summary>
            <param name="addonFactories">View factories registered by add-ons, in order of priority. All add-on factories are
            considered after the standard tags.</param>
            <param name="commonSprites">Non-static built-in sprites provided by the framework.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.RootViewFactory.#ctor(System.Collections.Generic.IEnumerable{StardewUI.Framework.Binding.IViewFactory},StardewUI.Framework.Content.CommonSprites)">
            <summary>
            View factory for built-in view types.
            </summary>
            <param name="addonFactories">View factories registered by add-ons, in order of priority. All add-on factories are
            considered after the standard tags.</param>
            <param name="commonSprites">Non-static built-in sprites provided by the framework.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.RootViewFactory.CreateView(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.RootViewFactory.SupportsTag(System.String)">
            <inheritdoc />
            <remarks>
            Unlike add-on <see cref="T:StardewUI.Framework.Binding.IViewFactory"/> implementations, the root factory always returns <c>true</c> regardless
            of whether the tag is really implemented, because it must handle requests for all views.
            </remarks>
        </member>
        <member name="T:StardewUI.Framework.Binding.TextExtensions">
            <summary>
            Extensions for text types such as <c>ReadOnlySpan&lt;char&gt;.</c>
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Binding.TextExtensions.ToUpperCamelCase(System.ReadOnlySpan{System.Char})">
            <summary>
            Converts a kebab-case string (lowercase with hyphens) to UpperCamelCase or PascalCase.
            </summary>
            <param name="text">The text string to convert.</param>
            <returns>The <paramref name="text"/> with case conversion applied.</returns>
        </member>
        <member name="T:StardewUI.Framework.Binding.UnaryCondition">
            <summary>
            A condition based on a single value that is convertible to a <see cref="T:System.Boolean"/>.
            </summary>
            <remarks>
            Passes whenever the value's boolean representation is <c>true</c>. Used for <c>*if</c> attributes.
            </remarks>
            <param name="valueSourceFactory">The factory responsible for creating <see cref="T:StardewUI.Framework.Sources.IValueSource`1"/> instances from
            attribute data.</param>
            <param name="valueConverterFactory">The factory responsible for creating
            <see cref="T:StardewUI.Framework.Converters.IValueConverter`2"/> instances, used to convert bound values to the types required
            by the target view.</param>
            <param name="resolutionScope">Scope for resolving externalized attributes, such as translation keys.</param>
            <param name="attribute">The attribute containing the conditional expression.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.UnaryCondition.#ctor(StardewUI.Framework.Sources.IValueSourceFactory,StardewUI.Framework.Converters.IValueConverterFactory,StardewUI.Framework.Content.IResolutionScope,StardewUI.Framework.Dom.IAttribute)">
            <summary>
            A condition based on a single value that is convertible to a <see cref="T:System.Boolean"/>.
            </summary>
            <remarks>
            Passes whenever the value's boolean representation is <c>true</c>. Used for <c>*if</c> attributes.
            </remarks>
            <param name="valueSourceFactory">The factory responsible for creating <see cref="T:StardewUI.Framework.Sources.IValueSource`1"/> instances from
            attribute data.</param>
            <param name="valueConverterFactory">The factory responsible for creating
            <see cref="T:StardewUI.Framework.Converters.IValueConverter`2"/> instances, used to convert bound values to the types required
            by the target view.</param>
            <param name="resolutionScope">Scope for resolving externalized attributes, such as translation keys.</param>
            <param name="attribute">The attribute containing the conditional expression.</param>
        </member>
        <member name="P:StardewUI.Framework.Binding.UnaryCondition.Context">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Binding.UnaryCondition.Passed">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.UnaryCondition.Dispose">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.UnaryCondition.Update">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Binding.ViewBehaviors">
            <summary>
            Wrapper for the entire set of behaviors attached to a single node/view.
            </summary>
            <param name="behaviorAttributes">List of all behavior attributes applied to the node.</param>
            <param name="behaviorFactory">Factory for creating behaviors.</param>
            <param name="valueSourceFactory">The factory responsible for creating <see cref="T:StardewUI.Framework.Sources.IValueSource`1"/> instances from
            attribute data.</param>
            <param name="valueConverterFactory">The factory responsible for creating
            <see cref="T:StardewUI.Framework.Converters.IValueConverter`2"/> instances, used to convert bound values to the data types
            required by individual behaviors.</param>
            <param name="resolutionScope">Scope for resolving externalized attributes, such as translation keys.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.ViewBehaviors.#ctor(System.Collections.Generic.IEnumerable{StardewUI.Framework.Dom.IAttribute},StardewUI.Framework.Behaviors.IBehaviorFactory,StardewUI.Framework.Sources.IValueSourceFactory,StardewUI.Framework.Converters.IValueConverterFactory,StardewUI.Framework.Content.IResolutionScope)">
            <summary>
            Wrapper for the entire set of behaviors attached to a single node/view.
            </summary>
            <param name="behaviorAttributes">List of all behavior attributes applied to the node.</param>
            <param name="behaviorFactory">Factory for creating behaviors.</param>
            <param name="valueSourceFactory">The factory responsible for creating <see cref="T:StardewUI.Framework.Sources.IValueSource`1"/> instances from
            attribute data.</param>
            <param name="valueConverterFactory">The factory responsible for creating
            <see cref="T:StardewUI.Framework.Converters.IValueConverter`2"/> instances, used to convert bound values to the data types
            required by individual behaviors.</param>
            <param name="resolutionScope">Scope for resolving externalized attributes, such as translation keys.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.ViewBehaviors.Dispose">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.ViewBehaviors.SetContext(StardewUI.Framework.Binding.BindingContext)">
            <summary>
            Updates or removes the binding context for all managed behaviors.
            </summary>
            <param name="context">The new context.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.ViewBehaviors.SetTarget(StardewUI.Framework.Behaviors.BehaviorTarget)">
            <summary>
            Updates the attached target (view and state) for all managed behaviors.
            </summary>
            <remarks>
            If the target is <c>null</c> then all behaviors will be disabled/removed.
            </remarks>
            <param name="target">The new behavior target, or <c>null</c> to remove behaviors.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.ViewBehaviors.PreUpdate(System.TimeSpan)">
            <summary>
            Runs on every update tick, before any bindings or views update.
            </summary>
            <param name="elapsed">Time elapsed since last tick.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.ViewBehaviors.Update(System.TimeSpan)">
            <summary>
            Runs on every update tick.
            </summary>
            <param name="elapsed">Time elapsed since last tick.</param>
        </member>
        <member name="T:StardewUI.Framework.Binding.IViewBinding">
            <summary>
            Represents the binding state of an entire view; provides a single method to perform a once-per-frame update.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Binding.IViewBinding.Attributes">
            <summary>
            The specific attributes bound for the attached view.
            </summary>
            <remarks>
            Per-attribute updates are encapsulated in the <see cref="M:StardewUI.Framework.Binding.IViewBinding.Update"/> method, so this is normally only needed for
            inspecting the state of bindings, e.g. to build a <see cref="T:StardewUI.Framework.Binding.BoundViewDefaults"/> instance.
            </remarks>
        </member>
        <member name="M:StardewUI.Framework.Binding.IViewBinding.Update">
            <summary>
            Updates the view, including all bound attributes.
            </summary>
            <returns><c>true</c> if any updates were performed; <c>false</c> if there was no update due to having no
            underlying changes in the bound data or assets.</returns>
        </member>
        <member name="T:StardewUI.Framework.Binding.ViewBinding">
            <summary>
            A <see cref="T:StardewUI.Framework.Binding.ViewBinding"/> that delegates its updates to a list of <see cref="T:StardewUI.Framework.Binding.IAttributeBinding"/> instances per
            bound attribute.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Binding.ViewBinding.#ctor(StardewUI.IView,System.Collections.Generic.IReadOnlyList{StardewUI.Framework.Binding.IAttributeBinding},System.Collections.Generic.IReadOnlyList{StardewUI.Framework.Binding.IEventBinding})">
            <summary>
            Initializes a new instance of <see cref="T:StardewUI.Framework.Binding.ViewBinding"/> with the specified view and attribute bindings.
            </summary>
            <param name="view">The bound view.</param>
            <param name="attributeBindings">The attribute bindings for the <paramref name="view"/>.</param>
            <param name="eventBindings">The event bindings for the <paramref name="view"/>.</param>
        </member>
        <member name="T:StardewUI.Framework.Binding.IViewFactory">
            <summary>
            Factory for creating views from tags.
            </summary>
            <remarks>
            This is a simple, low-level abstraction that simply maps tags to view types. It does not perform any reflection or
            participate in view binding.
            </remarks>
        </member>
        <member name="M:StardewUI.Framework.Binding.IViewFactory.CreateView(System.String)">
            <summary>
            Creates a new view.
            </summary>
            <param name="tagName">The markup tag that specifies the type of view.</param>
            <returns>A new view of a type corresponding to the <paramref name="tagName"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="tagName"/> does not correspond to any
            supported view type.</exception>
        </member>
        <member name="M:StardewUI.Framework.Binding.IViewFactory.SupportsTag(System.String)">
            <summary>
            Checks if the factory can create views corresponding to a specific tag.
            </summary>
            <param name="tagName">The markup tag that specifies the type of view.</param>
            <returns><c>true</c> if this factory should handle the specified <paramref name="tagName"/>, otherwise
            <c>false</c>.</returns>
        </member>
        <member name="T:StardewUI.Framework.Binding.ViewFactory">
            <summary>
            A view factory based on per-tag delegates. Can be used as a base class for other view factories.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Binding.ViewFactory.CreateView(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.ViewFactory.Register``1(System.String)">
            <summary>
            Registers a view for a given tag using the view's default parameterless constructor.
            </summary>
            <typeparam name="TView">The view type.</typeparam>
            <param name="tagName">The markup tag corresponding to the <typeparamref name="TView"/> type.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.ViewFactory.Register(System.String,System.Func{StardewUI.IView})">
            <summary>
            Registers a view for a given tag using a delegate function.
            </summary>
            <param name="tagName">The markup tag to handle.</param>
            <param name="tagFactory">Delegate function to create the view corresponding to the
            <paramref name="tagName"/>.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.ViewFactory.SupportsTag(System.String)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Binding.ViewNode">
            <summary>
            Internal structure of a view node, encapsulating dependencies required for data binding and lazy creation/updates.
            </summary>
            <param name="valueSourceFactory">The factory responsible for creating <see cref="T:StardewUI.Framework.Sources.IValueSource`1"/> instances from
            attribute data.</param>
            <param name="valueConverterFactory">The factory responsible for creating
            <see cref="T:StardewUI.Framework.Converters.IValueConverter`2"/> instances, used to convert bound values to the types required
            by the target view.</param>
            <param name="viewFactory">Factory for creating views, based on their tag names.</param>
            <param name="viewBinder">Binding service used to create <see cref="T:StardewUI.Framework.Binding.IViewBinding"/> instances that detect changes to
            data or assets and propagate them to the bound <see cref="T:StardewUI.IView"/>.</param>
            <param name="element">Element data for this node.</param>
            <param name="resolutionScope">Scope for resolving externalized attributes, such as translation keys.</param>
            <param name="behaviors">Behavior extensions for this node.</param>
            <param name="contextAttribute">Optional attribute specifying how to resolve the context for child nodes based on
            this node's assigned <see cref="P:StardewUI.Framework.Binding.ViewNode.Context"/>.</param>
            <param name="floatAttribute">Optional attribute designating that the node should be a <see cref="T:StardewUI.Layout.FloatingElement"/>
            and specifying how to resolve its <see cref="P:StardewUI.Layout.FloatingElement.Position"/>.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.ViewNode.#ctor(StardewUI.Framework.Sources.IValueSourceFactory,StardewUI.Framework.Converters.IValueConverterFactory,StardewUI.Framework.Binding.IViewFactory,StardewUI.Framework.Binding.IViewBinder,StardewUI.Framework.Dom.SElement,StardewUI.Framework.Content.IResolutionScope,StardewUI.Framework.Binding.ViewBehaviors,StardewUI.Framework.Dom.IAttribute,StardewUI.Framework.Dom.IAttribute)">
            <summary>
            Internal structure of a view node, encapsulating dependencies required for data binding and lazy creation/updates.
            </summary>
            <param name="valueSourceFactory">The factory responsible for creating <see cref="T:StardewUI.Framework.Sources.IValueSource`1"/> instances from
            attribute data.</param>
            <param name="valueConverterFactory">The factory responsible for creating
            <see cref="T:StardewUI.Framework.Converters.IValueConverter`2"/> instances, used to convert bound values to the types required
            by the target view.</param>
            <param name="viewFactory">Factory for creating views, based on their tag names.</param>
            <param name="viewBinder">Binding service used to create <see cref="T:StardewUI.Framework.Binding.IViewBinding"/> instances that detect changes to
            data or assets and propagate them to the bound <see cref="T:StardewUI.IView"/>.</param>
            <param name="element">Element data for this node.</param>
            <param name="resolutionScope">Scope for resolving externalized attributes, such as translation keys.</param>
            <param name="behaviors">Behavior extensions for this node.</param>
            <param name="contextAttribute">Optional attribute specifying how to resolve the context for child nodes based on
            this node's assigned <see cref="P:StardewUI.Framework.Binding.ViewNode.Context"/>.</param>
            <param name="floatAttribute">Optional attribute designating that the node should be a <see cref="T:StardewUI.Layout.FloatingElement"/>
            and specifying how to resolve its <see cref="P:StardewUI.Layout.FloatingElement.Position"/>.</param>
        </member>
        <member name="P:StardewUI.Framework.Binding.ViewNode.Children">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Binding.ViewNode.Context">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Binding.ViewNode.FloatingElements">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Binding.ViewNode.Views">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.ViewNode.Warmup``1">
            <summary>
            Pre-initializes some reflection state in order to make future invocations faster.
            </summary>
            <remarks>
            This method uses reflection and should only be invoked during background startup.
            </remarks>
            <typeparam name="TView">The view type.</typeparam>
        </member>
        <member name="M:StardewUI.Framework.Binding.ViewNode.Dispose">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.ViewNode.Print(System.Text.StringBuilder,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.ViewNode.Reset">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.ViewNode.ToString">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.ViewNode.Update(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.ViewNode.ReflectionChildrenBinder.Warmup``1">
            <summary>
            Pre-initializes some reflection state in order to make future invocations faster.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Binding.ViewNodeFactory">
            <summary>
            Default in-game view engine.
            </summary>
            <param name="viewFactory">Factory for creating views, based on their tag names.</param>
            <param name="valueSourceFactory">The factory responsible for creating <see cref="T:StardewUI.Framework.Sources.IValueSource`1"/> instances from
            attribute data.</param>
            <param name="valueConverterFactory">The factory responsible for creating
            <see cref="T:StardewUI.Framework.Converters.IValueConverter`2"/> instances, used to convert bound values to the types required
            by the target view or structural property.</param>
            <param name="viewBinder">Binding service used to create <see cref="T:StardewUI.Framework.Binding.IViewBinding"/> instances that detect changes to
            data or assets and propagate them to the bound <see cref="T:StardewUI.IView"/>.</param>
            <param name="assetCache">Cache for obtaining document assets. Used for included views.</param>
            <param name="resolutionScopeFactory">Factory for creating <see cref="T:StardewUI.Framework.Content.IResolutionScope"/> instances responsible for
            resolving external symbols such as translation keys.</param>
            <param name="behaviorFactory">Factory for creating behavior extensions.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.ViewNodeFactory.#ctor(StardewUI.Framework.Binding.IViewFactory,StardewUI.Framework.Sources.IValueSourceFactory,StardewUI.Framework.Converters.IValueConverterFactory,StardewUI.Framework.Binding.IViewBinder,StardewUI.Framework.Content.IAssetCache,StardewUI.Framework.Content.IResolutionScopeFactory,StardewUI.Framework.Behaviors.IBehaviorFactory)">
            <summary>
            Default in-game view engine.
            </summary>
            <param name="viewFactory">Factory for creating views, based on their tag names.</param>
            <param name="valueSourceFactory">The factory responsible for creating <see cref="T:StardewUI.Framework.Sources.IValueSource`1"/> instances from
            attribute data.</param>
            <param name="valueConverterFactory">The factory responsible for creating
            <see cref="T:StardewUI.Framework.Converters.IValueConverter`2"/> instances, used to convert bound values to the types required
            by the target view or structural property.</param>
            <param name="viewBinder">Binding service used to create <see cref="T:StardewUI.Framework.Binding.IViewBinding"/> instances that detect changes to
            data or assets and propagate them to the bound <see cref="T:StardewUI.IView"/>.</param>
            <param name="assetCache">Cache for obtaining document assets. Used for included views.</param>
            <param name="resolutionScopeFactory">Factory for creating <see cref="T:StardewUI.Framework.Content.IResolutionScope"/> instances responsible for
            resolving external symbols such as translation keys.</param>
            <param name="behaviorFactory">Factory for creating behavior extensions.</param>
        </member>
        <member name="M:StardewUI.Framework.Binding.ViewNodeFactory.CreateNode(StardewUI.Framework.Dom.Document)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Binding.ViewNodeFactory.CreateNode(StardewUI.Framework.Dom.SNode,System.Collections.Generic.IReadOnlyList{StardewUI.Framework.Dom.INodeTransformer},StardewUI.Framework.Content.IResolutionScope)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Codegen.IInstructionList">
            <summary>
            Abstract representation of an instruction list, e.g. for emitting instructions to an <see cref="T:System.Reflection.Emit.ILGenerator"/>.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Codegen.IInstructionList.DeclareLocal(System.Type)">
            <inheritdoc cref="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)" />
        </member>
        <member name="M:StardewUI.Framework.Codegen.IInstructionList.Emit(System.Reflection.Emit.OpCode,System.Type)">
            <inheritdoc cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)" />
        </member>
        <member name="M:StardewUI.Framework.Codegen.IInstructionList.Emit(System.Reflection.Emit.OpCode,System.String)">
            <inheritdoc cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)" />
        </member>
        <member name="M:StardewUI.Framework.Codegen.IInstructionList.Emit(System.Reflection.Emit.OpCode,System.Single)">
            <inheritdoc cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)" />
        </member>
        <member name="M:StardewUI.Framework.Codegen.IInstructionList.Emit(System.Reflection.Emit.OpCode,System.SByte)">
            <inheritdoc cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)" />
        </member>
        <member name="M:StardewUI.Framework.Codegen.IInstructionList.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
            <inheritdoc cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)" />
        </member>
        <member name="M:StardewUI.Framework.Codegen.IInstructionList.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
            <inheritdoc cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)" />
        </member>
        <member name="M:StardewUI.Framework.Codegen.IInstructionList.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
            <inheritdoc cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])" />
        </member>
        <member name="M:StardewUI.Framework.Codegen.IInstructionList.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)">
            <inheritdoc cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)" />
        </member>
        <member name="M:StardewUI.Framework.Codegen.IInstructionList.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
            <inheritdoc cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)" />
        </member>
        <member name="M:StardewUI.Framework.Codegen.IInstructionList.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
            <inheritdoc cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)" />
        </member>
        <member name="M:StardewUI.Framework.Codegen.IInstructionList.Emit(System.Reflection.Emit.OpCode,System.Int64)">
            <inheritdoc cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)" />
        </member>
        <member name="M:StardewUI.Framework.Codegen.IInstructionList.Emit(System.Reflection.Emit.OpCode,System.Int32)">
            <inheritdoc cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)" />
        </member>
        <member name="M:StardewUI.Framework.Codegen.IInstructionList.Emit(System.Reflection.Emit.OpCode,System.Int16)">
            <inheritdoc cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)" />
        </member>
        <member name="M:StardewUI.Framework.Codegen.IInstructionList.Emit(System.Reflection.Emit.OpCode,System.Double)">
            <inheritdoc cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)" />
        </member>
        <member name="M:StardewUI.Framework.Codegen.IInstructionList.Emit(System.Reflection.Emit.OpCode,System.Byte)">
            <inheritdoc cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)" />
        </member>
        <member name="M:StardewUI.Framework.Codegen.IInstructionList.Emit(System.Reflection.Emit.OpCode)">
            <inheritdoc cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" />
        </member>
        <member name="M:StardewUI.Framework.Codegen.IInstructionList.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
            <inheritdoc cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)" />
        </member>
        <member name="T:StardewUI.Framework.Content.AssetCache">
            <summary>
            Standard in-game implementation of the asset cache based on SMAPI's helpers and events.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Content.AssetCache.#ctor(StardewModdingAPI.IGameContentHelper,StardewModdingAPI.Events.IContentEvents)">
            <summary>
            Initializes a new instance of <see cref="T:StardewUI.Framework.Content.AssetCache"/>.
            </summary>
            <param name="content">SMAPI content helper, used to load the assets.</param>
            <param name="events">SMAPI content events, used to detect invalidation.</param>
        </member>
        <member name="M:StardewUI.Framework.Content.AssetCache.Get``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Content.AssetCache.Update(System.TimeSpan)">
            <summary>
            Handles reocurring game updates. Used to update backoff and allow retrying of failed assets.
            </summary>
            <param name="elapsed">Time elapsed since last game tick.</param>
        </member>
        <member name="T:StardewUI.Framework.Content.CommonSprites">
            <summary>
            Provides access to the custom sprites owned by StardewUI and not present in the base game.
            </summary>
            <remarks>
            This is the counterpart to <see cref="T:StardewUI.Framework.Content.UiSpriteProvider"/> which is for the base game (statically-cached) assets.
            </remarks>
            <param name="helper">Helper for the mod that owns the assets, i.e. for StardewUI.</param>
        </member>
        <member name="M:StardewUI.Framework.Content.CommonSprites.#ctor(StardewModdingAPI.IModHelper)">
            <summary>
            Provides access to the custom sprites owned by StardewUI and not present in the base game.
            </summary>
            <remarks>
            This is the counterpart to <see cref="T:StardewUI.Framework.Content.UiSpriteProvider"/> which is for the base game (statically-cached) assets.
            </remarks>
            <param name="helper">Helper for the mod that owns the assets, i.e. for StardewUI.</param>
        </member>
        <member name="P:StardewUI.Framework.Content.CommonSprites.ColorCircle240">
            <summary>
            240x240 px color circle, used for selecting a hue.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Content.CommonSprites.ColorCircle480">
            <summary>
            480x480 px color circle, used for selecting a hue.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Content.GlobalResolutionScope">
            <summary>
            Resolution scope that can accept qualified keys and examine the entire mod registry.
            </summary>
            <remarks>
            Unqualified keys will default to a single inner scope.
            </remarks>
            <param name="defaultScope">The default or "calling" scope that should handle all unqualified requests. If not
            specified, only fully qualified requests will be resolved.</param>
            <param name="registry">Mod registry for locating mods corresponding to qualified IDs.</param>
        </member>
        <member name="M:StardewUI.Framework.Content.GlobalResolutionScope.#ctor(StardewUI.Framework.Content.IResolutionScope,StardewModdingAPI.IModRegistry)">
            <summary>
            Resolution scope that can accept qualified keys and examine the entire mod registry.
            </summary>
            <remarks>
            Unqualified keys will default to a single inner scope.
            </remarks>
            <param name="defaultScope">The default or "calling" scope that should handle all unqualified requests. If not
            specified, only fully qualified requests will be resolved.</param>
            <param name="registry">Mod registry for locating mods corresponding to qualified IDs.</param>
        </member>
        <member name="M:StardewUI.Framework.Content.GlobalResolutionScope.ForDefaultMod(System.String,StardewModdingAPI.IModRegistry)">
            <summary>
            Creates a new global scope whose default resolution is for a specified mod.
            </summary>
            <param name="uniqueId">The <see cref="P:StardewModdingAPI.IManifest.UniqueID"/> of the mod used for default resolution.</param>
            <param name="registry">Registry of all installed mods, i.e. as accessed through
            <see cref="P:StardewModdingAPI.IModHelper.ModRegistry"/>.</param>
            <returns>A scope whose default resolution searches the mod with specified <paramref name="uniqueId"/>.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when no installed mod can be found with the specified
            <paramref name="uniqueId"/>.</exception>
        </member>
        <member name="M:StardewUI.Framework.Content.GlobalResolutionScope.GetTranslation(System.String)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Content.IAssetCache">
            <summary>
            Cache used for asset-based view bindings.
            </summary>
            <remarks>
            Similar to SMAPI's content helpers, but instead of providing just the current asset at the time of the request,
            returns entry objects with an expired flag for effective (and performant) use in <see cref="M:StardewUI.Framework.Sources.IValueSource.Update(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:StardewUI.Framework.Content.IAssetCache.Get``1(System.String)">
            <summary>
            Retrieves the current entry for a given asset name.
            </summary>
            <remarks>
            If the asset was invalidated by SMAPI and has not yet been reloaded, then this will trigger a reload.
            </remarks>
            <typeparam name="T">The asset type.</typeparam>
            <param name="name">Name of the asset.</param>
            <returns>A cache entry object that contains the most current asset data, and an expired flag to detect if the
            asset is no longer valid in the future.</returns>
        </member>
        <member name="T:StardewUI.Framework.Content.IAssetCacheEntry`1">
            <summary>
            Entry retrieved from an <see cref="T:StardewUI.Framework.Content.IAssetCache"/>.
            </summary>
            <typeparam name="T">Type of cached asset.</typeparam>
        </member>
        <member name="P:StardewUI.Framework.Content.IAssetCacheEntry`1.Asset">
            <summary>
            The cached asset.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Content.IAssetCacheEntry`1.IsValid">
            <summary>
            Whether or not the <see cref="P:StardewUI.Framework.Content.IAssetCacheEntry`1.Asset"/> is valid and can be accessed.
            </summary>
            <remarks>
            Invalid assets either failed to load or have been invalidated at the source and may be disposed (if
            <see cref="T:System.IDisposable"/>) or otherwise unusable. Consumers of the cache entry <b>must not</b> attempt to read
            or use the <see cref="P:StardewUI.Framework.Content.IAssetCacheEntry`1.Asset"/> property of an invalid asset.
            </remarks>
        </member>
        <member name="T:StardewUI.Framework.Content.IResolutionScope">
            <summary>
            Defines a scope in which certain types of external and potentially ambiguous binding attributes may be resolved.
            </summary>
            <remarks>
            In general, resolution scopes are used where a document may include an unqualified or short-form reference, for
            which such a reference means to look in the same mod that originally provided that document.
            </remarks>
        </member>
        <member name="M:StardewUI.Framework.Content.IResolutionScope.GetTranslation(System.String)">
            <summary>
            Attempts to obtain a translation value with the given key.
            </summary>
            <param name="key">The qualified or unqualified translation key. Unqualified keys are identical to their name in
            the translation file (i.e. in <c>i18n/default.json</c>), while qualified keys include a prefix with the specific
            mod, e.g. <c>authorname.ModName:TranslationKey</c>.</param>
            <returns>
            One of:
            <list type="bullet">
            <item>The translation, if available in the current language</item>
            <item>The default-language (usually English) string, if the <paramref name="key"/> exists but no translation is
            available;</item>
            <item>A translation with placeholder text, if the <paramref name="key"/> resolves to a known mod (or if the
            scope points to a default mod) but the mod is missing that specific key;</item>
            <item><c>null</c>, if the <paramref name="key"/> is unqualified and no default scope is available.</item>
            </list>
            </returns>
        </member>
        <member name="M:StardewUI.Framework.Content.IResolutionScope.GetTranslationValue(System.String)">
            <summary>
            Attempts to obtain the string value of a translation with the given key.
            </summary>
            <remarks>
            Unless specifically overridden, calling this is normally the same as <see cref="M:StardewUI.Framework.Content.IResolutionScope.GetTranslation(System.String)"/>,
            except that it returns <see cref="T:System.String"/> instead of <see cref="T:StardewModdingAPI.Translation"/>, of which the latter is not
            instantiable outside of SMAPI's internals. To maintain consistency, code that <em>reads</em> translations should
            always use <c>GetTranslationValue</c>, while code that <em>provides</em> translations (i.e. implementations of
            <see cref="T:StardewUI.Framework.Content.IResolutionScope"/>) should only implement <c>GetTranslation</c>, and leave this method alone.
            </remarks>
            <param name="key">The qualified or unqualified translation key. Unqualified keys are identical to their name in
            the translation file (i.e. in <c>i18n/default.json</c>), while qualified keys include a prefix with the specific
            mod, e.g. <c>authorname.ModName:TranslationKey</c>.</param>
            <returns>
            One of:
            <list type="bullet">
            <item>The translation, if available in the current language</item>
            <item>The default-language (usually English) string, if the <paramref name="key"/> exists but no translation is
            available;</item>
            <item>A translation with placeholder text, if the <paramref name="key"/> cannot be resolved to a known
            translation in a known mod.</item>
            </list>
            </returns>
        </member>
        <member name="T:StardewUI.Framework.Content.IResolutionScopeFactory">
            <summary>
            Factory for creating <see cref="T:StardewUI.Framework.Content.IResolutionScope"/> instances.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Content.IResolutionScopeFactory.CreateForDocument(StardewUI.Framework.Dom.Document)">
            <summary>
            Obtains a resolution scope for a loaded document.
            </summary>
            <param name="document">The UI document in which tokens may be resolved.</param>
            <returns>An <see cref="T:StardewUI.Framework.Content.IResolutionScope"/> for the specified <paramref name="document"/>, based on the
            best-known information about the document's source.</returns>
        </member>
        <member name="T:StardewUI.Framework.Content.ItemSpriteProvider">
            <summary>
            Provides sprites for in-game items based on their IDs.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Content.ItemSpriteProvider.AssetNamePrefix">
            <summary>
            Asset name prefix that should be used for all sprite assets.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Content.ItemSpriteProvider.GetSprite(System.String)">
            <summary>
            Retrieves a sprite by its asset name, or throws if the asset name is not valid.
            </summary>
            <param name="name">The name of the sprite, which should be the <see cref="F:StardewUI.Framework.Content.ItemSpriteProvider.AssetNamePrefix"/> followed by a
            qualified item ID.</param>
            <returns>The <see cref="T:StardewUI.Graphics.Sprite"/> for the specified item, or an error sprite if not available.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the asset name does not have the correct prefix.</exception>
        </member>
        <member name="M:StardewUI.Framework.Content.ItemSpriteProvider.TryGetSprite(System.String,StardewUI.Graphics.Sprite@)">
            <summary>
            Attempts to retrieve a sprite by its asset name.
            </summary>
            <param name="name">The name of the sprite, which should be the <see cref="F:StardewUI.Framework.Content.ItemSpriteProvider.AssetNamePrefix"/> followed by a
            qualified item ID.</param>
            <param name="sprite">If the method returns <c>true</c>, contains the <see cref="T:StardewUI.Graphics.Sprite"/> for the specified item
            or an error item if unavailable; otherwise, <c>null</c>.</param>
            <returns><c>true</c> if the <paramref name="name"/> was a valid asset name for an item sprite; otherwise,
            <c>false</c>.</returns>
        </member>
        <member name="T:StardewUI.Framework.Content.ModResolutionScope">
            <summary>
            Resolution scope for a single mod; expects unqualified keys only.
            </summary>
            <param name="translations">Helper for the mod's translations.</param>
        </member>
        <member name="M:StardewUI.Framework.Content.ModResolutionScope.#ctor(StardewModdingAPI.ITranslationHelper)">
            <summary>
            Resolution scope for a single mod; expects unqualified keys only.
            </summary>
            <param name="translations">Helper for the mod's translations.</param>
        </member>
        <member name="M:StardewUI.Framework.Content.ModResolutionScope.ForModId(System.String,StardewModdingAPI.IModRegistry)">
            <summary>
            Creates or retrieves the scope for a specific mod, given its ID.
            </summary>
            <param name="uniqueId">The <see cref="P:StardewModdingAPI.IManifest.UniqueID"/> of the mod.</param>
            <param name="registry">Registry of all installed mods, i.e. as accessed through
            <see cref="P:StardewModdingAPI.IModHelper.ModRegistry"/>.</param>
            <returns>A resolution scope for the mod whose ID is the <paramref name="uniqueId"/>.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when no installed mod can be found with the specified
            <paramref name="uniqueId"/>.</exception>
        </member>
        <member name="M:StardewUI.Framework.Content.ModResolutionScope.GetTranslation(System.String)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Content.RootResolutionScopeFactory">
            <summary>
            Factory for creating <see cref="T:StardewUI.Framework.Content.IResolutionScope"/> instances, game-wide.
            </summary>
            <remarks>
            This type is meant to be driven from StardewUI's entry point, and given access to all source resolvers (i.e. all
            view engines) in order to reliably determine the default scope for any given <see cref="T:StardewUI.Framework.Dom.Document"/>.
            </remarks>
            <param name="registry">Mod registry for locating mods corresponding to qualified IDs.</param>
        </member>
        <member name="M:StardewUI.Framework.Content.RootResolutionScopeFactory.#ctor(StardewModdingAPI.IModRegistry)">
            <summary>
            Factory for creating <see cref="T:StardewUI.Framework.Content.IResolutionScope"/> instances, game-wide.
            </summary>
            <remarks>
            This type is meant to be driven from StardewUI's entry point, and given access to all source resolvers (i.e. all
            view engines) in order to reliably determine the default scope for any given <see cref="T:StardewUI.Framework.Dom.Document"/>.
            </remarks>
            <param name="registry">Mod registry for locating mods corresponding to qualified IDs.</param>
        </member>
        <member name="M:StardewUI.Framework.Content.RootResolutionScopeFactory.AddSourceResolver(StardewUI.Framework.Content.ISourceResolver)">
            <summary>
            Registers a source resolver.
            </summary>
            <remarks>
            This should be called with the new resolver whenever a new mod connects to the Framework API and creates a view
            engine.
            </remarks>
            <param name="resolver">The new resolver.</param>
        </member>
        <member name="M:StardewUI.Framework.Content.RootResolutionScopeFactory.CreateForDocument(StardewUI.Framework.Dom.Document)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Content.ISourceResolver">
            <summary>
            Provides a method to connect a parsed <see cref="T:StardewUI.Framework.Dom.Document"/> back to the mod that provided it.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Content.ISourceResolver.TryGetProvidingModId(StardewUI.Framework.Dom.Document,System.String@)">
            <summary>
            Attempts to determine which mod is the originator of some markup document.
            </summary>
            <param name="document">The markup document.</param>
            <param name="modId">Holds the <see cref="P:StardewModdingAPI.IManifest.UniqueID"/> of the originating mod, if the method returns
            <c>true</c>, otherwise <c>null</c>.</param>
            <returns><c>true</c> if the <paramref name="document"/> source was successfully resolved, otherwise
            <c>false</c>.</returns>
        </member>
        <member name="T:StardewUI.Framework.Content.SourceResolver">
            <summary>
            Maps <see cref="T:StardewUI.Framework.Dom.Document"/> instances to the sources they were loaded from.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Content.SourceResolver.GetDocumentSourcePath(StardewUI.Framework.Dom.Document)">
            <summary>
            Gets the absolute file path that was used to load a given document.
            </summary>
            <param name="document">The loaded document.</param>
            <returns>The path to the <paramref name="document"/> source file on disk, or <c>null</c> if unknown.</returns>
        </member>
        <member name="M:StardewUI.Framework.Content.SourceResolver.SetDocumentSourcePath(StardewUI.Framework.Dom.Document,System.String)">
            <summary>
            Updates the tracked file path for a loaded document.
            </summary>
            <remarks>
            Uses weak references, so this will not keep a <see cref="T:StardewUI.Framework.Dom.Document"/> alive if it is no longer in use.
            </remarks>
            <param name="document">The loaded document.</param>
            <param name="path">The path to the <paramref name="document"/> source file on disk.</param>
        </member>
        <member name="T:StardewUI.Framework.Content.UiSpriteProvider">
            <summary>
            Provides all built-in <see cref="T:StardewUI.Graphics.UiSprites"/> for use in asset queries.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Content.UiSpriteProvider.AssetNamePrefix">
            <summary>
            Asset name prefix that should be used for all sprite assets.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Content.UiSpriteProvider.GetSprite(System.String)">
            <summary>
            Retrieves a sprite by its asset name, or throws if not found.
            </summary>
            <param name="name">The name of the sprite, which is the property name in <see cref="T:StardewUI.Graphics.UiSprites"/>.</param>
            <returns>The <see cref="T:StardewUI.Graphics.Sprite"/> with the specified asset <paramref name="name"/>.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the asset name does match a known sprite.</exception>
        </member>
        <member name="M:StardewUI.Framework.Content.UiSpriteProvider.TryGetSprite(System.String,StardewUI.Graphics.Sprite@)">
            <summary>
            Attempts to retrieve a sprite by its asset name.
            </summary>
            <param name="name">The name of the sprite, which is the property name in <see cref="T:StardewUI.Graphics.UiSprites"/>.</param>
            <param name="sprite">If the method returns <c>true</c>, contains the <see cref="T:StardewUI.Graphics.Sprite"/> assigned to the
            specified <paramref name="name"/>; otherwise, <c>null</c>.</param>
            <returns><c>true</c> if a built-in sprite with the specified <paramref name="name"/> exists; otherwise,
            <c>false</c>.</returns>
        </member>
        <member name="T:StardewUI.Framework.Converters.AnyCastConverterFactory">
            <summary>
            Factory supporting conversions to and from <see cref="T:StardewUI.Framework.IAnyCast"/>.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Converters.AnyCastConverterFactory.TryGetConverter``2(StardewUI.Framework.Converters.IValueConverter{``0,``1}@)">
            <inheritdoc />
        </member>
        <member name="F:StardewUI.Framework.Converters.FromAnyCastConverter`1.Instance">
            <summary>
            Global converter instance, per value type.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Converters.ToAnyCastConverter`1.Instance">
            <summary>
            Global converter instance, per value type.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Converters.BaseTypeConverterFactory">
            <summary>
            Allows implicit conversion from a type's ancestor to the destination type, if the source type does not have its own
            explicitly-defined conversion but a base type does.
            </summary>
            <param name="innerFactory">The converter factory to handle conversion of ancestor types.</param>
        </member>
        <member name="M:StardewUI.Framework.Converters.BaseTypeConverterFactory.#ctor(StardewUI.Framework.Converters.IValueConverterFactory)">
            <summary>
            Allows implicit conversion from a type's ancestor to the destination type, if the source type does not have its own
            explicitly-defined conversion but a base type does.
            </summary>
            <param name="innerFactory">The converter factory to handle conversion of ancestor types.</param>
        </member>
        <member name="M:StardewUI.Framework.Converters.BaseTypeConverterFactory.TryGetConverter``2(StardewUI.Framework.Converters.IValueConverter{``0,``1}@)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Converters.CastingValueConverterFactory">
            <summary>
            Factory that automatically implements casting conversions, where the source type can be assigned directly to the
            destination type.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Converters.CastingValueConverterFactory.TryGetConverter``2(StardewUI.Framework.Converters.IValueConverter{``0,``1}@)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Converters.CastingValueConverter`2">
            <summary>
            A value converter that performs a direct cast; used when source and destination types are not exactly the same, but
            the source type is directly assignable to the destination type.
            </summary>
            <typeparam name="TSource">The type of value to be converted.</typeparam>
            <typeparam name="TDestination">The converted value type.</typeparam>
        </member>
        <member name="F:StardewUI.Framework.Converters.CastingValueConverter`2.Instance">
            <summary>
            Global converter instance, per value type.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Converters.DuckTypeClassConverterFactory">
            <summary>
            Factory that creates duck-typing converters for <c>class</c> and <c>struct</c> types.
            </summary>
            <remarks>
            For the conversion to be allowed:
            <list type="number">
            <item>The <c>TDestination</c> type must be annotated with <see cref="T:StardewUI.DuckTypeAttribute"/>.</item>
            <item>The destination type must have either a default constructor, or a constructor that can be completely satisfied
            by properties/fields of the <c>TSource</c> type.</item>
            <item>If the best or only constructor match is the default/parameterless constructor, at least one writable property
            on the target type must be satisfied by a property/field on the source type.</item>
            </list>
            Additionally, source types may use fields or properties, but only constructor arguments and properties will be
            considered on the destination type.
            </remarks>
            <param name="innerFactory">The converter factory to handle conversion of individual properties/arguments.</param>
        </member>
        <member name="M:StardewUI.Framework.Converters.DuckTypeClassConverterFactory.#ctor(StardewUI.Framework.Converters.IValueConverterFactory)">
            <summary>
            Factory that creates duck-typing converters for <c>class</c> and <c>struct</c> types.
            </summary>
            <remarks>
            For the conversion to be allowed:
            <list type="number">
            <item>The <c>TDestination</c> type must be annotated with <see cref="T:StardewUI.DuckTypeAttribute"/>.</item>
            <item>The destination type must have either a default constructor, or a constructor that can be completely satisfied
            by properties/fields of the <c>TSource</c> type.</item>
            <item>If the best or only constructor match is the default/parameterless constructor, at least one writable property
            on the target type must be satisfied by a property/field on the source type.</item>
            </list>
            Additionally, source types may use fields or properties, but only constructor arguments and properties will be
            considered on the destination type.
            </remarks>
            <param name="innerFactory">The converter factory to handle conversion of individual properties/arguments.</param>
        </member>
        <member name="P:StardewUI.Framework.Converters.DuckTypeClassConverterFactory.EnableDebugOutput">
            <summary>
            Whether to print MSIL output for generated conversion methods.
            </summary>
            <remarks>
            Use for troubleshooting misbehaving converters or AVE crashes.
            </remarks>
        </member>
        <member name="M:StardewUI.Framework.Converters.DuckTypeClassConverterFactory.TryGetConverter``2(StardewUI.Framework.Converters.IValueConverter{``0,``1}@)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Converters.DuckTypeEnumConverterFactory">
            <summary>
            Factory that automatically implements duck-typing conversions between enum types that share the same names.
            </summary>
            <remarks>
            Enum values do not need to be identical; matching is performed on the (case-insensitive) name.
            </remarks>
        </member>
        <member name="M:StardewUI.Framework.Converters.DuckTypeEnumConverterFactory.TryGetConverter``2(StardewUI.Framework.Converters.IValueConverter{``0,``1}@)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Converters.EnumNameConverterFactory">
            <summary>
            Factory that automatically implements string-to-enum conversions based on the case-insensitive enum names.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Converters.EnumNameConverterFactory.TryGetConverter``2(StardewUI.Framework.Converters.IValueConverter{``0,``1}@)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Converters.IdentityValueConverterFactory">
            <summary>
            Factory that automatically implements identity conversions, where the source and destination type are the same.
            </summary>
            <remarks>
            Used for most model and asset bindings.
            </remarks>
        </member>
        <member name="M:StardewUI.Framework.Converters.IdentityValueConverterFactory.TryGetConverter``2(StardewUI.Framework.Converters.IValueConverter{``0,``1}@)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Converters.IdentityValueConverter`1">
            <summary>
            A pass-through value converter, for when the source and destination types are the same.
            </summary>
            <typeparam name="T">The value type.</typeparam>
        </member>
        <member name="F:StardewUI.Framework.Converters.IdentityValueConverter`1.Instance">
            <summary>
            Global converter instance, per value type.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Converters.InvalidConverter`2">
            <summary>
            Represents a conversion that is not supported or not allowed.
            </summary>
            <remarks>
            This type is generally not used except as a placeholder when something requires an
            <see cref="T:StardewUI.Framework.Converters.IValueConverter`2"/> but no conversion is supposed to occur, e.g. the input
            converter on an out binding or vice versa.
            </remarks>
        </member>
        <member name="F:StardewUI.Framework.Converters.InvalidConverter`2.Instance">
            <summary>
            The converter instance for the specified conversion.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Converters.LayoutConverter">
            <summary>
            String converter for the <see cref="T:StardewUI.Layout.LayoutParameters"/> type.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Converters.LayoutConverter.Convert(System.String)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Converters.NamedFontConverter">
            <summary>
            Converter for fonts that are already built into the game, i.e. found on <see cref="T:StardewValley.Game1"/>.
            </summary>
            <remarks>
            Does not account for fonts added as separate assets, which require bound attributes and not literals.
            </remarks>
        </member>
        <member name="M:StardewUI.Framework.Converters.NamedFontConverter.Convert(System.String)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Converters.NullableConverterFactory">
            <summary>
            Factory that implements automatic conversion between nullable and non-nullable types.
            </summary>
            <param name="innerFactory">The converter factory to handle conversion of the element type(s).</param>
        </member>
        <member name="M:StardewUI.Framework.Converters.NullableConverterFactory.#ctor(StardewUI.Framework.Converters.IValueConverterFactory)">
            <summary>
            Factory that implements automatic conversion between nullable and non-nullable types.
            </summary>
            <param name="innerFactory">The converter factory to handle conversion of the element type(s).</param>
        </member>
        <member name="M:StardewUI.Framework.Converters.NullableConverterFactory.Warmup">
            <summary>
            Pre-initializes some reflection state in order to make future invocations faster.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Converters.NullableConverterFactory.TryGetConverter``2(StardewUI.Framework.Converters.IValueConverter{``0,``1}@)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Converters.PointConverter">
            <summary>
            String converter for the XNA <see cref="T:Microsoft.Xna.Framework.Point"/> type.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Converters.PointConverter.Convert(System.String)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Converters.RootValueConverterFactory">
            <summary>
            Converter factory used as the root in StardewUI apps, including all built-in converters.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Converters.RootValueConverterFactory.#ctor(System.Collections.Generic.IEnumerable{StardewUI.Framework.Converters.IValueConverterFactory})">
            <summary>
            Initializes a new <see cref="T:StardewUI.Framework.Converters.RootValueConverterFactory"/> with the specified add-on factories.
            </summary>
            <param name="addonFactories">Converter factories registered by add-ons, in order of priority. All add-on
            factories are considered after the standard conversions, but before fallback conversions (duck-type,
            ToString).</param>
        </member>
        <member name="T:StardewUI.Framework.Converters.ItemSpriteConverter">
            <summary>
            Converts data from a game item to its corresponding sprite.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Converters.ItemSpriteConverter.Convert(StardewValley.ItemTypeDefinitions.ParsedItemData)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Converters.TextureRectSpriteConverter">
            <summary>
            Converts a tuple with a texture and source rectangle (within the texture) to a sprite record.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Converters.TextureRectSpriteConverter.Convert(System.Tuple{Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle})">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Converters.TextureSpriteConverter">
            <summary>
            Converts a texture to a sprite record, using the texture's entire bounds as the source rectangle.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Converters.TextureSpriteConverter.Convert(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Converters.StringConverterFactory">
            <summary>
            Provides conversions from any type to <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Converters.StringConverterFactory.TryGetConverter``2(StardewUI.Framework.Converters.IValueConverter{``0,``1}@)">
            <inheritdoc />
        </member>
        <member name="F:StardewUI.Framework.Converters.StringConverterFactory.Converter`1.Instance">
            <summary>
            Global converter instance, per input type.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Converters.TransformConverter">
            <summary>
            String converter for the <see cref="T:StardewUI.Graphics.Transform"/> type.
            </summary>
            <remarks>
            <para>
            Valid strings must be a semicolon-separated list of one of the valid transform properties, followed by a colon,
            followed by the property value.
            </para>
            <para>
            Valid property names include: <c>translate</c>, <c>translateX</c>, <c>translateY</c>, <c>rotate</c>,
            <c>scale</c>, <c>scaleX</c> and <c>scaleY</c>.
            </para>
            <para>
            The value following each property should be a number, except for <c>translate</c> and <c>scale</c> which should
            be a <see cref="T:Microsoft.Xna.Framework.Vector2"/> compatible string such as <c>2, -4</c> instead. Rotation values are interpreted as
            instead of radians for improved readability.
            </para>
            </remarks>
        </member>
        <member name="M:StardewUI.Framework.Converters.TransformConverter.Convert(System.String)">
            <inheritdoc />
            <exception cref="T:System.FormatException">Thrown when <paramref name="value"/> is not in the correct format or specifies
            invalid transformation properties.</exception>
        </member>
        <member name="T:StardewUI.Framework.Converters.IValueConverter">
            <summary>
            Provides a method to convert between arbitrary types.
            </summary>
            <remarks>
            This is a non-generic version of the <see cref="T:StardewUI.Framework.Converters.IValueConverter`2"/> that should normally only
            be used by framework code. Avoid implementing this directly; instead prefer the generic version, which implicitly
            implements this interface.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.Converters.IValueConverter.DestinationType">
            <summary>
            The type of object that this converts to; the result type of the <see cref="M:StardewUI.Framework.Converters.IValueConverter.Convert(System.Object)"/> method.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Converters.IValueConverter.SourceType">
            <summary>
            The type of object this converts from; the <c>value</c> argument to the <see cref="M:StardewUI.Framework.Converters.IValueConverter.Convert(System.Object)"/> method.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Converters.IValueConverter.Convert(System.Object)">
            <summary>
            Converts a value from the <see cref="P:StardewUI.Framework.Converters.IValueConverter.SourceType"/> to the <see cref="P:StardewUI.Framework.Converters.IValueConverter.DestinationType"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when <paramref name="value"/> is not an instance of
            <see cref="P:StardewUI.Framework.Converters.IValueConverter.SourceType"/>.</exception>
        </member>
        <member name="T:StardewUI.Framework.Converters.IValueConverter`2">
            <summary>
            Provides a method to convert between value types.
            </summary>
            <typeparam name="TSource">The type of value to be converted.</typeparam>
            <typeparam name="TDestination">The converted value type.</typeparam>
        </member>
        <member name="M:StardewUI.Framework.Converters.IValueConverter`2.Convert(`0)">
            <summary>
            Converts a value from the source type to the destination type.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:StardewUI.Framework.Converters.ValueConverter`2">
            <summary>
            Generic delegating converter, accepting a conversion function.
            </summary>
            <typeparam name="TSource">The type of value to be converted.</typeparam>
            <typeparam name="TDestination">The converted value type.</typeparam>
            <param name="convert">Function to convert a <typeparamref name="TSource"/> to a
            <typeparamref name="TDestination"/>.</param>
        </member>
        <member name="M:StardewUI.Framework.Converters.ValueConverter`2.#ctor(System.Func{`0,`1})">
            <summary>
            Generic delegating converter, accepting a conversion function.
            </summary>
            <typeparam name="TSource">The type of value to be converted.</typeparam>
            <typeparam name="TDestination">The converted value type.</typeparam>
            <param name="convert">Function to convert a <typeparamref name="TSource"/> to a
            <typeparamref name="TDestination"/>.</param>
        </member>
        <member name="M:StardewUI.Framework.Converters.ValueConverter`2.Convert(`0)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Converters.IValueConverterFactory">
            <summary>
            Factory for obtaining instance of <see cref="T:StardewUI.Framework.Converters.IValueConverter`2"/>.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Converters.IValueConverterFactory.GetConverter``2">
            <summary>
            Gets a converter from a given source type to a given destination type.
            </summary>
            <typeparam name="TSource">The type of value to be converted.</typeparam>
            <typeparam name="TDestination">The converted value type.</typeparam>
            <returns>A converter that converts from <typeparamref name="TSource"/> to <typeparamref name="TDestination"/>,
            or <c>null</c> if the conversion is not supported.</returns>
        </member>
        <member name="M:StardewUI.Framework.Converters.IValueConverterFactory.GetRequiredConverter``2">
            <summary>
            Gets a converter from a given source type to a given destination type, throwing if the conversion is not
            supported.
            </summary>
            <typeparam name="TSource">The type of value to be converted.</typeparam>
            <typeparam name="TDestination">The converted value type.</typeparam>
            <returns>A converter that converts from <typeparamref name="TSource"/> to
            <typeparamref name="TDestination"/>.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when there is no registered converter that supports conversion
            from <typeparamref name="TSource"/> to <typeparamref name="TDestination"/>.</exception>
        </member>
        <member name="M:StardewUI.Framework.Converters.IValueConverterFactory.TryGetConverter``2(StardewUI.Framework.Converters.IValueConverter{``0,``1}@)">
            <summary>
            Attempts to obtain a converter from a given source type to a given destination type.
            </summary>
            <typeparam name="TSource">The type of value to be converted.</typeparam>
            <typeparam name="TDestination">The converted value type.</typeparam>
            <param name="converter">If the method returns <c>true</c>, holds the converter that converts between the
            specified types; otherwise <c>null</c>.</param>
            <returns><c>true</c> if the conversion is supported, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:StardewUI.Framework.Converters.IValueConverterFactory.TryGetConverter(System.Type,System.Type,StardewUI.Framework.Converters.IValueConverter@)">
            <summary>
            Attempts to obtain a converter from a given source type to a given destination type.
            </summary>
            <param name="sourceType">The type of value to be converted.</param>
            <param name="destinationType">The converted value type.</param>
            <param name="converter">If the method returns <c>true</c>, holds the converter that converts between the
            specified types; otherwise <c>null</c>.</param>
            <returns><c>true</c> if the conversion is supported, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:StardewUI.Framework.Converters.ValueConverterFactory">
            <summary>
            Standard implementation of <see cref="T:StardewUI.Framework.Converters.IValueConverterFactory"/> that allows registering new converters.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Converters.ValueConverterFactory.Factories">
            <summary>
            The list of factories currently registered.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Converters.ValueConverterFactory.#ctor">
            <summary>
            Initializes a new <see cref="T:StardewUI.Framework.Converters.ValueConverterFactory"/> instance.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Converters.ValueConverterFactory.Register(StardewUI.Framework.Converters.IValueConverterFactory)">
            <summary>
            Registers a delegate factory that may be used to obtain a converter for which there is no explicit registration.
            </summary>
            <remarks>
            Use when a single converter may handle many input or output types, e.g. string-to-enum conversions.
            </remarks>
            <param name="factory">The delegate factory.</param>
        </member>
        <member name="M:StardewUI.Framework.Converters.ValueConverterFactory.TryGetConverter(System.Type,System.Type,StardewUI.Framework.Converters.IValueConverter@)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Converters.ValueConverterFactory.TryGetConverter``2(StardewUI.Framework.Converters.IValueConverter{``0,``1}@)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Converters.ValueConverterFactory.TryRegister``2(StardewUI.Framework.Converters.IValueConverter{``0,``1})">
            <summary>
            Attempts to register a new converter.
            </summary>
            <typeparam name="TSource">The type of value to be converted.</typeparam>
            <typeparam name="TDestination">The converted value type.</typeparam>
            <param name="converter">The converter that handles this conversion.</param>
            <returns><c>true</c> if the <paramref name="converter"/> was registered for the specified types; <c>false</c> if
            there was already a registration or cached converter for those types.</returns>
        </member>
        <member name="M:StardewUI.Framework.Converters.ValueConverterFactory.TryRegister``2(System.Func{``0,``1})">
            <summary>
            Attempts to register a new converter.
            </summary>
            <typeparam name="TSource">The type of value to be converted.</typeparam>
            <typeparam name="TDestination">The converted value type.</typeparam>
            <param name="convert">Function to convert from <typeparamref name="TSource"/> to
            <typeparamref name="TDestination"/>.</param>
            <returns><c>true</c> if the conversion function was registered for the specified types; <c>false</c> if there
            was already a registration or cached converter for those types.</returns>
        </member>
        <member name="T:StardewUI.Framework.Descriptors.CodeReloadHandler">
            <summary>
            Handles hot reloads of the application itself, i.e. from an attached debugger.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.CodeReloadHandler.RegisterDependent(StardewUI.Framework.Descriptors.IDescriptorDependent)">
            <summary>
            Registers an object that is descriptor-dependent to receive a notification when the descriptors change.
            </summary>
            <remarks>
            Dependents are tracked using weak references, so there is no need to unregister.
            </remarks>
            <param name="dependent">The dependent object.</param>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.CodeReloadHandler.ClearCache(System.Type[])">
            <summary>
            Invoked as soon as any types are invalidated by a hot reload.
            </summary>
            <param name="types">The changed types.</param>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.CodeReloadHandler.UpdateApplication(System.Type[])">
            <summary>
            Invoked after a hot reload completes.
            </summary>
            <param name="types">The changed types.</param>
        </member>
        <member name="T:StardewUI.Framework.Descriptors.DescriptorException">
            <summary>
            The exception that is thrown when an error occurs while reading or building the metadata for a bound view or one of
            its data sources.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.DescriptorException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StardewUI.Framework.Descriptors.DescriptorException"/> class.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.DescriptorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StardewUI.Framework.Descriptors.DescriptorException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.DescriptorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:StardewUI.Framework.Descriptors.DescriptorException"/> class with a specified error message and a
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if not
            specified.</param>
        </member>
        <member name="T:StardewUI.Framework.Descriptors.DescriptorFactory">
            <summary>
            Factory for obtaining descriptors, encapsulating both dynamic (reflection) and static (precompiled) descriptors.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.DescriptorFactory.GetObjectDescriptor(System.Type,System.Boolean)">
            <summary>
            Gets a descriptor for an arbitrary object type; typically used for binding targets.
            </summary>
            <param name="type">The object type.</param>
            <param name="lazy">Whether to create the descriptor with lazily-initialized members. Lazy descriptors are faster
            to create, but may have slower initial access times.</param>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.DescriptorFactory.GetViewDescriptor(System.Type)">
            <summary>
            Gets a descriptor for a type that is assumed to be an <see cref="T:StardewUI.IView"/> implementation.
            </summary>
            <remarks>
            View descriptors include additional information about view-specific types, such as outlets.
            </remarks>
            <param name="type">The object type.</param>
        </member>
        <member name="T:StardewUI.Framework.Descriptors.ExpressionFieldDescriptor`2">
            <summary>
            Implementation of a field descriptor using a compiled expression tree.
            </summary>
            <remarks>
            Expression trees take a long time to compile and should only be compiled in the background, but once compiled are
            nearly equivalent to a regular field access.
            </remarks>
            <typeparam name="T">The field's declaring type.</typeparam>
            <typeparam name="TValue">The field's value type.</typeparam>
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ExpressionFieldDescriptor`2.CanRead">
            <inheritdoc />
            <remarks>
            For fields, always returns <c>true</c>.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ExpressionFieldDescriptor`2.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ExpressionFieldDescriptor`2.DeclaringType">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ExpressionFieldDescriptor`2.IsAutoProperty">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ExpressionFieldDescriptor`2.IsField">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ExpressionFieldDescriptor`2.Name">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ExpressionFieldDescriptor`2.ValueType">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ExpressionFieldDescriptor`2.Build(System.Reflection.FieldInfo)">
            <summary>
            Builds a new <see cref="T:StardewUI.Framework.Descriptors.ExpressionFieldDescriptor`2"/> instance from the specified field.
            </summary>
            <param name="field">The reflected field.</param>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ExpressionFieldDescriptor`2.GetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ExpressionFieldDescriptor`2.SetValue(System.Object,`1)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Descriptors.IDescriptorDependent">
            <summary>
            Marks some type as being dependent on the descriptor cache, and provides a method to invalidate its contents so that
            they will be updated after a descriptor change (i.e. due to code hot reload).
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.IDescriptorDependent.InvalidateDescriptors">
            <summary>
            Forces the content to invalidate its descriptors so that they will be reloaded either immediately or on the next
            update tick.
            </summary>
            <remarks>
            In most cases this will simply invalidate the entire object graph, e.g. removing a constructed view or context.
            </remarks>
        </member>
        <member name="T:StardewUI.Framework.Descriptors.IEventDescriptor">
            <summary>
            Describes a single event on some type.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Descriptors.IEventDescriptor.ArgsTypeDescriptor">
            <summary>
            Descriptor for the type of event object (arguments), generally a subtype of <see cref="T:System.EventArgs"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Descriptors.IEventDescriptor.DelegateParameterCount">
            <summary>
            Number of parameters that the <c>Invoke</c> method of the <see cref="P:StardewUI.Framework.Descriptors.IEventDescriptor.DelegateType"/> accepts.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Descriptors.IEventDescriptor.DelegateType">
            <summary>
            The type (subtype of <see cref="T:System.Delegate"/>) that can be added/removed from the event handlers.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.IEventDescriptor.Add(System.Object,System.Delegate)">
            <summary>
            Adds an event handler.
            </summary>
            <param name="target">The instance of the <see cref="P:StardewUI.Framework.Descriptors.IMemberDescriptor.DeclaringType"/> on which to subscribe to
            events.</param>
            <param name="handler">The handler to run when the event is raised; must be assignable to the
            <see cref="P:StardewUI.Framework.Descriptors.IEventDescriptor.DelegateType"/>.</param>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.IEventDescriptor.Remove(System.Object,System.Delegate)">
            <summary>
            Removes an event handler.
            </summary>
            <param name="target">The instance of the <see cref="P:StardewUI.Framework.Descriptors.IMemberDescriptor.DeclaringType"/> on which to unsubscribe
            from events.</param>
            <param name="handler">The handler that was previously registered, i.e. via <see cref="M:StardewUI.Framework.Descriptors.IEventDescriptor.Add(System.Object,System.Delegate)"/>.</param>
        </member>
        <member name="T:StardewUI.Framework.Descriptors.IMemberDescriptor">
            <summary>
            Describes a single member (property, method, or event) of a bindable object, such as a view.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Descriptors.IMemberDescriptor.DeclaringType">
            <summary>
            The type on which the member is declared.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Descriptors.IMemberDescriptor.Name">
            <summary>
            The member name.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Descriptors.IMethodDescriptor">
            <summary>
            Describes a single method on some type.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Descriptors.IMethodDescriptor.ArgumentTypes">
            <summary>
            The exact types expected for the method's arguments.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Descriptors.IMethodDescriptor.OptionalArgumentCount">
            <summary>
            The number of optional arguments at the end of the argument list.
            </summary>
            <remarks>
            Optional arguments can be provided with <see cref="F:System.Type.Missing"/> in order to ignore them in the invocation.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.Descriptors.IMethodDescriptor.ReturnType">
            <summary>
            The method's return type.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Descriptors.IMethodDescriptor`1">
            <summary>
            Describes a single method on some type, and provides a wrapper method to invoke it.
            </summary>
            <typeparam name="T">The return type of the described method.</typeparam>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.IMethodDescriptor`1.Invoke(System.Object,System.Object[])">
            <summary>
            Invokes the underlying method.
            </summary>
            <param name="target">The object instance on which to invoke the method.</param>
            <param name="arguments">The arguments to provide to the method.</param>
            <returns>The return value.</returns>
        </member>
        <member name="T:StardewUI.Framework.Descriptors.IObjectDescriptor">
            <summary>
            Describes a type of object that participates in view binding, either as the target or the source.
            </summary>
            <remarks>
            The binding target is independent of the actual object instance; it provides methods and data to support interacting
            with any object of the given <see cref="P:StardewUI.Framework.Descriptors.IObjectDescriptor.TargetType"/>.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.Descriptors.IObjectDescriptor.MemberNames">
            <summary>
            Enumerates the names of all members of the object type.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Descriptors.IObjectDescriptor.SupportsChangeNotifications">
            <summary>
            Whether or not objects of this type can notify about data changes; that is, if the type implements
            <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Descriptors.IObjectDescriptor.TargetType">
            <summary>
            The type being described, which owns or inherits each of the available members.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.IObjectDescriptor.GetEvent(System.String)">
            <summary>
            Retrieves a named event on the <see cref="P:StardewUI.Framework.Descriptors.IObjectDescriptor.TargetType"/>.
            </summary>
            <param name="name">The event name.</param>
            <returns>The <see cref="T:StardewUI.Framework.Descriptors.IEventDescriptor"/> whose <see cref="P:StardewUI.Framework.Descriptors.IMemberDescriptor.Name"/> is
            <paramref name="name"/>.</returns>
            <exception cref="T:StardewUI.Framework.Descriptors.DescriptorException">Thrown when no event exists with the specified
            <paramref name="name"/>.</exception>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.IObjectDescriptor.GetMethod(System.String)">
            <summary>
            Retrieves a named method of the <see cref="P:StardewUI.Framework.Descriptors.IObjectDescriptor.TargetType"/>.
            </summary>
            <remarks>
            Overloaded methods are not supported. If different signatures are required, use optional parameters.
            </remarks>
            <param name="name">The method name.</param>
            <returns>The <see cref="T:StardewUI.Framework.Descriptors.IMethodDescriptor"/> whose <see cref="P:StardewUI.Framework.Descriptors.IMemberDescriptor.Name"/> is
            <paramref name="name"/>.</returns>
            <exception cref="T:StardewUI.Framework.Descriptors.DescriptorException">Thrown when no method exists with the specified
            <paramref name="name"/>.</exception>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.IObjectDescriptor.GetProperty(System.String)">
            <summary>
            Retrieves a named property of the <see cref="P:StardewUI.Framework.Descriptors.IObjectDescriptor.TargetType"/>.
            </summary>
            <param name="name">The property name.</param>
            <returns>The <see cref="T:StardewUI.Framework.Descriptors.IPropertyDescriptor"/> whose <see cref="P:StardewUI.Framework.Descriptors.IMemberDescriptor.Name"/> is
            <paramref name="name"/>.</returns>
            <exception cref="T:StardewUI.Framework.Descriptors.DescriptorException">Thrown when no property exists with the specified
            <paramref name="name"/>.</exception>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.IObjectDescriptor.TryGetEvent(System.String,StardewUI.Framework.Descriptors.IEventDescriptor@)">
            <summary>
            Attempts to retrieve a named event on the <see cref="P:StardewUI.Framework.Descriptors.IObjectDescriptor.TargetType"/>.
            </summary>
            <param name="name">The event name.</param>
            <param name="event">When this method returns, holds a reference to the <see cref="T:StardewUI.Framework.Descriptors.IEventDescriptor"/> whose
            <see cref="P:StardewUI.Framework.Descriptors.IMemberDescriptor.Name"/> is <paramref name="name"/>, or <c>null</c> if no event was found with the
            given name.</param>
            <returns><c>true</c> if the named event was found, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.IObjectDescriptor.TryGetMethod(System.String,StardewUI.Framework.Descriptors.IMethodDescriptor@)">
            <summary>
            Attempts to retrieve a named method of the <see cref="P:StardewUI.Framework.Descriptors.IObjectDescriptor.TargetType"/>.
            </summary>
            <remarks>
            Overloaded methods are not supported. If different signatures are required, use optional parameters.
            </remarks>
            <param name="name">The method name.</param>
            <param name="method">When this method returns, holds a reference to the <see cref="T:StardewUI.Framework.Descriptors.IMethodDescriptor"/> whose
            <see cref="P:StardewUI.Framework.Descriptors.IMemberDescriptor.Name"/> is <paramref name="name"/>, or <c>null</c> if no method was found with the
            given name.</param>
            <returns><c>true</c> if the named method was found, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.IObjectDescriptor.TryGetProperty(System.String,StardewUI.Framework.Descriptors.IPropertyDescriptor@)">
            <summary>
            Attempts to retrieve a named property of the <see cref="P:StardewUI.Framework.Descriptors.IObjectDescriptor.TargetType"/>.
            </summary>
            <param name="name">The property name.</param>
            <param name="property">When this method returns, holds a reference to the <see cref="T:StardewUI.Framework.Descriptors.IPropertyDescriptor"/>
            whose <see cref="P:StardewUI.Framework.Descriptors.IMemberDescriptor.Name"/> is <paramref name="name"/>, or <c>null</c> if no property was found
            with the given name.</param>
            <returns><c>true</c> if the named property was found, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:StardewUI.Framework.Descriptors.IPropertyDescriptor">
            <summary>
            Describes a single property on a bindable object (i.e. a view).
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Descriptors.IPropertyDescriptor.CanRead">
            <summary>
            Whether or not the property is readable, i.e. has a public getter.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Descriptors.IPropertyDescriptor.CanWrite">
            <summary>
            Whether or not the property is writable, i.e. has a public setter.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Descriptors.IPropertyDescriptor.IsAutoProperty">
            <summary>
            Whether or not the property is likely auto-implemented.
            </summary>
            <remarks>
            <para>
            Auto-property detection is heuristic, relying on the method's IL instructions and the name of its backing field.
            This can often be interpreted as a signal that the property won't receive property-change notifications, since
            to do so (whether explicitly or via some weaver/source generator) requires an implementation that is different
            from the auto-generated getter and setter.
            </para>
            <para>
            Caveats: This only works as a negative signal (a value of <c>false</c> does not prove that the property
            <em>will</em> receive notifications, even if the declaring type implements
            <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>), and is somewhat fuzzy even as a negative signal;
            it is theoretically possible for a source generator or IL weaver to leave behind all the markers of an auto
            property and still emit notifications, although no known libraries actually do so.
            </para>
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.Descriptors.IPropertyDescriptor.IsField">
            <summary>
            Whether or not the underlying member is a field, rather than a real property.
            </summary>
            <remarks>
            For binding convenience, fields and properties are both called "properties" for descriptors, as the external
            access pattern is the same; however, mutable fields can never reliably emit property-change notifications
            regardless of whether the declaring type implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>,
            so this is usually used to emit some warning.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.Descriptors.IPropertyDescriptor.ValueType">
            <summary>
            The property's value type.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Descriptors.IPropertyDescriptor`1">
            <summary>
            Describes a single property on a bindable object (i.e. a view) and provides methods to read or write the value.
            </summary>
            <remarks>
            The read and write methods take <see cref="T:System.Object"/> as a receiver because they are intended to be invoked from a
            non-generic context.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.IPropertyDescriptor`1.GetValue(System.Object)">
            <summary>
            Reads the current property value.
            </summary>
            <param name="source">An instance of the property's <see cref="P:StardewUI.Framework.Descriptors.IMemberDescriptor.DeclaringType"/>.</param>
            <returns>The current property value.</returns>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.IPropertyDescriptor`1.SetValue(System.Object,`0)">
            <summary>
            Writes a new property value.
            </summary>
            <param name="target">An instance of the property's <see cref="P:StardewUI.Framework.Descriptors.IMemberDescriptor.DeclaringType"/>.</param>
            <param name="value">The new property value.</param>
        </member>
        <member name="T:StardewUI.Framework.Descriptors.IViewDefaults">
            <summary>
            Provides access to the default values of a view's properties.
            </summary>
            <remarks>
            These defaults are not part of the <see cref="T:StardewUI.Framework.Descriptors.IViewDescriptor"/> or <see cref="T:StardewUI.Framework.Descriptors.IPropertyDescriptor`1"/> interfaces
            because they cannot be reliably detected through reflection alone; instead they require support from a source
            generator, if known at compile time, or a dummy/"blank" instance of the view created at runtime otherwise.
            </remarks>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.IViewDefaults.GetDefaultValue``1(System.String)">
            <summary>
            Gets the default value for the named property.
            </summary>
            <typeparam name="T">The property value type.</typeparam>
            <param name="propertyName">The property name.</param>
            <returns>The default value of the specified property for a newly-created view.</returns>
        </member>
        <member name="T:StardewUI.Framework.Descriptors.IViewDescriptor">
            <summary>
            Describes a type of view that can be used in a view binding.
            </summary>
            <remarks>
            The binding target is independent of the actual <see cref="T:StardewUI.IView"/> instance; it provides methods and data
            to support interacting with any view of the given <see cref="P:StardewUI.Framework.Descriptors.IObjectDescriptor.TargetType"/>.
            </remarks>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.IViewDescriptor.GetChildrenProperty(System.String)">
            <summary>
            Retrieves the property of the <see cref="P:StardewUI.Framework.Descriptors.IObjectDescriptor.TargetType"/> that holds the view's children/content.
            </summary>
            <param name="outletName">The name of the specific outlet, if targeting a non-default outlet on a view with
            multiple outlets. Corresponds to <see cref="P:StardewUI.Widgets.OutletAttribute.Name"/>.</param>
            <returns>The view children property.</returns>
            <exception cref="T:StardewUI.Framework.Descriptors.DescriptorException">Thrown when the <see cref="P:StardewUI.Framework.Descriptors.IObjectDescriptor.TargetType"/> lacks any
            visible property that could be used to hold child views.</exception>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.IViewDescriptor.TryGetChildrenProperty(System.String,StardewUI.Framework.Descriptors.IPropertyDescriptor@)">
            <summary>
            Attempts to retrieve the property of the <see cref="P:StardewUI.Framework.Descriptors.IObjectDescriptor.TargetType"/> that holds the view's
            children/content.
            </summary>
            <param name="outletName">The name of the specific outlet, if targeting a non-default outlet on a view with
            multiple outlets. Corresponds to <see cref="P:StardewUI.Widgets.OutletAttribute.Name"/>.</param>
            <param name="property">When this method returns, holds a reference to the <see cref="T:StardewUI.Framework.Descriptors.IPropertyDescriptor"/> that
            holds the view's children/content, or <c>null</c> if no such property is available.</param>
            <returns><c>true</c> if a children/content property was found, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:StardewUI.Framework.Descriptors.LazyExpressionFieldDescriptor">
            <summary>
            Helper for creating <see cref="T:StardewUI.Framework.Descriptors.LazyExpressionFieldDescriptor`1"/> with types not known at compile time.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.LazyExpressionFieldDescriptor.FromFieldInfo(System.Reflection.FieldInfo)">
            <summary>
            Creates a binding field from reflected field info.
            </summary>
            <param name="fieldInfo">The reflected field info.</param>
            <returns>
            A binding field of type <see cref="T:StardewUI.Framework.Descriptors.LazyExpressionFieldDescriptor`1"/>, whose generic argument is the
            field's <see cref="P:System.Reflection.FieldInfo.FieldType"/>.
            </returns>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.LazyExpressionFieldDescriptor.Warmup">
            <summary>
            Pre-initializes some reflection state in order to make future invocations faster.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Descriptors.LazyExpressionFieldDescriptor`1">
            <summary>
            Implementation of a field descriptor that supports a transition between two inner descriptor types.
            </summary>
            <remarks>
            Designed to initially use a "slow" descriptor that is poorly optimized for access times, but is available
            immediately, and then transition to a "fast" descriptor that is created asynchronously and slowly, but is better
            optimized for frequent access.
            </remarks>
            <typeparam name="TValue">The field's value type.</typeparam>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.LazyExpressionFieldDescriptor`1.#ctor(StardewUI.Framework.Descriptors.IPropertyDescriptor{`0},System.Threading.Tasks.Task{StardewUI.Framework.Descriptors.IPropertyDescriptor{`0}})">
            <summary>
            Initializes a new <see cref="T:StardewUI.Framework.Descriptors.LazyExpressionFieldDescriptor`1"/> instance.
            </summary>
            <param name="slowDescriptor">The slower but immediately-available descriptor to use initially; typically an
            instance of <see cref="T:StardewUI.Framework.Descriptors.ReflectionFieldDescriptor`1"/>.</param>
            <param name="fastDescriptorTask">The faster, deferred descriptor to use once available; typically an instance of
            <see cref="T:StardewUI.Framework.Descriptors.ExpressionFieldDescriptor`2"/>.</param>
        </member>
        <member name="P:StardewUI.Framework.Descriptors.LazyExpressionFieldDescriptor`1.CanRead">
            <inheritdoc />
            <remarks>
            For fields, always returns <c>true</c>.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.Descriptors.LazyExpressionFieldDescriptor`1.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.LazyExpressionFieldDescriptor`1.DeclaringType">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.LazyExpressionFieldDescriptor`1.IsAutoProperty">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.LazyExpressionFieldDescriptor`1.IsField">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.LazyExpressionFieldDescriptor`1.Name">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.LazyExpressionFieldDescriptor`1.ValueType">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Descriptors.LazyExpressionFieldDescriptor`1.GetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Descriptors.LazyExpressionFieldDescriptor`1.SetValue(System.Object,`0)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Descriptors.PrecompiledEventDescriptor`2">
            <summary>
            Statically-typed implementation of an <see cref="T:StardewUI.Framework.Descriptors.IEventDescriptor"/> with predefined attributes.
            </summary>
            <typeparam name="TTarget">The event's declaring type.</typeparam>
            <typeparam name="THandler">The delegate type of event handlers.</typeparam>
            <param name="name">The event name.</param>
            <param name="add">Function to add a new event handler to an instance of the target type.</param>
            <param name="remove">Function to remove an existing event handler from an instance of the target type.</param>
            <param name="argsType">Type of the argument parameter in the <typeparamref name="THandler"/> delegate.</param>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.PrecompiledEventDescriptor`2.#ctor(System.String,System.Action{`0,`1},System.Action{`0,`1},System.Type)">
            <summary>
            Statically-typed implementation of an <see cref="T:StardewUI.Framework.Descriptors.IEventDescriptor"/> with predefined attributes.
            </summary>
            <typeparam name="TTarget">The event's declaring type.</typeparam>
            <typeparam name="THandler">The delegate type of event handlers.</typeparam>
            <param name="name">The event name.</param>
            <param name="add">Function to add a new event handler to an instance of the target type.</param>
            <param name="remove">Function to remove an existing event handler from an instance of the target type.</param>
            <param name="argsType">Type of the argument parameter in the <typeparamref name="THandler"/> delegate.</param>
        </member>
        <member name="P:StardewUI.Framework.Descriptors.PrecompiledEventDescriptor`2.ArgsTypeDescriptor">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.PrecompiledEventDescriptor`2.DelegateParameterCount">
            <inheritdoc />
            <remarks>
            For precompiled descriptors, this is assumed to always be exactly 2 (sender and args).
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.Descriptors.PrecompiledEventDescriptor`2.DelegateType">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.PrecompiledEventDescriptor`2.DeclaringType">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.PrecompiledEventDescriptor`2.Name">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Descriptors.PrecompiledEventDescriptor`2.Add(System.Object,System.Delegate)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Descriptors.PrecompiledEventDescriptor`2.Remove(System.Object,System.Delegate)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Descriptors.PrecompiledMethodDescriptor`2">
            <summary>
            Statically-typed implementation of an <see cref="T:StardewUI.Framework.Descriptors.IMethodDescriptor`1"/> with predefined attributes.
            </summary>
            <typeparam name="TTarget">The method's declaring type.</typeparam>
            <typeparam name="TReturn">The type of the method's return value.</typeparam>
            <param name="name">The method name.</param>
            <param name="argumentTypes">Types of all method parameters, including optional parameters.</param>
            <param name="defaultValues">Default values for all optional parameters at the end of the argument list.</param>
            <param name="invoke">Function to invoke the method on a given target with a specified argument list.</param>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.PrecompiledMethodDescriptor`2.#ctor(System.String,System.Type[],System.Object[],System.Func{`0,System.Object[],System.Object})">
            <summary>
            Statically-typed implementation of an <see cref="T:StardewUI.Framework.Descriptors.IMethodDescriptor`1"/> with predefined attributes.
            </summary>
            <typeparam name="TTarget">The method's declaring type.</typeparam>
            <typeparam name="TReturn">The type of the method's return value.</typeparam>
            <param name="name">The method name.</param>
            <param name="argumentTypes">Types of all method parameters, including optional parameters.</param>
            <param name="defaultValues">Default values for all optional parameters at the end of the argument list.</param>
            <param name="invoke">Function to invoke the method on a given target with a specified argument list.</param>
        </member>
        <member name="P:StardewUI.Framework.Descriptors.PrecompiledMethodDescriptor`2.ArgumentTypes">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.PrecompiledMethodDescriptor`2.DeclaringType">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.PrecompiledMethodDescriptor`2.Name">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.PrecompiledMethodDescriptor`2.OptionalArgumentCount">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.PrecompiledMethodDescriptor`2.ReturnType">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Descriptors.PrecompiledMethodDescriptor`2.Invoke(System.Object,System.Object[])">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Descriptors.PrecompiledPropertyDescriptor`2">
            <summary>
            Statically-typed implementation of an <see cref="T:StardewUI.Framework.Descriptors.IPropertyDescriptor`1"/> with predefined attributes.
            </summary>
            <typeparam name="TTarget">The property's declaring type.</typeparam>
            <typeparam name="TProperty">The property value type.</typeparam>
            <param name="name">The event name.</param>
            <param name="isField">Whether or not this descriptor is really for an unwrapped field.</param>
            <param name="isAutoProperty">Whether or not the property is auto-implemented.</param>
            <param name="getter">Function to retrieve the current property value from a target instance.</param>
            <param name="setter">Function to set the current property value on a target instance.</param>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.PrecompiledPropertyDescriptor`2.#ctor(System.String,System.Boolean,System.Boolean,System.Func{`0,`1},System.Action{`0,`1})">
            <summary>
            Statically-typed implementation of an <see cref="T:StardewUI.Framework.Descriptors.IPropertyDescriptor`1"/> with predefined attributes.
            </summary>
            <typeparam name="TTarget">The property's declaring type.</typeparam>
            <typeparam name="TProperty">The property value type.</typeparam>
            <param name="name">The event name.</param>
            <param name="isField">Whether or not this descriptor is really for an unwrapped field.</param>
            <param name="isAutoProperty">Whether or not the property is auto-implemented.</param>
            <param name="getter">Function to retrieve the current property value from a target instance.</param>
            <param name="setter">Function to set the current property value on a target instance.</param>
        </member>
        <member name="P:StardewUI.Framework.Descriptors.PrecompiledPropertyDescriptor`2.CanRead">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.PrecompiledPropertyDescriptor`2.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.PrecompiledPropertyDescriptor`2.DeclaringType">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.PrecompiledPropertyDescriptor`2.IsAutoProperty">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.PrecompiledPropertyDescriptor`2.IsField">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.PrecompiledPropertyDescriptor`2.Name">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.PrecompiledPropertyDescriptor`2.ValueType">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Descriptors.PrecompiledPropertyDescriptor`2.GetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Descriptors.PrecompiledPropertyDescriptor`2.SetValue(System.Object,`1)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Descriptors.ReferenceViewDefaults">
            <summary>
            View defaults based on a reference view.
            </summary>
            <remarks>
            References views are dummy views created explicitly for the purposes of deriving default values, and never displayed
            or written to.
            </remarks>
            <param name="view">The reference view whose properties are set to the assumed defaults.</param>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReferenceViewDefaults.#ctor(StardewUI.IView)">
            <summary>
            View defaults based on a reference view.
            </summary>
            <remarks>
            References views are dummy views created explicitly for the purposes of deriving default values, and never displayed
            or written to.
            </remarks>
            <param name="view">The reference view whose properties are set to the assumed defaults.</param>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReferenceViewDefaults.GetDefaultValue``1(System.String)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Descriptors.ReflectionEventDescriptor">
            <summary>
            Helper for creating <see cref="T:StardewUI.Framework.Descriptors.IEventDescriptor"/> instances using reflection.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionEventDescriptor.FromEventInfo(System.Reflection.EventInfo)">
            <summary>
            Creates or retrieves a descriptor for a given event.
            </summary>
            <param name="eventInfo">The event info.</param>
            <returns>The descriptor for the specified <paramref name="eventInfo"/>.</returns>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionEventDescriptor.IsSupported(System.Reflection.EventInfo)">
            <summary>
            Checks if an event is supported for view binding.
            </summary>
            <param name="eventInfo">The event info.</param>
            <returns><c>true</c> if a <see cref="T:StardewUI.Framework.Descriptors.ReflectionEventDescriptor`2"/> can be created for the
            specified <paramref name="eventInfo"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionEventDescriptor.Warmup">
            <summary>
            Pre-initializes some reflection state in order to make future invocations faster.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Descriptors.ReflectionEventDescriptor`2">
            <summary>
            Reflection-based implementation of an event descriptor.
            </summary>
            <typeparam name="TTarget">The type that declares the event.</typeparam>
            <typeparam name="THandler">The event handler (delegate) type.</typeparam>
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ReflectionEventDescriptor`2.ArgsTypeDescriptor">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ReflectionEventDescriptor`2.DelegateParameterCount">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ReflectionEventDescriptor`2.DelegateType">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ReflectionEventDescriptor`2.DeclaringType">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ReflectionEventDescriptor`2.Name">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionEventDescriptor`2.Add(System.Object,System.Delegate)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionEventDescriptor`2.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionEventDescriptor`2.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionEventDescriptor`2.Remove(System.Object,System.Delegate)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Descriptors.ReflectionFieldDescriptor`1">
            <summary>
            Implementation of a field descriptor based on reflection.
            </summary>
            <remarks>
            Reflection has the quickest setup time of available methods, but the slowest overall access/write time.
            </remarks>
            <typeparam name="TValue">The field's value type.</typeparam>
            <param name="field">The reflected field.</param>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionFieldDescriptor`1.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Implementation of a field descriptor based on reflection.
            </summary>
            <remarks>
            Reflection has the quickest setup time of available methods, but the slowest overall access/write time.
            </remarks>
            <typeparam name="TValue">The field's value type.</typeparam>
            <param name="field">The reflected field.</param>
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ReflectionFieldDescriptor`1.CanRead">
            <inheritdoc />
            <remarks>
            For fields, always returns <c>true</c>.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ReflectionFieldDescriptor`1.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ReflectionFieldDescriptor`1.DeclaringType">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ReflectionFieldDescriptor`1.IsAutoProperty">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ReflectionFieldDescriptor`1.IsField">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ReflectionFieldDescriptor`1.Name">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ReflectionFieldDescriptor`1.ValueType">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionFieldDescriptor`1.GetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionFieldDescriptor`1.SetValue(System.Object,`0)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Descriptors.ReflectionMethodDescriptor">
            <summary>
            Helper for creating <see cref="T:StardewUI.Framework.Descriptors.IMethodDescriptor"/> instances using reflection.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionMethodDescriptor.FromMethodInfo(System.Reflection.MethodInfo)">
            <summary>
            Creates or retrieves a descriptor for a given method.
            </summary>
            <param name="method">The method info.</param>
            <returns>The descriptor for the specified <paramref name="method"/>.</returns>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionMethodDescriptor.IsSupported(System.Reflection.MethodInfo)">
            <summary>
            Checks if a method is supported for view binding.
            </summary>
            <param name="method">The method info.</param>
            <returns><c>true</c> if a <see cref="T:StardewUI.Framework.Descriptors.ReflectionMethodDescriptor`1"/> can be created for the specified
            <paramref name="method"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionMethodDescriptor.Warmup">
            <summary>
            Pre-initializes some reflection state in order to make future invocations faster.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Descriptors.ReflectionMethodDescriptor`1">
            <summary>
            Reflection-based implementation of a method descriptor.
            </summary>
            <typeparam name="TResult">The method's return type.</typeparam>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionMethodDescriptor`1.Warmup">
            <summary>
            Pre-initializes some reflection state in order to make future invocations faster.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionMethodDescriptor`1.#ctor(System.Reflection.MethodInfo,System.Type[],System.Object[],System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:StardewUI.Framework.Descriptors.ReflectionMethodDescriptor`1"/>.
            </summary>
            <param name="method">The method to be described/invoked.</param>
            <param name="argumentAndResultTypes">An array whose elements are the method's declaring type (only if the method
            is not <c>static</c>), followed by all the normal argument types, and ending with the method's return type
            or the <see cref="T:System.Object"/> type if the method has void return.</param>
            <param name="defaultValues">An array of the default values for each argument, in the same order that they appear
            in <paramref name="argumentAndResultTypes"/> but not including the final entry for the return type.</param>
            <param name="optionalArgumentCount">Number of optional arguments at the end of the argument list.</param>
        </member>
        <member name="T:StardewUI.Framework.Descriptors.IInvoker`1">
            <summary>
            Delegate used by <see cref="T:StardewUI.Framework.Descriptors.ReflectionMethodDescriptor`1"/> to perform the method invocation.
            </summary>
            <typeparam name="TResult">The method's return type.</typeparam>
        </member>
        <member name="P:StardewUI.Framework.Descriptors.IInvoker`1.SupportsMissingArguments">
            <summary>
            Whether or not the invoker can handle <see cref="F:System.Type.Missing"/> in arguments.
            </summary>
            <remarks>
            Invokers that do not support this (i.e. any delegates) must have those arguments replaced with defaults.
            </remarks>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.IInvoker`1.Invoke(System.Object,System.Object[])">
            <summary>
            Invokes the method.
            </summary>
            <param name="target">The instance on which to invoke.</param>
            <param name="args">The arguments to provide to the method.</param>
            <returns>The method's return value.</returns>
        </member>
        <member name="T:StardewUI.Framework.Descriptors.ReflectionInvoker`1">
            <summary>
            Invoker using standard reflection.
            </summary>
            <remarks>
            Optional arguments must be provided as <see cref="F:System.Type.Missing"/>.
            </remarks>
            <typeparam name="TResult">The method's return type.</typeparam>
            <param name="method">The method to invoke.</param>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionInvoker`1.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Invoker using standard reflection.
            </summary>
            <remarks>
            Optional arguments must be provided as <see cref="F:System.Type.Missing"/>.
            </remarks>
            <typeparam name="TResult">The method's return type.</typeparam>
            <param name="method">The method to invoke.</param>
        </member>
        <member name="T:StardewUI.Framework.Descriptors.ReflectionObjectDescriptor">
            <summary>
            Object descriptor based on reflection.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ReflectionObjectDescriptor.EnableParallelCreation">
            <summary>
            Gets or sets the function used to choose whether to create member descriptors in parallel.
            </summary>
            <remarks>
            This is typically linked to the mod configuration by the mod entry.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ReflectionObjectDescriptor.MemberNames">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ReflectionObjectDescriptor.SupportsChangeNotifications">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ReflectionObjectDescriptor.TargetType">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionObjectDescriptor.ForType(System.Type,System.Boolean)">
            <summary>
            Creates or retrieves a descriptor for a given object type.
            </summary>
            <param name="type">The object type.</param>
            <param name="lazy">Whether to use lazy initialization for individual members. Lazy member initialization can
            speed up initial descriptor creation time at the cost of slower initial access times for the members, which
            typically slows down bind times. This parameter is ignored for already-cached descriptors.</param>
            <returns>The descriptor for the specified <paramref name="type"/>.</returns>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionObjectDescriptor.Invalidate(System.Type)">
            <summary>
            Invalidates a cached descriptor, removing its type from the cache.
            </summary>
            <remarks>
            This method is designed only to be invoked from an application metadata update (.NET Hot Reload, as opposed to
            StardewUI's own hot reload based on assets) and should never be called by user code.
            </remarks>
            <param name="type">The type to invalidate.</param>
            <returns><c>true</c> if the type was invalidated; <c>false</c> if no descriptor was cached.</returns>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionObjectDescriptor.#ctor(System.Type,System.Collections.Generic.IReadOnlyList{System.Type},System.Collections.Generic.IReadOnlyDictionary{System.String,StardewUI.Framework.Descriptors.MemberEntry})">
            <summary>
            Initializes a new <see cref="T:StardewUI.Framework.Descriptors.ReflectionObjectDescriptor"/> with the given target type and members.
            </summary>
            <param name="type">The <see cref="P:StardewUI.Framework.Descriptors.ReflectionObjectDescriptor.TargetType"/>.</param>
            <param name="interfaces">All interfaces implemented by the <see cref="P:StardewUI.Framework.Descriptors.ReflectionObjectDescriptor.TargetType"/>.</param>
            <param name="membersByName">Dictionary of member names to the corresponding member descriptors.</param>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionObjectDescriptor.TryGetEvent(System.String,StardewUI.Framework.Descriptors.IEventDescriptor@)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionObjectDescriptor.TryGetMethod(System.String,StardewUI.Framework.Descriptors.IMethodDescriptor@)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionObjectDescriptor.TryGetProperty(System.String,StardewUI.Framework.Descriptors.IPropertyDescriptor@)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Descriptors.ReflectionPropertyDescriptor">
            <summary>
            Helper for creating <see cref="T:StardewUI.Framework.Descriptors.ReflectionPropertyDescriptor`2"/> with types not known at compile time.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionPropertyDescriptor.FromPropertyInfo(System.Reflection.PropertyInfo)">
            <summary>
            Creates a binding property from reflected property.
            </summary>
            <param name="propertyInfo">The reflected property info.</param>
            <returns>
            A binding property of type <see cref="T:StardewUI.Framework.Descriptors.ReflectionPropertyDescriptor`2"/>, whose generic arguments are
            the property's <see cref="P:System.Reflection.MemberInfo.DeclaringType"/> and <see cref="P:System.Reflection.PropertyInfo.PropertyType"/>, respectively.
            </returns>
        </member>
        <member name="T:StardewUI.Framework.Descriptors.ReflectionPropertyDescriptor`2">
            <summary>
            Binding property based on reflection.
            </summary>
            <typeparam name="T">The type on which the property is declared.</typeparam>
            <typeparam name="TValue">The property's value type.</typeparam>
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ReflectionPropertyDescriptor`2.CanRead">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ReflectionPropertyDescriptor`2.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ReflectionPropertyDescriptor`2.DeclaringType">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ReflectionPropertyDescriptor`2.IsAutoProperty">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ReflectionPropertyDescriptor`2.IsField">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ReflectionPropertyDescriptor`2.Name">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ReflectionPropertyDescriptor`2.ValueType">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionPropertyDescriptor`2.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new <see cref="T:StardewUI.Framework.Descriptors.ReflectionPropertyDescriptor"/> from reflected property info.
            </summary>
            <param name="propertyInfo">The reflected property info.</param>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="propertyInfo"/> is incompatible with the
            <typeparamref name="T"/> or <typeparamref name="TValue"/>.</exception>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionPropertyDescriptor`2.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionPropertyDescriptor`2.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionPropertyDescriptor`2.GetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionPropertyDescriptor`2.SetValue(System.Object,`1)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Descriptors.ReflectionViewDescriptor">
            <summary>
            View descriptor based on reflection.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ReflectionViewDescriptor.MemberNames">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ReflectionViewDescriptor.SupportsChangeNotifications">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ReflectionViewDescriptor.TargetType">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionViewDescriptor.ForViewType(System.Type)">
            <summary>
            Derives a view descriptor for a given view type.
            </summary>
            <param name="viewType">The view type; must be a type implementing <see cref="T:StardewUI.IView"/>.</param>
            <returns>The descriptor for the specified <paramref name="viewType"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="viewType"/> does not implement
            <see cref="T:StardewUI.IView"/>.</exception>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionViewDescriptor.Invalidate(System.Type)">
            <summary>
            Invalidates a cached descriptor, removing its type from the cache.
            </summary>
            <remarks>
            This method is designed only to be invoked from an application metadata update (.NET Hot Reload, as opposed to
            StardewUI's own hot reload based on assets) and should never be called by user code.
            </remarks>
            <param name="type">The type to invalidate.</param>
            <returns><c>true</c> if the type was invalidated; <c>false</c> if no descriptor was cached.</returns>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionViewDescriptor.TryGetChildrenProperty(System.String,StardewUI.Framework.Descriptors.IPropertyDescriptor@)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionViewDescriptor.TryGetEvent(System.String,StardewUI.Framework.Descriptors.IEventDescriptor@)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionViewDescriptor.TryGetMethod(System.String,StardewUI.Framework.Descriptors.IMethodDescriptor@)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ReflectionViewDescriptor.TryGetProperty(System.String,StardewUI.Framework.Descriptors.IPropertyDescriptor@)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Descriptors.ThisPropertyDescriptor">
            <summary>
            Helper for obtaining a <see cref="T:StardewUI.Framework.Descriptors.ThisPropertyDescriptor`1"/> using a type known only at runtime.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ThisPropertyDescriptor.ForTypeUncached(System.Type)">
            <summary>
            Gets the <see cref="T:StardewUI.Framework.Descriptors.ThisPropertyDescriptor`1"/> corresponding to a specified type.
            </summary>
            <param name="type">The object type.</param>
            <returns>The <see cref="T:StardewUI.Framework.Descriptors.ThisPropertyDescriptor`1"/> instance for the given <paramref name="type"/>.</returns>
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ThisPropertyDescriptor.Warmup">
            <summary>
            Pre-initializes some reflection state in order to make future invocations faster.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Descriptors.ThisPropertyDescriptor`1">
            <summary>
            Special descriptor used for "this" references in argument/attribute bindings, allowing them to reference the current
            context instead of a property on it.
            </summary>
            <typeparam name="T">The object type.</typeparam>
        </member>
        <member name="F:StardewUI.Framework.Descriptors.ThisPropertyDescriptor`1.Instance">
            <summary>
            Gets the singleton descriptor instance for the current object/property type.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ThisPropertyDescriptor`1.CanRead">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ThisPropertyDescriptor`1.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ThisPropertyDescriptor`1.DeclaringType">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ThisPropertyDescriptor`1.IsAutoProperty">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ThisPropertyDescriptor`1.IsField">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ThisPropertyDescriptor`1.Name">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Descriptors.ThisPropertyDescriptor`1.ValueType">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ThisPropertyDescriptor`1.GetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Descriptors.ThisPropertyDescriptor`1.SetValue(System.Object,`0)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Diagnostics.TraceConfig">
            <summary>
            Configures the tracing behavior for StardewUI.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Diagnostics.TraceConfig.EnableHudNotifications">
            <summary>
            Whether to show HUD notifications when tracing is started or stopped.
            </summary>
            <remarks>
            Notifications are always written to the SMAPI console log, but will not show in-game unless this setting is
            enabled.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.Diagnostics.TraceConfig.OutputDirectory">
            <summary>
            Directory where traces should be written.
            </summary>
            <remarks>
            Unless an absolute path is specified, the directory is relative to Stardew's data directory, i.e. the same
            directory where <c>Saves</c> and <c>ErrorLogs</c> are written.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.Diagnostics.TraceConfig.ToggleHotkeys">
            <summary>
            Hotkey(s) used to toggle tracing.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Diagnostics.TraceFile">
            <summary>
            Format of a trace file compatible with speedscope.
            </summary>
            <seealso href="https://github.com/jlfwong/speedscope"/>
        </member>
        <member name="P:StardewUI.Framework.Diagnostics.TraceFile.CreationDate">
            <summary>
            Exact date and time when the trace was started.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Diagnostics.TraceFile.SchemaUrl">
            <summary>
            JSON schema URL; required by the Speedscope web tool.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Diagnostics.TraceFile.Shared">
            <summary>
            Shared trace data, containing the frames or slice names.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Diagnostics.TraceFile.Profiles">
            <summary>
            List of profiles; each profile corresponds to a running thread.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Diagnostics.TraceFile.Exporter">
            <summary>
            The name and version of the exporting mod (i.e. StardewUI).
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Diagnostics.TraceFile.CloseFrame(System.Int32)">
            <summary>
            Appends an event that closes a frame previously opened with <see cref="M:StardewUI.Framework.Diagnostics.TraceFile.OpenFrame(System.String)"/>.
            </summary>
            <param name="frame">The index of the tracked frame in <see cref="P:StardewUI.Framework.Diagnostics.TraceShared.Frames"/>.</param>
        </member>
        <member name="M:StardewUI.Framework.Diagnostics.TraceFile.OpenFrame(System.String)">
            <summary>
            Adds a new <see cref="T:StardewUI.Framework.Diagnostics.TraceFrame"/> and <see cref="T:StardewUI.Framework.Diagnostics.TraceEvent"/> to open it, and returns the frame index to be used
            subsequently with <see cref="M:StardewUI.Framework.Diagnostics.TraceFile.CloseFrame(System.Int32)"/>.
            </summary>
            <param name="name">Name of the method or operation being traced.</param>
            <returns>The frame index, to be used with <see cref="M:StardewUI.Framework.Diagnostics.TraceFile.CloseFrame(System.Int32)"/> when the operation completes.</returns>
        </member>
        <member name="T:StardewUI.Framework.Diagnostics.TraceShared">
            <summary>
            Data shared between profiles.
            </summary>
            <remarks>
            StardewUI only uses a single profile, but this structure is required by speedscope.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.Diagnostics.TraceShared.Frames">
            <summary>
            The captured frames, or slices.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Diagnostics.TraceFrame">
            <summary>
            Represents a single captured frame, or slice.
            </summary>
            <param name="Name">Name of the method or operation that was measured.</param>
        </member>
        <member name="M:StardewUI.Framework.Diagnostics.TraceFrame.#ctor(System.String)">
            <summary>
            Represents a single captured frame, or slice.
            </summary>
            <param name="Name">Name of the method or operation that was measured.</param>
        </member>
        <member name="P:StardewUI.Framework.Diagnostics.TraceFrame.Name">
            <summary>Name of the method or operation that was measured.</summary>
        </member>
        <member name="T:StardewUI.Framework.Diagnostics.TraceProfile">
            <summary>
            A single profile in a trace.
            </summary>
            <remarks>
            For speedscope purposes, this is always an "EventedProfile". StardewUI does not use sampled profiles.
            </remarks>
            <param name="name">The <see cref="P:StardewUI.Framework.Diagnostics.TraceProfile.Name"/> of the profile, used to identify the thread.</param>
            <param name="startValue">The timestamp when tracing was started, in the specified <see cref="P:StardewUI.Framework.Diagnostics.TraceProfile.Unit"/> (default:
            microseconds).</param>
        </member>
        <member name="M:StardewUI.Framework.Diagnostics.TraceProfile.#ctor(System.String,System.Int64)">
            <summary>
            A single profile in a trace.
            </summary>
            <remarks>
            For speedscope purposes, this is always an "EventedProfile". StardewUI does not use sampled profiles.
            </remarks>
            <param name="name">The <see cref="P:StardewUI.Framework.Diagnostics.TraceProfile.Name"/> of the profile, used to identify the thread.</param>
            <param name="startValue">The timestamp when tracing was started, in the specified <see cref="P:StardewUI.Framework.Diagnostics.TraceProfile.Unit"/> (default:
            microseconds).</param>
        </member>
        <member name="P:StardewUI.Framework.Diagnostics.TraceProfile.Type">
            <summary>
            Discriminator for the profile type. In StardewUI, this is always <c>evented</c>.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Diagnostics.TraceProfile.Name">
            <summary>
            Name of the profile. Used to identify the thread.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Diagnostics.TraceProfile.Unit">
            <summary>
            Unit of measurement for all time values.
            </summary>
            <remarks>
            StardewUI's traces are always measured in <c>microseconds</c>.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.Diagnostics.TraceProfile.StartValue">
            <summary>
            The timestamp when tracing was started, in the specified <see cref="P:StardewUI.Framework.Diagnostics.TraceProfile.Unit"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Diagnostics.TraceProfile.EndValue">
            <summary>
            The timestamp when tracing ended, in the specified <see cref="P:StardewUI.Framework.Diagnostics.TraceProfile.Unit"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Diagnostics.TraceProfile.Events">
            <summary>
            The events recorded for this profile.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Diagnostics.TraceEvent">
            <summary>
            Defines a single trace event.
            </summary>
            <remarks>
            StardewUI uses only evented profiles, so the data is either for an <c>OpenFrameEvent</c> or <c>CloseFrameEvent</c>.
            </remarks>
            <param name="Type">Discriminator for the event type; <c>'O'</c> for open frame or <c>'C'</c> for close.</param>
            <param name="At">Time when the event was logged, in the profile's <see cref="P:StardewUI.Framework.Diagnostics.TraceProfile.Unit"/> (i.e. in
            microseconds for any StardewUI event).</param>
            <param name="Frame">Index into the <see cref="P:StardewUI.Framework.Diagnostics.TraceShared.Frames"/> identifying which frame this event refers to.
            Used to correlate open and close events.</param>
        </member>
        <member name="M:StardewUI.Framework.Diagnostics.TraceEvent.#ctor(System.Char,System.Int64,System.Int32)">
            <summary>
            Defines a single trace event.
            </summary>
            <remarks>
            StardewUI uses only evented profiles, so the data is either for an <c>OpenFrameEvent</c> or <c>CloseFrameEvent</c>.
            </remarks>
            <param name="Type">Discriminator for the event type; <c>'O'</c> for open frame or <c>'C'</c> for close.</param>
            <param name="At">Time when the event was logged, in the profile's <see cref="P:StardewUI.Framework.Diagnostics.TraceProfile.Unit"/> (i.e. in
            microseconds for any StardewUI event).</param>
            <param name="Frame">Index into the <see cref="P:StardewUI.Framework.Diagnostics.TraceShared.Frames"/> identifying which frame this event refers to.
            Used to correlate open and close events.</param>
        </member>
        <member name="P:StardewUI.Framework.Diagnostics.TraceEvent.Type">
            <summary>Discriminator for the event type; <c>'O'</c> for open frame or <c>'C'</c> for close.</summary>
        </member>
        <member name="P:StardewUI.Framework.Diagnostics.TraceEvent.At">
            <summary>Time when the event was logged, in the profile's <see cref="P:StardewUI.Framework.Diagnostics.TraceProfile.Unit"/> (i.e. in
            microseconds for any StardewUI event).</summary>
        </member>
        <member name="P:StardewUI.Framework.Diagnostics.TraceEvent.Frame">
            <summary>Index into the <see cref="P:StardewUI.Framework.Diagnostics.TraceShared.Frames"/> identifying which frame this event refers to.
            Used to correlate open and close events.</summary>
        </member>
        <member name="T:StardewUI.Framework.Diagnostics.TraceWriter">
            <summary>
            Maintains the state of a single trace and writes it to disk when completed.
            </summary>
            <param name="mod">Info about the requesting mod.</param>
            <param name="configSelector">Function to retrieve the current tracing configuration.</param>
        </member>
        <member name="M:StardewUI.Framework.Diagnostics.TraceWriter.#ctor(StardewModdingAPI.IManifest,System.Func{StardewUI.Framework.Diagnostics.TraceConfig})">
            <summary>
            Maintains the state of a single trace and writes it to disk when completed.
            </summary>
            <param name="mod">Info about the requesting mod.</param>
            <param name="configSelector">Function to retrieve the current tracing configuration.</param>
        </member>
        <member name="P:StardewUI.Framework.Diagnostics.TraceWriter.IsTracing">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Diagnostics.TraceWriter.BeginSlice(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Diagnostics.TraceWriter.BeginTrace">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Diagnostics.TraceWriter.EndTrace">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Dom.IArgument">
            <summary>
            An argument to a method call, e.g. as used in an <see cref="T:StardewUI.Framework.Dom.IEvent"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Dom.IArgument.ContextRedirect">
            <summary>
            Specifies the redirect to use for a context binding, if one was specified and if the <see cref="P:StardewUI.Framework.Dom.IArgument.Type"/> is
            <see cref="F:StardewUI.Framework.Grammar.ArgumentExpressionType.ContextBinding"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Dom.IArgument.Expression">
            <summary>
            The argument value or binding path, not including punctuation such as quotes or prefixes.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Dom.IArgument.Type">
            <summary>
            The type of argument, indicating how it is to be evaluated in any method calls.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Dom.IArgument.Print(System.Text.StringBuilder)">
            <summary>
            Prints the textual representation of this argument.
            </summary>
            <param name="sb">Builder to receive the argument's text output.</param>
        </member>
        <member name="T:StardewUI.Framework.Dom.SArgument">
            <summary>
            Record implementation of an <see cref="T:StardewUI.Framework.Dom.IArgument"/>.
            </summary>
            <param name="Type">The type of argument, indicating how it is to be evaluated in any method calls.</param>
            <param name="Expression">The argument value or binding path, not including punctuation such as quotes or
            prefixes.</param>
            <param name="ContextRedirect">Specifies the redirect to use for a context binding, if one was specified and if the
            <see cref="P:StardewUI.Framework.Dom.SArgument.Type"/> is <see cref="F:StardewUI.Framework.Grammar.ArgumentExpressionType.ContextBinding"/>.</param>
        </member>
        <member name="M:StardewUI.Framework.Dom.SArgument.#ctor(StardewUI.Framework.Grammar.ArgumentExpressionType,System.String,StardewUI.Framework.Dom.ContextRedirect)">
            <summary>
            Record implementation of an <see cref="T:StardewUI.Framework.Dom.IArgument"/>.
            </summary>
            <param name="Type">The type of argument, indicating how it is to be evaluated in any method calls.</param>
            <param name="Expression">The argument value or binding path, not including punctuation such as quotes or
            prefixes.</param>
            <param name="ContextRedirect">Specifies the redirect to use for a context binding, if one was specified and if the
            <see cref="P:StardewUI.Framework.Dom.SArgument.Type"/> is <see cref="F:StardewUI.Framework.Grammar.ArgumentExpressionType.ContextBinding"/>.</param>
        </member>
        <member name="P:StardewUI.Framework.Dom.SArgument.Type">
            <summary>The type of argument, indicating how it is to be evaluated in any method calls.</summary>
        </member>
        <member name="P:StardewUI.Framework.Dom.SArgument.Expression">
            <summary>The argument value or binding path, not including punctuation such as quotes or
            prefixes.</summary>
        </member>
        <member name="P:StardewUI.Framework.Dom.SArgument.ContextRedirect">
            <summary>Specifies the redirect to use for a context binding, if one was specified and if the
            <see cref="P:StardewUI.Framework.Dom.SArgument.Type"/> is <see cref="F:StardewUI.Framework.Grammar.ArgumentExpressionType.ContextBinding"/>.</summary>
        </member>
        <member name="M:StardewUI.Framework.Dom.SArgument.#ctor(StardewUI.Framework.Grammar.Argument)">
            <summary>
            Initializes a new <see cref="T:StardewUI.Framework.Dom.SArgument"/> from the data of a parsed argument.
            </summary>
            <param name="argument">The parsed argument.</param>
        </member>
        <member name="T:StardewUI.Framework.Dom.IAttribute">
            <summary>
            Attribute of a StarML element.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Dom.IAttribute.ContextRedirect">
            <summary>
            Specifies the redirect to use for a context binding, if applicable and if the <see cref="P:StardewUI.Framework.Dom.IAttribute.ValueType"/> is one of
            the context binding types.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Dom.IAttribute.IsNegated">
            <summary>
            Whether the attribute has a negation. Validity and behavior depend on the specific attribute.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Dom.IAttribute.Name">
            <summary>
            The attribute name.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Dom.IAttribute.Type">
            <summary>
            The type of the attribute itself, defining how the <see cref="P:StardewUI.Framework.Dom.IAttribute.Name"/> should be interpreted.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Dom.IAttribute.Value">
            <summary>
            The literal value text.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Dom.IAttribute.ValueType">
            <summary>
            The type of the value expression, defining how the <see cref="P:StardewUI.Framework.Dom.IAttribute.Value"/> should be interpreted.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Dom.IAttribute.Print(System.Text.StringBuilder)">
            <summary>
            Prints the textual representation of this node.
            </summary>
            <param name="sb">Builder to receive the attribute's text output.</param>
        </member>
        <member name="T:StardewUI.Framework.Dom.ContextRedirect">
            <summary>
            Describes how to redirect the target context of any <see cref="T:StardewUI.Framework.Dom.IAttribute"/> whose
            <see cref="P:StardewUI.Framework.Dom.IAttribute.ValueType"/> is one of the <see cref="M:StardewUI.Framework.Grammar.AttributeValueTypeExtensions.IsContextBinding(StardewUI.Framework.Grammar.AttributeValueType)"/>
            matching types.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Dom.ContextRedirect.FromParts(System.UInt32,System.ReadOnlySpan{System.Char})">
            <summary>
            Creates an optional <see cref="T:StardewUI.Framework.Dom.ContextRedirect"/> using the constituent parts parsed from a grammar element such
            as an <see cref="T:StardewUI.Framework.Grammar.Attribute"/>.
            </summary>
            <param name="parentDepth">Number of parents to traverse.</param>
            <param name="parentType">The <see cref="P:System.Reflection.MemberInfo.Name"/> of the target ancestor's
            <see cref="T:System.Type"/>.</param>
            <returns>A new <see cref="T:StardewUI.Framework.Dom.ContextRedirect"/> that performs the requested redirect, or <c>null</c> if the
            arguments would cause no redirection to occur.</returns>
        </member>
        <member name="M:StardewUI.Framework.Dom.ContextRedirect.Print(System.Text.StringBuilder)">
            <summary>
            Prints the textual representation of this redirect.
            </summary>
            <param name="sb">Builder to receive the redirect's text output.</param>
        </member>
        <member name="T:StardewUI.Framework.Dom.ContextRedirect.Distance">
            <summary>
            Redirects to an ancestor context by walking up a specified number of levels.
            </summary>
            <param name="Depth">Number of parents to traverse.</param>
        </member>
        <member name="M:StardewUI.Framework.Dom.ContextRedirect.Distance.#ctor(System.UInt32)">
            <summary>
            Redirects to an ancestor context by walking up a specified number of levels.
            </summary>
            <param name="Depth">Number of parents to traverse.</param>
        </member>
        <member name="P:StardewUI.Framework.Dom.ContextRedirect.Distance.Depth">
            <summary>Number of parents to traverse.</summary>
        </member>
        <member name="M:StardewUI.Framework.Dom.ContextRedirect.Distance.Print(System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Dom.ContextRedirect.Type">
            <summary>
            Redirects to the nearest ancestor matching a specified type.
            </summary>
            <param name="TypeName">The <see cref="P:System.Reflection.MemberInfo.Name"/> of the target ancestor's
            <see cref="T:System.Type"/>.</param>
        </member>
        <member name="M:StardewUI.Framework.Dom.ContextRedirect.Type.#ctor(System.String)">
            <summary>
            Redirects to the nearest ancestor matching a specified type.
            </summary>
            <param name="TypeName">The <see cref="P:System.Reflection.MemberInfo.Name"/> of the target ancestor's
            <see cref="T:System.Type"/>.</param>
        </member>
        <member name="P:StardewUI.Framework.Dom.ContextRedirect.Type.TypeName">
            <summary>The <see cref="P:System.Reflection.MemberInfo.Name"/> of the target ancestor's
            <see cref="T:System.Type"/>.</summary>
        </member>
        <member name="M:StardewUI.Framework.Dom.ContextRedirect.Type.Print(System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Dom.SAttribute">
            <summary>
            Record implementation of a StarML <see cref="T:StardewUI.Framework.Dom.IAttribute"/>.
            </summary>
            <remarks>
            Must be separate from the grammar's <see cref="T:StardewUI.Framework.Grammar.Attribute"/> since <c>ref struct</c>s currently are not allowed to
            implement interfaces.
            </remarks>
            <param name="Name">The attribute name.</param>
            <param name="Value">The literal value text.</param>
            <param name="Type">The type of the attribute itself, defining how the <paramref name="Name"/> should be
            interpreted.</param>
            <param name="ValueType">The type of the value expression, defining how the <paramref name="Value"/> should be
            interpreted.</param>
            <param name="IsNegated">Whether the attribute has a negation. Validity and behavior depend on the specific
            attribute.</param>
            <param name="ContextRedirect">Specifies the redirect to use for a context binding, if applicable and if the
            <paramref name="ValueType"/> is one of the context binding types.</param>
        </member>
        <member name="M:StardewUI.Framework.Dom.SAttribute.#ctor(System.String,System.String,StardewUI.Framework.Grammar.AttributeType,StardewUI.Framework.Grammar.AttributeValueType,System.Boolean,StardewUI.Framework.Dom.ContextRedirect)">
            <summary>
            Record implementation of a StarML <see cref="T:StardewUI.Framework.Dom.IAttribute"/>.
            </summary>
            <remarks>
            Must be separate from the grammar's <see cref="T:StardewUI.Framework.Grammar.Attribute"/> since <c>ref struct</c>s currently are not allowed to
            implement interfaces.
            </remarks>
            <param name="Name">The attribute name.</param>
            <param name="Value">The literal value text.</param>
            <param name="Type">The type of the attribute itself, defining how the <paramref name="Name"/> should be
            interpreted.</param>
            <param name="ValueType">The type of the value expression, defining how the <paramref name="Value"/> should be
            interpreted.</param>
            <param name="IsNegated">Whether the attribute has a negation. Validity and behavior depend on the specific
            attribute.</param>
            <param name="ContextRedirect">Specifies the redirect to use for a context binding, if applicable and if the
            <paramref name="ValueType"/> is one of the context binding types.</param>
        </member>
        <member name="P:StardewUI.Framework.Dom.SAttribute.Name">
            <summary>The attribute name.</summary>
        </member>
        <member name="P:StardewUI.Framework.Dom.SAttribute.Value">
            <summary>The literal value text.</summary>
        </member>
        <member name="P:StardewUI.Framework.Dom.SAttribute.Type">
            <summary>The type of the attribute itself, defining how the <paramref name="Name"/> should be
            interpreted.</summary>
        </member>
        <member name="P:StardewUI.Framework.Dom.SAttribute.ValueType">
            <summary>The type of the value expression, defining how the <paramref name="Value"/> should be
            interpreted.</summary>
        </member>
        <member name="P:StardewUI.Framework.Dom.SAttribute.IsNegated">
            <summary>Whether the attribute has a negation. Validity and behavior depend on the specific
            attribute.</summary>
        </member>
        <member name="P:StardewUI.Framework.Dom.SAttribute.ContextRedirect">
            <summary>Specifies the redirect to use for a context binding, if applicable and if the
            <paramref name="ValueType"/> is one of the context binding types.</summary>
        </member>
        <member name="M:StardewUI.Framework.Dom.SAttribute.#ctor(StardewUI.Framework.Grammar.Attribute)">
            <summary>
            Initializes a new <see cref="T:StardewUI.Framework.Dom.SAttribute"/> from the data of a parsed attribute.
            </summary>
            <param name="attribute">The parsed attribute.</param>
        </member>
        <member name="M:StardewUI.Framework.Dom.SAttribute.AsArgument">
            <summary>
            Creates a method argument that will receive the same value as this attribute when bound.
            </summary>
            <returns>The converted argument.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the attribute's <see cref="P:StardewUI.Framework.Dom.SAttribute.Type"/> or
            <see cref="P:StardewUI.Framework.Dom.SAttribute.ValueType"/> cannot be used in an <see cref="T:StardewUI.Framework.Dom.SArgument"/>, i.e. because there is no equivalent
            argument behavior.</exception>
        </member>
        <member name="M:StardewUI.Framework.Dom.SAttribute.WithNameAndType(System.String,StardewUI.Framework.Grammar.AttributeType)">
            <summary>
            Creates a copy of this attribute with a different <see cref="P:StardewUI.Framework.Dom.SAttribute.Name"/> and <see cref="P:StardewUI.Framework.Dom.SAttribute.Type"/>, and all other
            properties the same.
            </summary>
            <param name="name">The new attribute name.</param>
            <param name="type">The new attribute type.</param>
            <returns>The renamed attribute.</returns>
        </member>
        <member name="T:StardewUI.Framework.Dom.Document">
            <summary>
            A standalone StarML document.
            </summary>
            <param name="Root">The primary content node.</param>
            <param name="Templates">List of template nodes for inline expansion.</param>
        </member>
        <member name="M:StardewUI.Framework.Dom.Document.#ctor(StardewUI.Framework.Dom.SNode,System.Collections.Generic.IReadOnlyList{StardewUI.Framework.Dom.SNode})">
            <summary>
            A standalone StarML document.
            </summary>
            <param name="Root">The primary content node.</param>
            <param name="Templates">List of template nodes for inline expansion.</param>
        </member>
        <member name="P:StardewUI.Framework.Dom.Document.Root">
            <summary>The primary content node.</summary>
        </member>
        <member name="P:StardewUI.Framework.Dom.Document.Templates">
            <summary>List of template nodes for inline expansion.</summary>
        </member>
        <member name="M:StardewUI.Framework.Dom.Document.Parse(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a <see cref="T:StardewUI.Framework.Dom.Document"/> from its original markup text.
            </summary>
            <param name="text">The StarML markup text.</param>
            <returns>The parsed document as a DOM tree.</returns>
            <exception cref="T:StardewUI.Framework.Grammar.ParserException">Thrown when any invalid markup is encountered.</exception>
        </member>
        <member name="T:StardewUI.Framework.Dom.DocumentLoader">
            <summary>
            Utility for loading <see cref="T:StardewUI.Framework.Dom.Document"/>s from memory or files.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Dom.DocumentLoader.LoadFromFile(System.IO.FileInfo)">
            <summary>
            Loads a <see cref="T:StardewUI.Framework.Dom.Document"/> from markup in a file.
            </summary>
            <remarks>
            This method is designed to be called from SMAPI's content loader, and throws exceptions normally associated with
            SMAPI's content pipeline.
            </remarks>
            <param name="file">The file containing the document markup.</param>
            <returns>The parsed <see cref="T:StardewUI.Framework.Dom.Document"/>.</returns>
            <exception cref="T:Microsoft.Xna.Framework.Content.ContentLoadException">Thrown when the document could not be parsed. The details of the
            exception are logged to the SMAPI console before throwing.</exception>
        </member>
        <member name="M:StardewUI.Framework.Dom.DocumentLoader.TryLoadFromFileAsync(System.IO.FileInfo)">
            <summary>
            Loads a <see cref="T:StardewUI.Framework.Dom.Document"/> from markup in a file using asynchronous I/O.
            </summary>
            <param name="file">The file containing the document markup.</param>
            <returns>The parsed <see cref="T:StardewUI.Framework.Dom.Document"/>, or <c>null</c> if the file does not exist or the markup contained
            in the file is invalid.</returns>
        </member>
        <member name="T:StardewUI.Framework.Dom.IElement">
            <summary>
            Element in a StarML document, including the tag and all enclosed attributes.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Dom.IElement.Tag">
            <summary>
            The parsed tag name.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Dom.IElement.Attributes">
            <summary>
            The parsed list of attributes applied to this instance of the tag.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Dom.IElement.Events">
            <summary>
            The parsed list of events applied to this instance of the tag.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Dom.IElement.Print(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Prints the textual representation of this element.
            </summary>
            <param name="sb">Builder to receive the element's text output.</param>
            <param name="asSelfClosing">Whether to print the element as a self-closing tag, i.e. whether to include a
            <c>/</c> character before the closing <c>&gt;</c>.</param>
        </member>
        <member name="M:StardewUI.Framework.Dom.IElement.PrintClosingTag(System.Text.StringBuilder)">
            <summary>
            Prints the closing tag for this element.
            </summary>
            <param name="sb">Builder to receive the element's text output.</param>
        </member>
        <member name="T:StardewUI.Framework.Dom.SElement">
            <summary>
            Record implementation of a StarML <see cref="T:StardewUI.Framework.Dom.IElement"/>.
            </summary>
            <param name="Tag">The tag name.</param>
            <param name="Attributes">The attributes applied to this tag.</param>
            <param name="Events">The events applied to this tag.</param>
        </member>
        <member name="M:StardewUI.Framework.Dom.SElement.#ctor(System.String,System.Collections.Generic.IReadOnlyList{StardewUI.Framework.Dom.SAttribute},System.Collections.Generic.IReadOnlyList{StardewUI.Framework.Dom.SEvent})">
            <summary>
            Record implementation of a StarML <see cref="T:StardewUI.Framework.Dom.IElement"/>.
            </summary>
            <param name="Tag">The tag name.</param>
            <param name="Attributes">The attributes applied to this tag.</param>
            <param name="Events">The events applied to this tag.</param>
        </member>
        <member name="P:StardewUI.Framework.Dom.SElement.Tag">
            <summary>The tag name.</summary>
        </member>
        <member name="P:StardewUI.Framework.Dom.SElement.Attributes">
            <summary>The attributes applied to this tag.</summary>
        </member>
        <member name="P:StardewUI.Framework.Dom.SElement.Events">
            <summary>The events applied to this tag.</summary>
        </member>
        <member name="T:StardewUI.Framework.Dom.IEvent">
            <summary>
            Event wire-up in a StarML element.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Dom.IEvent.Arguments">
            <summary>
            The arguments to the event handler.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Dom.IEvent.ContextRedirect">
            <summary>
            Specifies the redirect to use for the context on which the method named <see cref="P:StardewUI.Framework.Dom.IEvent.HandlerName"/> should exist.
            </summary>
            <remarks>
            Applies to the handler method itself but <b>not</b> any of the <see cref="P:StardewUI.Framework.Dom.IEvent.Arguments"/>, which specify their own
            redirects when applicable.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.Dom.IEvent.HandlerName">
            <summary>
            The name of the event handler (method) to run on the bound or redirected context.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Dom.IEvent.Name">
            <summary>
            The event name, i.e. name of the <c>event</c> field on the target <see cref="T:StardewUI.IView"/>.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Dom.IEvent.Print(System.Text.StringBuilder)">
            <summary>
            Prints the textual representation of this event attribute.
            </summary>
            <param name="sb">Builder to receive the attribute's text output.</param>
        </member>
        <member name="T:StardewUI.Framework.Dom.SEvent">
            <summary>
            An event attribute in a StarML document.
            </summary>
            <param name="Name">The event name, i.e. name of the <c>event</c> field on the target <see cref="T:StardewUI.IView"/>.</param>
            <param name="HandlerName">The name of the event handler (method) to run on the bound or redirected context.</param>
            <param name="Arguments">The arguments to the event handler.</param>
            <param name="ContextRedirect">The redirect to use for the context on which the method named
            <paramref name="HandlerName"/> should exist.</param>
        </member>
        <member name="M:StardewUI.Framework.Dom.SEvent.#ctor(System.String,System.String,System.Collections.Generic.IReadOnlyList{StardewUI.Framework.Dom.SArgument},StardewUI.Framework.Dom.ContextRedirect)">
            <summary>
            An event attribute in a StarML document.
            </summary>
            <param name="Name">The event name, i.e. name of the <c>event</c> field on the target <see cref="T:StardewUI.IView"/>.</param>
            <param name="HandlerName">The name of the event handler (method) to run on the bound or redirected context.</param>
            <param name="Arguments">The arguments to the event handler.</param>
            <param name="ContextRedirect">The redirect to use for the context on which the method named
            <paramref name="HandlerName"/> should exist.</param>
        </member>
        <member name="P:StardewUI.Framework.Dom.SEvent.Name">
            <summary>The event name, i.e. name of the <c>event</c> field on the target <see cref="T:StardewUI.IView"/>.</summary>
        </member>
        <member name="P:StardewUI.Framework.Dom.SEvent.HandlerName">
            <summary>The name of the event handler (method) to run on the bound or redirected context.</summary>
        </member>
        <member name="P:StardewUI.Framework.Dom.SEvent.Arguments">
            <summary>The arguments to the event handler.</summary>
        </member>
        <member name="P:StardewUI.Framework.Dom.SEvent.ContextRedirect">
            <summary>The redirect to use for the context on which the method named
            <paramref name="HandlerName"/> should exist.</summary>
        </member>
        <member name="M:StardewUI.Framework.Dom.SEvent.#ctor(StardewUI.Framework.Grammar.Event,System.Collections.Generic.IReadOnlyList{StardewUI.Framework.Dom.SArgument})">
            <summary>
            Initializes a new <see cref="T:StardewUI.Framework.Dom.SArgument"/> from the data of a parsed argument.
            </summary>
            <param name="e">The parsed event.</param>
            <param name="arguments">The event arguments.</param>
        </member>
        <member name="T:StardewUI.Framework.Dom.INodeTransformer">
            <summary>
            Provides a method to transform nodes into other nodes.
            </summary>
            <remarks>
            Transformers are a form of preprocessing that apply before a view is bound; they operate on the parsed DOM content
            but not the runtime/bound nodes.
            </remarks>
        </member>
        <member name="M:StardewUI.Framework.Dom.INodeTransformer.Transform(StardewUI.Framework.Dom.SNode)">
            <summary>
            Transforms a node.
            </summary>
            <param name="source">The node to transform.</param>
            <returns>The transformed nodes, if any transform was applied, or a single-element list with the original
            <paramref name="source"/> if the transformation is not applicable to this node.</returns>
        </member>
        <member name="T:StardewUI.Framework.Dom.SNode">
            <summary>
            A node in a StarML document, encapsulating the tag, its attributes, and all child nodes.
            </summary>
            <remarks>
            This is also the root of a <see cref="T:StardewUI.Framework.Dom.Document"/> and the visible result of a parser. While there is some memory and
            performance cost associated with this intermediate representation before assembling the
            <see cref="T:StardewUI.Framework.Binding.ViewNode"/>, it allows for document assets to be edited (patched) prior to binding.
            </remarks>
            <param name="Element">The element data for this node.</param>
            <param name="ChildNodes">The children of this node.</param>
        </member>
        <member name="M:StardewUI.Framework.Dom.SNode.#ctor(StardewUI.Framework.Dom.SElement,System.Collections.Generic.IReadOnlyList{StardewUI.Framework.Dom.SNode})">
            <summary>
            A node in a StarML document, encapsulating the tag, its attributes, and all child nodes.
            </summary>
            <remarks>
            This is also the root of a <see cref="T:StardewUI.Framework.Dom.Document"/> and the visible result of a parser. While there is some memory and
            performance cost associated with this intermediate representation before assembling the
            <see cref="T:StardewUI.Framework.Binding.ViewNode"/>, it allows for document assets to be edited (patched) prior to binding.
            </remarks>
            <param name="Element">The element data for this node.</param>
            <param name="ChildNodes">The children of this node.</param>
        </member>
        <member name="P:StardewUI.Framework.Dom.SNode.Element">
            <summary>The element data for this node.</summary>
        </member>
        <member name="P:StardewUI.Framework.Dom.SNode.ChildNodes">
            <summary>The children of this node.</summary>
        </member>
        <member name="P:StardewUI.Framework.Dom.SNode.Attributes">
            <summary>
            Gets the attributes of the associated <see cref="P:StardewUI.Framework.Dom.SNode.Element"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Dom.SNode.Tag">
            <summary>
            Gets the tag of the associated <see cref="P:StardewUI.Framework.Dom.SNode.Element"/>.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Dom.SNode.Parse(StardewUI.Framework.Grammar.DocumentReader@)">
            <summary>
            Parses a node from the current state of a document reader.
            </summary>
            <param name="reader">The reader state, represent the content and current position.</param>
            <returns></returns>
            <exception cref="T:StardewUI.Framework.Grammar.ParserException">Thrown when any invalid markup is encountered.</exception>
        </member>
        <member name="T:StardewUI.Framework.Dom.TemplateNodeTransformer">
            <summary>
            Transforms a <c>template</c> node based on the structure (attributes, children, etc.) of the instantiating node.
            </summary>
            <param name="template">The template node.</param>
        </member>
        <member name="M:StardewUI.Framework.Dom.TemplateNodeTransformer.#ctor(StardewUI.Framework.Dom.SNode)">
            <summary>
            Transforms a <c>template</c> node based on the structure (attributes, children, etc.) of the instantiating node.
            </summary>
            <param name="template">The template node.</param>
        </member>
        <member name="M:StardewUI.Framework.Dom.TemplateNodeTransformer.Transform(StardewUI.Framework.Dom.SNode)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Grammar.Argument">
            <summary>
            A complete method argument parsed from StarML.
            </summary>
            <param name="expressionType">The type describing how <paramref name="expression"/> should be interpreted.</param>
            <param name="expression">The literal expression text.</param>
            <param name="parentDepth">The depth to walk - i.e. number of parents to traverse - to find the context on which to
            evaluate the <paramref name="expression"/> when the <paramref name="expressionType"/> is
            <see cref="F:StardewUI.Framework.Grammar.ArgumentExpressionType.ContextBinding"/>.</param>
            <param name="parentType">The type name of the parent to walk up to for a context redirect. Exclusive with
            <paramref name="parentDepth"/> and only valid if the <paramref name="expressionType"/> is
            <see cref="F:StardewUI.Framework.Grammar.ArgumentExpressionType.ContextBinding"/>.</param>
        </member>
        <member name="M:StardewUI.Framework.Grammar.Argument.#ctor(StardewUI.Framework.Grammar.ArgumentExpressionType,System.ReadOnlySpan{System.Char},System.UInt32,System.ReadOnlySpan{System.Char})">
            <summary>
            A complete method argument parsed from StarML.
            </summary>
            <param name="expressionType">The type describing how <paramref name="expression"/> should be interpreted.</param>
            <param name="expression">The literal expression text.</param>
            <param name="parentDepth">The depth to walk - i.e. number of parents to traverse - to find the context on which to
            evaluate the <paramref name="expression"/> when the <paramref name="expressionType"/> is
            <see cref="F:StardewUI.Framework.Grammar.ArgumentExpressionType.ContextBinding"/>.</param>
            <param name="parentType">The type name of the parent to walk up to for a context redirect. Exclusive with
            <paramref name="parentDepth"/> and only valid if the <paramref name="expressionType"/> is
            <see cref="F:StardewUI.Framework.Grammar.ArgumentExpressionType.ContextBinding"/>.</param>
        </member>
        <member name="P:StardewUI.Framework.Grammar.Argument.Expression">
            <summary>
            The literal expression text.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Grammar.Argument.ExpressionType">
            <summary>
            The type describing how <see cref="P:StardewUI.Framework.Grammar.Argument.Expression"/> should be interpreted.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Grammar.Argument.ParentDepth">
            <summary>
            The depth to walk - i.e. number of parents to traverse - to find the context on which to evaluate the
            <see cref="P:StardewUI.Framework.Grammar.Argument.Expression"/> when the <see cref="P:StardewUI.Framework.Grammar.Argument.ExpressionType"/> is
            <see cref="F:StardewUI.Framework.Grammar.ArgumentExpressionType.ContextBinding"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Grammar.Argument.ParentType">
            <summary>
            The type name of the parent to walk up to for a context redirect. Exclusive with <see cref="P:StardewUI.Framework.Grammar.Argument.ParentDepth"/> and
            only valid if the <see cref="P:StardewUI.Framework.Grammar.Argument.ExpressionType"/> is <see cref="F:StardewUI.Framework.Grammar.ArgumentExpressionType.ContextBinding"/>.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Grammar.ArgumentExpressionType">
            <summary>
            Defines the possible types of an <see cref="T:StardewUI.Framework.Grammar.Argument"/>, which specifies how to resolve its value at runtime.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.ArgumentExpressionType.Literal">
            <summary>
            The value is the literal string in the markup, i.e. it is the actual string representation of the target data
            type such as an integer, enumeration or another string.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.ArgumentExpressionType.ContextBinding">
            <summary>
            The current value of some property in the context data.
            </summary>
            <remarks>
            This has behavior similar to <see cref="F:StardewUI.Framework.Grammar.AttributeValueType.InputBinding"/>, but is not specifically
            classified as "input" because arguments are always read-only/input-only.
            </remarks>
        </member>
        <member name="F:StardewUI.Framework.Grammar.ArgumentExpressionType.EventBinding">
            <summary>
            The value of a named property of the <see cref="T:System.EventArgs"/> subclass of an associated event, when an argument
            is being provided to an event handler.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.ArgumentExpressionType.TemplateBinding">
            <summary>
            The expanded value of a template parameter; only valid within a template node.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Grammar.Attribute">
            <summary>
            A complete attribute assignment parsed from StarML.
            </summary>
            <param name="name">The attribute name.</param>
            <param name="type">The type of the attribute itself, i.e. how its <paramref name="name"/> should be
            interpreted.</param>
            <param name="isNegated">Whether the attribute has a negation (<c>!</c>) operator before assignment.</param>
            <param name="valueType">The type of the value expression, defining how the <paramref name="value"/> should be
            interpreted.</param>
            <param name="value">The literal value text.</param>
            <param name="parentDepth">The depth to walk - i.e. number of parents to traverse - to find the context on which to
            evaluate a context binding. Only valid if the <paramref name="valueType"/> is a type that matches
            <see cref="M:StardewUI.Framework.Grammar.AttributeValueTypeExtensions.IsContextBinding(StardewUI.Framework.Grammar.AttributeValueType)"/>.</param>
            <param name="parentType">The type name of the parent to search for, to find the the context on which to evaluate a
            context binding. Exclusive with <paramref name="parentDepth"/> and only valid if the <paramref name="valueType"/> is
            a type that matches <see cref="M:StardewUI.Framework.Grammar.AttributeValueTypeExtensions.IsContextBinding(StardewUI.Framework.Grammar.AttributeValueType)"/>.</param>
        </member>
        <member name="M:StardewUI.Framework.Grammar.Attribute.#ctor(System.ReadOnlySpan{System.Char},StardewUI.Framework.Grammar.AttributeType,System.Boolean,StardewUI.Framework.Grammar.AttributeValueType,System.ReadOnlySpan{System.Char},System.UInt32,System.ReadOnlySpan{System.Char})">
            <summary>
            A complete attribute assignment parsed from StarML.
            </summary>
            <param name="name">The attribute name.</param>
            <param name="type">The type of the attribute itself, i.e. how its <paramref name="name"/> should be
            interpreted.</param>
            <param name="isNegated">Whether the attribute has a negation (<c>!</c>) operator before assignment.</param>
            <param name="valueType">The type of the value expression, defining how the <paramref name="value"/> should be
            interpreted.</param>
            <param name="value">The literal value text.</param>
            <param name="parentDepth">The depth to walk - i.e. number of parents to traverse - to find the context on which to
            evaluate a context binding. Only valid if the <paramref name="valueType"/> is a type that matches
            <see cref="M:StardewUI.Framework.Grammar.AttributeValueTypeExtensions.IsContextBinding(StardewUI.Framework.Grammar.AttributeValueType)"/>.</param>
            <param name="parentType">The type name of the parent to search for, to find the the context on which to evaluate a
            context binding. Exclusive with <paramref name="parentDepth"/> and only valid if the <paramref name="valueType"/> is
            a type that matches <see cref="M:StardewUI.Framework.Grammar.AttributeValueTypeExtensions.IsContextBinding(StardewUI.Framework.Grammar.AttributeValueType)"/>.</param>
        </member>
        <member name="P:StardewUI.Framework.Grammar.Attribute.IsNegated">
            <summary>
            Whether the attribute has a negation (<c>!</c>) operator before assignment.
            </summary>
            <remarks>
            Negation behavior is specific to the exact attribute and is not supported for many/most attributes.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.Grammar.Attribute.Name">
            <summary>
            The attribute name.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Grammar.Attribute.ParentDepth">
            <summary>
            The depth to walk - i.e. number of parents to traverse - to find the context on which to evaluate a context
            binding. Exclusive with <see cref="P:StardewUI.Framework.Grammar.Attribute.ParentType"/> and only valid if the <see cref="P:StardewUI.Framework.Grammar.Attribute.ValueType"/> is a type that
            matches <see cref="M:StardewUI.Framework.Grammar.AttributeValueTypeExtensions.IsContextBinding(StardewUI.Framework.Grammar.AttributeValueType)"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Grammar.Attribute.ParentType">
            <summary>
            The type name of the parent to walk up to for a context redirect. Exclusive with <see cref="P:StardewUI.Framework.Grammar.Attribute.ParentDepth"/> and
            only valid if the <see cref="P:StardewUI.Framework.Grammar.Attribute.ValueType"/> is a type that matches
            <see cref="M:StardewUI.Framework.Grammar.AttributeValueTypeExtensions.IsContextBinding(StardewUI.Framework.Grammar.AttributeValueType)"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Grammar.Attribute.Type">
            <summary>
            The type of the attribute itself, i.e. how its <see cref="P:StardewUI.Framework.Grammar.Attribute.Name"/> should be interpreted.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Grammar.Attribute.Value">
            <summary>
            The literal value text.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Grammar.Attribute.ValueType">
            <summary>
            The type of the value expression, defining how the <see cref="P:StardewUI.Framework.Grammar.Attribute.Value"/> should be interpreted.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Grammar.AttributeType">
            <summary>
            The different types of an <see cref="T:StardewUI.Framework.Grammar.Attribute"/>, independent of its value.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.AttributeType.Property">
            <summary>
            Sets or binds a property on the target view.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.AttributeType.Structural">
            <summary>
            Affects the structure or hierarchy of the view tree, e.g. by making a node conditional or repeated.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.AttributeType.Behavior">
            <summary>
            Invokes a standard or custom <see cref="T:StardewUI.Framework.Behaviors.IViewBehavior"/> that attaches to the view.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Grammar.AttributeValueType">
            <summary>
            Types allowed for the value of an <see cref="T:StardewUI.Framework.Grammar.Attribute"/>.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.AttributeValueType.Literal">
            <summary>
            The value is the literal string in the markup, i.e. it is the actual string representation of the target data
            type such as an integer, enumeration or another string.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.AttributeValueType.AssetBinding">
            <summary>
            A read-only binding which obtains the value from a named game asset.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.AttributeValueType.TranslationBinding">
            <summary>
            A read-only binding which obtains the value from a translation key registered with SMAPI.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.AttributeValueType.InputBinding">
            <summary>
            A one-way data binding which obtains the value from the context data and assigns it to the view.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.AttributeValueType.OneTimeBinding">
            <summary>
            A special type of <see cref="F:StardewUI.Framework.Grammar.AttributeValueType.InputBinding"/> that only reads the value a single time, and does not update
            subsequently afterward.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.AttributeValueType.OutputBinding">
            <summary>
            A one-way data binding which obtains the value from the view and assigns it to the context data.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.AttributeValueType.TwoWayBinding">
            <summary>
            A two-way data binding which both assigns the context data's value to the view, and the view's value to the
            context data, depending on which one was most recently changed.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.AttributeValueType.TemplateBinding">
            <summary>
            Binds to the attribute value of the containing template; only valid within a template node.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Grammar.AttributeValueTypeExtensions">
            <summary>
            Extensions for the <see cref="T:StardewUI.Framework.Grammar.AttributeValueType"/> enum.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Grammar.AttributeValueTypeExtensions.IsContextBinding(StardewUI.Framework.Grammar.AttributeValueType)">
            <summary>
            Tests if a given <paramref name="valueType"/> is any type of context binding, regardless of its direction.
            </summary>
            <param name="valueType">The value type.</param>
            <returns><c>true</c> if the attribute binds to a context property; <c>false</c> if it is some other type of
            attribute such as <see cref="F:StardewUI.Framework.Grammar.AttributeValueType.Literal"/> or
            <see cref="F:StardewUI.Framework.Grammar.AttributeValueType.AssetBinding"/>.</returns>
        </member>
        <member name="T:StardewUI.Framework.Grammar.Event">
            <summary>
            An event handler parsed from StarML.
            </summary>
            <param name="eventName">The name of the event to which a handler should be attached.</param>
            <param name="handlerName">The name of the handler method to invoke.</param>
            <param name="parentDepth">The depth to walk - i.e. number of parents to traverse - to find the object on which to
            invoke the handler method.</param>
            <param name="parentType">The type name of the parent to walk up to for a context redirect. Exclusive with
            <paramref name="parentDepth"/>.</param>
        </member>
        <member name="M:StardewUI.Framework.Grammar.Event.#ctor(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.UInt32,System.ReadOnlySpan{System.Char})">
            <summary>
            An event handler parsed from StarML.
            </summary>
            <param name="eventName">The name of the event to which a handler should be attached.</param>
            <param name="handlerName">The name of the handler method to invoke.</param>
            <param name="parentDepth">The depth to walk - i.e. number of parents to traverse - to find the object on which to
            invoke the handler method.</param>
            <param name="parentType">The type name of the parent to walk up to for a context redirect. Exclusive with
            <paramref name="parentDepth"/>.</param>
        </member>
        <member name="P:StardewUI.Framework.Grammar.Event.EventName">
            <summary>
            The name of the event to which a handler should be attached.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Grammar.Event.HandlerName">
            <summary>
            The name of the handler method to invoke.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Grammar.Event.ParentDepth">
            <summary>
            The depth to walk - i.e. number of parents to traverse - to find the object on which to invoke the handler
            method.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Grammar.Event.ParentType">
            <summary>
            The type name of the parent to walk up to for a context redirect. Exclusive with <see cref="P:StardewUI.Framework.Grammar.Event.ParentDepth"/>.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Grammar.TokenType">
            <summary>
            Types of tokens allowed in StarML.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.TokenType.Unknown">
            <summary>
            Unknown token; used when a lexer has not been initialized, or has reached the end of its content.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.TokenType.OpeningTagStart">
            <summary>
            Start of an opening tag, i.e. the <c>&lt;</c> character without a subsequent <c>/</c>.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.TokenType.ClosingTagStart">
            <summary>
            Start of a closing tag, i.e. the <c>&lt;/</c> character sequence.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.TokenType.TagEnd">
            <summary>
            End of a regular opening or closing tag, i.e. the <c>&gt;</c> character.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.TokenType.SelfClosingTagEnd">
            <summary>
            End of a self-closing tag, i.e. the <c>/&gt;</c> character sequence.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.TokenType.Name">
            <summary>
            A valid name, i.e. of an element (tag) or attribute.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.TokenType.NameSeparator">
            <summary>
            The dot (<c>.</c>) character used to separate components of a name.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.TokenType.AttributeModifier">
            <summary>
            Modifier token designating the type of an attribute; the <c>*</c> character (structural) or <c>+</c> (behavior).
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.TokenType.Literal">
            <summary>
            A string of literal text, as found within a quoted or bound attribute.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.TokenType.Assignment">
            <summary>
            The <c>=</c> character, as used in an attribute syntax such as <c>attr="value"</c>.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.TokenType.Negation">
            <summary>
            The <c>!</c> character, sometimes used to negate the value of an attribute, e.g. for conditional attributes.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.TokenType.Quote">
            <summary>
            Double quote character (<c>"</c>) used to start or terminate a <see cref="F:StardewUI.Framework.Grammar.TokenType.Literal"/> string.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.TokenType.BindingStart">
            <summary>
            A pair of opening braces (<c>{{</c>), used to start a binding expression for an attribute value.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.TokenType.BindingEnd">
            <summary>
            A pair of closing braces (<c>}}</c>), used to end a binding expression for an attribute value.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.TokenType.BindingModifier">
            <summary>
            An explicit binding modifier; one of <c>@</c> (asset), <c>#</c> (translation), <c>&amp;</c> (template),
            <c>&lt;</c> (input only), <c>&gt;</c> (output only) or <c>&lt;&gt;</c> (two-way).
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.TokenType.ContextParent">
            <summary>
            A caret (<c>^</c>) used in a binding expression, indicating a walk up to the parent context.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.TokenType.ContextAncestor">
            <summary>
            A tilde (<c>~</c>) used in a binding expression, indicating traversal up to a parent with a named type.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.TokenType.Pipe">
            <summary>
            The pipe (<c>|</c>) character, which is used to start and end event bindings.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.TokenType.ArgumentListStart">
            <summary>
            The left parenthesis (<c>(</c>) character, used to start an argument list.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.TokenType.ArgumentListEnd">
            <summary>
            The right parenthesis (<c>(</c>) character, used to end an argument list.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.TokenType.ArgumentPrefix">
            <summary>
            Prefix character for an argument, e.g. <c>$</c> to refer to an event property.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.TokenType.ArgumentSeparator">
            <summary>
            The comma (<c>,</c>) character, used to separator arguments in an argument list.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.TokenType.CommentStart">
            <summary>
            Beginning of a comment block (<c>&lt;!--</c>).
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.TokenType.CommentEnd">
            <summary>
            End of a comment block (<c>--&gt;</c>).
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Grammar.Token">
            <summary>
            A token emitted by the StarML <see cref="T:StardewUI.Framework.Grammar.Lexer"/>.
            </summary>
            <param name="type">The token type.</param>
            <param name="text">The exact text of the token in the original markup.</param>
        </member>
        <member name="M:StardewUI.Framework.Grammar.Token.#ctor(StardewUI.Framework.Grammar.TokenType,System.ReadOnlySpan{System.Char})">
            <summary>
            A token emitted by the StarML <see cref="T:StardewUI.Framework.Grammar.Lexer"/>.
            </summary>
            <param name="type">The token type.</param>
            <param name="text">The exact text of the token in the original markup.</param>
        </member>
        <member name="P:StardewUI.Framework.Grammar.Token.Text">
            <summary>
            The token type.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Grammar.Token.Type">
            <summary>
            The exact text of the token in the original markup.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Grammar.Token.ToString">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Grammar.Lexer">
            <summary>
            Consumes raw StarML content as a token stream.
            </summary>
            <param name="text">The markup text.</param>
        </member>
        <member name="M:StardewUI.Framework.Grammar.Lexer.#ctor(System.ReadOnlySpan{System.Char})">
            <summary>
            Consumes raw StarML content as a token stream.
            </summary>
            <param name="text">The markup text.</param>
        </member>
        <member name="P:StardewUI.Framework.Grammar.Lexer.Current">
            <summary>
            The most recent token that was read, if the previous call to <see cref="M:StardewUI.Framework.Grammar.Lexer.MoveNext"/> was successful; otherwise,
            an empty token.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Grammar.Lexer.Eof">
            <summary>
            Whether the lexer is at the end of the content, either at the very end or with only trailing whitespace.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Grammar.Lexer.Position">
            <summary>
            The current position in the markup text, i.e. the position at the <em>end</em> the <see cref="P:StardewUI.Framework.Grammar.Lexer.Current"/> token.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Grammar.Lexer.GetEnumerator">
            <summary>
            Returns a reference to this <see cref="T:StardewUI.Framework.Grammar.Lexer"/>.
            </summary>
            <remarks>
            Implementing this, along with <see cref="P:StardewUI.Framework.Grammar.Lexer.Current"/> and <see cref="M:StardewUI.Framework.Grammar.Lexer.MoveNext"/>, allows it to be used in a
            <c>foreach</c> loop without having to implement <see cref="T:System.Collections.Generic.IEnumerable`1"/>, which is not allowed on a <c>ref
            struct</c>.
            </remarks>
        </member>
        <member name="M:StardewUI.Framework.Grammar.Lexer.MoveNext">
            <summary>
            Reads the next token into <see cref="P:StardewUI.Framework.Grammar.Lexer.Current"/> and advances the <see cref="P:StardewUI.Framework.Grammar.Lexer.Position"/>.
            </summary>
            <returns><c>true</c> if a token was read; <c>false</c> if the end of the content was reached.</returns>
        </member>
        <member name="M:StardewUI.Framework.Grammar.Lexer.ReadOptionalToken(StardewUI.Framework.Grammar.TokenType[])">
            <summary>
            Attempts to read the next token and, if successful, validates that it has a specific type.
            </summary>
            <param name="expectedTypes">The <see cref="T:StardewUI.Framework.Grammar.TokenType"/>s allowed for the next token.</param>
            <returns><c>true</c> if a token was read and was one of the <paramref name="expectedTypes"/>; <c>false</c> if
            the end of the content was reached.</returns>
            <exception cref="M:StardewUI.Framework.Grammar.Lexer.LexerException(System.String,System.Int32)">Thrown when a token is successfully read, but does not match any of the
            <paramref name="expectedTypes"/>.</exception>
        </member>
        <member name="M:StardewUI.Framework.Grammar.Lexer.ReadRequiredToken(StardewUI.Framework.Grammar.TokenType[])">
            <summary>
            Reads the next token and validates that it has a specific type.
            </summary>
            <param name="expectedTypes">The <see cref="T:StardewUI.Framework.Grammar.TokenType"/>s allowed for the next token.</param>
            <exception cref="M:StardewUI.Framework.Grammar.Lexer.LexerException(System.String,System.Int32)">Thrown when a token cannot be read due to reaching the end of the content, or
            when a token is successfully read but does not match any of the <paramref name="expectedTypes"/>.</exception>
        </member>
        <member name="T:StardewUI.Framework.Grammar.LexerException">
            <summary>
            The exception that is thrown when a <see cref="T:StardewUI.Framework.Grammar.Lexer"/> fails to process the markup it is given.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="position">The position within the markup text where the error was encountered.</param>
        </member>
        <member name="M:StardewUI.Framework.Grammar.LexerException.#ctor(System.String,System.Int32)">
            <summary>
            The exception that is thrown when a <see cref="T:StardewUI.Framework.Grammar.Lexer"/> fails to process the markup it is given.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="position">The position within the markup text where the error was encountered.</param>
        </member>
        <member name="P:StardewUI.Framework.Grammar.LexerException.Position">
            <summary>
            The position within the markup text where the error was encountered.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Grammar.TagInfo">
            <summary>
            Information about a parsed tag in StarML.
            </summary>
            <param name="name">The tag name.</param>
            <param name="isClosingTag">Whether or not the tag is a closing tag, either in regular <c>&lt;/tag&gt;</c> form or
            the end of a self-closing tag (<c>/&gt;</c>) after the tag attributes.</param>
        </member>
        <member name="M:StardewUI.Framework.Grammar.TagInfo.#ctor(System.ReadOnlySpan{System.Char},System.Boolean)">
            <summary>
            Information about a parsed tag in StarML.
            </summary>
            <param name="name">The tag name.</param>
            <param name="isClosingTag">Whether or not the tag is a closing tag, either in regular <c>&lt;/tag&gt;</c> form or
            the end of a self-closing tag (<c>/&gt;</c>) after the tag attributes.</param>
        </member>
        <member name="P:StardewUI.Framework.Grammar.TagInfo.Name">
            <summary>
            The tag name.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Grammar.TagInfo.IsClosingTag">
            <summary>
            Whether or not the tag is a closing tag, either in regular <c>&lt;/tag&gt;</c> form or the end of a self-closing
            tag (<c>/&gt;</c>) after the tag attributes.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Grammar.TagMember">
            <summary>
            The type of tag member read, resulting from a call to <see cref="M:StardewUI.Framework.Grammar.DocumentReader.NextMember"/>.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.TagMember.None">
            <summary>
            No member was read, i.e. the reader reached the end of the tag.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.TagMember.Attribute">
            <summary>
            A regular attribute, which binds or writes to a property of the target view.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.Grammar.TagMember.Event">
            <summary>
            An event attribute, which attaches an event handler to the target view.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Grammar.DocumentReader">
            <summary>
            Reads elements and associated attributes from a StarML document (content string).
            </summary>
            <param name="lexer">The lexer that reads syntax tokens from the document.</param>
        </member>
        <member name="M:StardewUI.Framework.Grammar.DocumentReader.#ctor(StardewUI.Framework.Grammar.Lexer)">
            <summary>
            Reads elements and associated attributes from a StarML document (content string).
            </summary>
            <param name="lexer">The lexer that reads syntax tokens from the document.</param>
        </member>
        <member name="P:StardewUI.Framework.Grammar.DocumentReader.Argument">
            <summary>
            The argument that was just read, if the previous <see cref="M:StardewUI.Framework.Grammar.DocumentReader.NextArgument"/> returned <c>true</c>; otherwise, an
            empty argument.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Grammar.DocumentReader.Attribute">
            <summary>
            The attribute that was just read, if the previous <see cref="M:StardewUI.Framework.Grammar.DocumentReader.NextMember"/> returned
            <see cref="F:StardewUI.Framework.Grammar.TagMember.Attribute"/>; otherwise, an empty attribute.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Grammar.DocumentReader.Eof">
            <summary>
            Whether the end of the document has been reached.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Grammar.DocumentReader.Event">
            <summary>
            The event that was just read, if the previous <see cref="M:StardewUI.Framework.Grammar.DocumentReader.NextMember"/> returned <see cref="F:StardewUI.Framework.Grammar.TagMember.Event"/>;
            otherwise, an empty event.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Grammar.DocumentReader.Position">
            <summary>
            The current position in the document content.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Grammar.DocumentReader.Tag">
            <summary>
            The tag that was just read, if the previous <see cref="M:StardewUI.Framework.Grammar.DocumentReader.NextTag"/> returned <c>true</c>; otherwise, an empty tag.
            </summary>
            <remarks>
            The tag remains valid as attributes are read; i.e. <see cref="M:StardewUI.Framework.Grammar.DocumentReader.ReadNextAttribute(StardewUI.Framework.Grammar.AttributeType,System.ReadOnlySpan{System.Char},System.Boolean)"/> will never change this value.
            </remarks>
        </member>
        <member name="M:StardewUI.Framework.Grammar.DocumentReader.#ctor(System.ReadOnlySpan{System.Char})">
            <summary>
            Initializes a new <see cref="T:StardewUI.Framework.Grammar.DocumentReader"/> from the specified text, creating an implicit lexer.
            </summary>
            <param name="text">The markup text.</param>
        </member>
        <member name="M:StardewUI.Framework.Grammar.DocumentReader.NextArgument">
            <summary>
            Reads the next <see cref="P:StardewUI.Framework.Grammar.DocumentReader.Argument"/>, if the current scope is within an argument list.
            </summary>
            <returns><c>true</c> if an argument was read; <c>false</c> if there are no more arguments in the list or if the
            current position was not within an argument list.</returns>
        </member>
        <member name="M:StardewUI.Framework.Grammar.DocumentReader.NextMember">
            <summary>
            Reads the next <see cref="P:StardewUI.Framework.Grammar.DocumentReader.Attribute"/>. Only valid in a tag scope, i.e. after a call to <see cref="M:StardewUI.Framework.Grammar.DocumentReader.NextTag"/>
            returns <c>true</c>.
            </summary>
            <returns><c>true</c> if an attribute was read; <c>false</c> if there are no more attributes to read for the
            current element.</returns>
            <exception cref="T:StardewUI.Framework.Grammar.ParserException">Thrown when the current position is not within a tag, or when unparseable
            attribute data is encountered.</exception>
        </member>
        <member name="M:StardewUI.Framework.Grammar.DocumentReader.NextTag">
            <summary>
            Reads the next <see cref="P:StardewUI.Framework.Grammar.DocumentReader.Tag"/>, discarding any remaining attributes for the current tag.
            </summary>
            <returns><c>true</c> if an attribute was read; <c>false</c> if the end of the document was reached.</returns>
            <exception cref="T:StardewUI.Framework.Grammar.ParserException">Thrown when the next tag is malformed or otherwise unparseable.</exception>
        </member>
        <member name="T:StardewUI.Framework.Grammar.ParserException">
            <summary>
            The exception that is thrown when a <see cref="T:StardewUI.Framework.Grammar.DocumentReader"/> encounters invalid content.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="position">The position within the markup text where the error was encountered.</param>
        </member>
        <member name="M:StardewUI.Framework.Grammar.ParserException.#ctor(System.String,System.Int32)">
            <summary>
            The exception that is thrown when a <see cref="T:StardewUI.Framework.Grammar.DocumentReader"/> encounters invalid content.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="position">The position within the markup text where the error was encountered.</param>
        </member>
        <member name="P:StardewUI.Framework.Grammar.ParserException.Position">
            <summary>
            The position within the markup text where the error was encountered.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.IAnyCast">
            <summary>
            A marker interface that, when used in place of <see cref="T:System.Object"/>, forces the framework to attempt an explicit
            conversion/cast to the expected destination type.
            </summary>
            <remarks>
            Casts are normally only permitted when the source type is actually assignable to the destination type.
            <c>IAnyCast</c> is used to indicate that the source is intentionally ambiguous or boxed, and the real type cannot be
            known until the conversion is attempted, at which point it is assumed to be assignment-compatible or have an
            explicit conversion operator.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.IAnyCast.Value">
            <summary>
            The boxed value.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.AnyCastValue">
            <summary>
            Value type used for an <see cref="T:StardewUI.Framework.IAnyCast"/>.
            </summary>
            <param name="Value">The boxed value.</param>
        </member>
        <member name="M:StardewUI.Framework.AnyCastValue.#ctor(System.Object)">
            <summary>
            Value type used for an <see cref="T:StardewUI.Framework.IAnyCast"/>.
            </summary>
            <param name="Value">The boxed value.</param>
        </member>
        <member name="P:StardewUI.Framework.AnyCastValue.Value">
            <summary>The boxed value.</summary>
        </member>
        <member name="T:StardewUI.Framework.IViewEngine">
            <summary>
            Public API for StardewUI, abstracting away all implementation details of views and trees.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.IViewEngine.CreateDrawableFromAsset(System.String)">
            <summary>
            Creates an <see cref="T:StardewUI.Framework.IViewDrawable"/> from the StarML stored in a game asset, as provided by a mod via SMAPI or
            Content Patcher.
            </summary>
            <remarks>
            The <see cref="P:StardewUI.Framework.IViewDrawable.Context"/> and <see cref="P:StardewUI.Framework.IViewDrawable.MaxSize"/> can be provided after creation.
            </remarks>
            <param name="assetName">The name of the StarML view asset in the content pipeline, e.g.
            <c>Mods/MyMod/Views/MyView</c>.</param>
            <returns>An <see cref="T:StardewUI.Framework.IViewDrawable"/> for drawing directly to the <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> of a rendering
            event or other draw handler.</returns>
        </member>
        <member name="M:StardewUI.Framework.IViewEngine.CreateDrawableFromMarkup(System.String)">
            <summary>
            Creates an <see cref="T:StardewUI.Framework.IViewDrawable"/> from arbitrary markup.
            </summary>
            <remarks>
            <para>
            The <see cref="P:StardewUI.Framework.IViewDrawable.Context"/> and <see cref="P:StardewUI.Framework.IViewDrawable.MaxSize"/> can be provided after creation.
            </para>
            <para>
            <b>Warning:</b> Ad-hoc menus created this way cannot be cached, nor patched by other mods. Most mods should not
            use this API except for testing/experimentation.
            </para>
            </remarks>
            <param name="markup">The markup in StarML format.</param>
            <returns>An <see cref="T:StardewUI.Framework.IViewDrawable"/> for drawing directly to the <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> of a rendering
            event or other draw handler.</returns>
        </member>
        <member name="M:StardewUI.Framework.IViewEngine.CreateMenuControllerFromAsset(System.String,System.Object)">
            <summary>
            Creates a menu from the StarML stored in a game asset, as provided by a mod via SMAPI or Content Patcher, and
            returns a controller for customizing the menu's behavior.
            </summary>
            <remarks>
            The menu that is created is the same as the result of <see cref="M:StardewUI.Framework.IViewEngine.CreateMenuFromMarkup(System.String,System.Object)"/>. The
            menu is not automatically shown; to show it, use <see cref="P:StardewValley.Game1.activeClickableMenu"/> or equivalent.
            </remarks>
            <param name="assetName">The name of the StarML view asset in the content pipeline, e.g.
            <c>Mods/MyMod/Views/MyView</c>.</param>
            <param name="context">The context, or "model", for the menu's view, which holds any data-dependent values.
            <b>Note:</b> The type must implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> in order for any changes to this data
            to be automatically reflected in the UI.</param>
            <returns>A controller object whose <see cref="P:StardewUI.Framework.IMenuController.Menu"/> is the created menu and whose other
            properties can be used to change menu-level behavior.</returns>
        </member>
        <member name="M:StardewUI.Framework.IViewEngine.CreateMenuControllerFromMarkup(System.String,System.Object)">
            <summary>
            Creates a menu from arbitrary markup, and returns a controller for customizing the menu's behavior.
            </summary>
            <remarks>
            <b>Warning:</b> Ad-hoc menus created this way cannot be cached, nor patched by other mods. Most mods should not
            use this API except for testing/experimentation.
            </remarks>
            <param name="markup">The markup in StarML format.</param>
            <param name="context">The context, or "model", for the menu's view, which holds any data-dependent values.
            <b>Note:</b> The type must implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> in order for any changes to this data
            to be automatically reflected in the UI.</param>
            <returns>A controller object whose <see cref="P:StardewUI.Framework.IMenuController.Menu"/> is the created menu and whose other
            properties can be used to change menu-level behavior.</returns>
        </member>
        <member name="M:StardewUI.Framework.IViewEngine.CreateMenuFromAsset(System.String,System.Object)">
            <summary>
            Creates a menu from the StarML stored in a game asset, as provided by a mod via SMAPI or Content Patcher.
            </summary>
            <remarks>
            Does not make the menu active. To show it, use <see cref="P:StardewValley.Game1.activeClickableMenu"/> or equivalent.
            </remarks>
            <param name="assetName">The name of the StarML view asset in the content pipeline, e.g.
            <c>Mods/MyMod/Views/MyView</c>.</param>
            <param name="context">The context, or "model", for the menu's view, which holds any data-dependent values.
            <b>Note:</b> The type must implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> in order for any changes to this data
            to be automatically reflected in the UI.</param>
            <returns>A menu object which can be shown using the game's standard menu APIs such as
            <see cref="P:StardewValley.Game1.activeClickableMenu"/>.</returns>
        </member>
        <member name="M:StardewUI.Framework.IViewEngine.CreateMenuFromMarkup(System.String,System.Object)">
            <summary>
            Creates a menu from arbitrary markup.
            </summary>
            <remarks>
            <b>Warning:</b> Ad-hoc menus created this way cannot be cached, nor patched by other mods. Most mods should not
            use this API except for testing/experimentation.
            </remarks>
            <param name="markup">The markup in StarML format.</param>
            <param name="context">The context, or "model", for the menu's view, which holds any data-dependent values.
            <b>Note:</b> The type must implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> in order for any changes to this data
            to be automatically reflected in the UI.</param>
            <returns>A menu object which can be shown using the game's standard menu APIs such as
            <see cref="P:StardewValley.Game1.activeClickableMenu"/>.</returns>
        </member>
        <member name="M:StardewUI.Framework.IViewEngine.EnableHotReloading(System.String)">
            <summary>
            Starts monitoring this mod's directory for changes to assets managed by any of the <c>Register</c> methods, e.g.
            views and sprites.
            </summary>
            <remarks>
            <para>
            If the <paramref name="sourceDirectory"/> argument is specified, and points to a directory with the same asset
            structure as the mod, then an additional sync will be set up such that files modified in the
            <c>sourceDirectory</c> while the game is running will be copied to the active mod directory and subsequently
            reloaded. In other words, pointing this at the mod's <c>.csproj</c> directory allows hot reloading from the
            source files instead of the deployed mod's files.
            </para>
            <para>
            Hot reload may impact game performance and should normally only be used during development and/or in debug mode.
            </para>
            </remarks>
            <param name="sourceDirectory">Optional source directory to watch and sync changes from. If not specified, or not
            a valid source directory, then hot reload will only pick up changes from within the live mod directory.</param>
        </member>
        <member name="M:StardewUI.Framework.IViewEngine.PreloadAssets">
            <summary>
            Begins preloading assets found in this mod's registered asset directories.
            </summary>
            <remarks>
            <para>
            Preloading is performed in the background, and can typically help reduce first-time latency for showing menus or
            drawables, without any noticeable lag in game startup.
            </para>
            <para>
            Must be called after asset registration (<see cref="M:StardewUI.Framework.IViewEngine.RegisterViews(System.String,System.String)"/>, <see cref="M:StardewUI.Framework.IViewEngine.RegisterSprites(System.String,System.String)"/> and so on)
            in order to be effective, and must not be called more than once per mod otherwise errors or crashes may occur.
            </para>
            </remarks>
        </member>
        <member name="M:StardewUI.Framework.IViewEngine.PreloadModels(System.Type[])">
            <summary>
            Declares that the specified context types will be used as either direct arguments or subproperties in one or
            more subsequent <c>CreateMenu</c> or <c>CreateDrawable</c> APIs, and instructs the framework to begin inspecting
            those types and optimizing for later use.
            </summary>
            <remarks>
            Data binding to mod-defined types uses reflection, which can become expensive when loading a very complex menu
            and/or binding to a very complex model for the first time. Preloading can perform this work in the background
            instead of causing latency when opening the menu.
            </remarks>
            <param name="types">The types that the mod expects to use as context.</param>
        </member>
        <member name="M:StardewUI.Framework.IViewEngine.RegisterCustomData(System.String,System.String)">
            <summary>
            Registers a mod directory to be searched for special-purpose mod data, i.e. that is not either views or sprites.
            </summary>
            <remarks>
            Allowed extensions for files in this folder and their corresponding data types are:
            <list type="bullet">
            <item><c>.buttonspritemap.json</c> - <see href="https://focustense.github.io/StardewUI/reference/stardewui/data/buttonspritemapdata/">ButtonSpriteMapData</see></item>
            </list>
            </remarks>
            <param name="assetPrefix">The prefix for all asset names, <b>excluding</b> the category which is deduced from
            the file extension as described in the remarks. For example, given a value of <c>Mods/MyMod</c>, a file named
            <c>foo.buttonspritemap.json</c> would be referenced in views as <c>@Mods/MyMod/ButtonSpriteMaps/Foo</c>.</param>
            <param name="modDirectory">The physical directory where the asset files are located, relative to the mod
            directory. Typically a path such as <c>assets/ui</c> or <c>assets/ui/data</c>.</param>
        </member>
        <member name="M:StardewUI.Framework.IViewEngine.RegisterSprites(System.String,System.String)">
            <summary>
            Registers a mod directory to be searched for sprite (and corresponding texture/sprite sheet data) assets.
            </summary>
            <param name="assetPrefix">The prefix for all asset names, e.g. <c>Mods/MyMod/Sprites</c>. This can be any value
            but the same prefix must be used in <c>@AssetName</c> view bindings.</param>
            <param name="modDirectory">The physical directory where the asset files are located, relative to the mod
            directory. Typically a path such as <c>assets/sprites</c> or <c>assets/ui/sprites</c>.</param>
        </member>
        <member name="M:StardewUI.Framework.IViewEngine.RegisterViews(System.String,System.String)">
            <summary>
            Registers a mod directory to be searched for view (StarML) assets. Uses the <c>.sml</c> extension.
            </summary>
            <param name="assetPrefix">The prefix for all asset names, e.g. <c>Mods/MyMod/Views</c>. This can be any value
            but the same prefix must be used in <c>include</c> elements and in API calls to create views.</param>
            <param name="modDirectory">The physical directory where the asset files are located, relative to the mod
            directory. Typically a path such as <c>assets/views</c> or <c>assets/ui/views</c>.</param>
        </member>
        <member name="T:StardewUI.Framework.IViewDrawable">
            <summary>
            Provides methods to update and draw a simple, non-interactive UI component, such as a HUD widget.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.IViewDrawable.ActualSize">
            <summary>
            The current size required for the content.
            </summary>
            <remarks>
            Use for calculating the correct position for a <see cref="M:StardewUI.Framework.IViewDrawable.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2)"/>, especially for elements
            that should be aligned to the center or right edge of the viewport.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.IViewDrawable.Context">
            <summary>
            The context, or "model", for the menu's view, which holds any data-dependent values.
            </summary>
            <remarks>
            The type must implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> in order for any changes to this data to be
            automatically reflected on the next <see cref="M:StardewUI.Framework.IViewDrawable.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2)"/>.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.IViewDrawable.MaxSize">
            <summary>
            The maximum size, in pixels, allowed for this content.
            </summary>
            <remarks>
            If no value is specified, then the content is allowed to use the entire <see cref="F:StardewValley.Game1.uiViewport"/>.
            </remarks>
        </member>
        <member name="M:StardewUI.Framework.IViewDrawable.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Draws the current contents.
            </summary>
            <param name="b">Target sprite batch.</param>
            <param name="position">Position on the screen or viewport to use as the top-left corner.</param>
        </member>
        <member name="T:StardewUI.Framework.IMenuController">
            <summary>
            Wrapper for a mod-managed <see cref="T:StardewValley.Menus.IClickableMenu"/> that allows further customization of menu-level properties
            not accessible to StarML or data binding.
            </summary>
        </member>
        <member name="E:StardewUI.Framework.IMenuController.Closed">
            <summary>
            Event raised after the menu has been closed.
            </summary>
        </member>
        <member name="E:StardewUI.Framework.IMenuController.Closing">
            <summary>
            Event raised when the menu is about to close.
            </summary>
            <remarks>
            This has the same lifecycle as <see cref="M:StardewValley.Menus.IClickableMenu.cleanupBeforeExit"/>.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.IMenuController.CanClose">
            <summary>
            Gets or sets a function that returns whether or not the menu can be closed.
            </summary>
            <remarks>
            This is equivalent to implementing <see cref="M:StardewValley.Menus.IClickableMenu.readyToClose"/>.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.IMenuController.CloseAction">
            <summary>
            Gets or sets an action that <b>replaces</b> the default menu-close behavior.
            </summary>
            <remarks>
            Most users should leave this property unset. It is intended for use in unusual contexts, such as replacing the
            mod settings in a Generic Mod Config Menu integration. Setting any non-null value to this property will suppress
            the default behavior of <see cref="M:StardewValley.Menus.IClickableMenu.exitThisMenu(System.Boolean)"/> entirely, so the caller is responsible
            for handling all possible scenarios (e.g. child of another menu, or sub-menu of the title menu).
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.IMenuController.CloseButtonOffset">
            <summary>
            Offset from the menu view's top-right edge to draw the close button.
            </summary>
            <remarks>
            Only applies when <see cref="M:StardewUI.Framework.IMenuController.EnableCloseButton(Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Single)"/> has been called at least once.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.IMenuController.CloseOnOutsideClick">
            <summary>
            Whether to automatically close the menu when a mouse click is detected outside the bounds of the menu and any
            floating elements.
            </summary>
            <remarks>
            This setting is primarily intended for submenus and makes them behave more like overlays.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.IMenuController.CloseSound">
            <summary>
            Sound to play when closing the menu.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.IMenuController.DimmingAmount">
            <summary>
            How much the menu should dim the entire screen underneath.
            </summary>
            <remarks>
            The default dimming is appropriate for most menus, but if the menu is being drawn as a delegate of some other
            macro-menu, then it can be lowered or removed (set to <c>0</c>) entirely.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.IMenuController.Menu">
            <summary>
            Gets the menu, which can be opened using <see cref="P:StardewValley.Game1.activeClickableMenu"/>, or as a child menu.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.IMenuController.PositionSelector">
            <summary>
            Gets or sets a function that returns the top-left position of the menu.
            </summary>
            <remarks>
            Setting any non-null value will disable the auto-centering functionality, and is equivalent to setting the
            <see cref="F:StardewValley.Menus.IClickableMenu.xPositionOnScreen"/> and <see cref="F:StardewValley.Menus.IClickableMenu.yPositionOnScreen"/> fields.
            </remarks>
        </member>
        <member name="M:StardewUI.Framework.IMenuController.ClearCursorAttachment">
            <summary>
            Removes any cursor attachment previously set by <see cref="M:StardewUI.Framework.IMenuController.SetCursorAttachment(Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Nullable{Microsoft.Xna.Framework.Point},System.Nullable{Microsoft.Xna.Framework.Point},System.Nullable{Microsoft.Xna.Framework.Color})"/>.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.IMenuController.Close">
            <summary>
            Closes the menu.
            </summary>
            <remarks>
            This method allows programmatic closing of the menu. It performs the same action that would be performed by
            pressing one of the configured menu keys (e.g. ESC), clicking the close button, etc., and follows the same
            rules, i.e. will not allow closing if <see cref="P:StardewUI.Framework.IMenuController.CanClose"/> is <c>false</c>.
            </remarks>
        </member>
        <member name="M:StardewUI.Framework.IMenuController.EnableCloseButton(Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Single)">
            <summary>
            Configures the menu to display a close button on the upper-right side.
            </summary>
            <remarks>
            If no <paramref name="texture"/> is specified, then all other parameters are ignored and the default close
            button sprite is drawn. Otherwise, a custom sprite will be drawn using the specified parameters.
            </remarks>
            <param name="texture">The source image/tile sheet containing the button image.</param>
            <param name="sourceRect">The location within the <paramref name="texture"/> where the image is located, or
            <c>null</c> to draw the entire <paramref name="texture"/>.</param>
            <param name="scale">Scale to apply, if the destination size should be different from the size of the
            <paramref name="sourceRect"/>.</param>
        </member>
        <member name="M:StardewUI.Framework.IMenuController.SetCursorAttachment(Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Nullable{Microsoft.Xna.Framework.Point},System.Nullable{Microsoft.Xna.Framework.Point},System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            Begins displaying a cursor attachment, i.e. a sprite that follows the mouse cursor.
            </summary>
            <remarks>
            The cursor is shown in addition to, not instead of, the normal mouse cursor.
            </remarks>
            <param name="texture">The source image/tile sheet containing the cursor image.</param>
            <param name="sourceRect">The location within the <paramref name="texture"/> where the image is located, or
            <c>null</c> to draw the entire <paramref name="texture"/>.</param>
            <param name="size">Destination size for the cursor sprite, if different from the size of the
            <paramref name="sourceRect"/>.</param>
            <param name="offset">Offset between the actual mouse position and the top-left corner of the drawn
            cursor sprite.</param>
            <param name="tint">Optional tint color to apply to the drawn cursor sprite.</param>
        </member>
        <member name="M:StardewUI.Framework.IMenuController.SetGutters(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Configures the menu's gutter widths/heights.
            </summary>
            <remarks>
            <para>
            Gutters are areas of the screen that the menu should not occupy. These are typically used with a menu whose root
            view uses <see cref="M:StardewUI.Layout.Length.Stretch"/> for one of its <see cref="P:StardewUI.IView.Layout"/> dimensions, and allows
            limiting the max width/height relative to the viewport size.
            </para>
            <para>
            The historical reason for gutters is <see href="https://en.wikipedia.org/wiki/Overscan">overscan</see>, however
            they are still commonly used for aesthetic reasons.
            </para>
            </remarks>
            <param name="left">The gutter width on the left side of the viewport.</param>
            <param name="top">The gutter height at the top of the viewport.</param>
            <param name="right">The gutter width on the right side of the viewport. The default value of <c>-1</c> specifies
            that the <paramref name="left"/> value should be mirrored on the right.</param>
            <param name="bottom">The gutter height at the bottom of the viewport. The default value of <c>-1</c> specifies
            that the <paramref name="top"/> value should be mirrored on the bottom.</param>
        </member>
        <member name="T:StardewUI.Framework.ViewEngineExtensions">
            <summary>
            Extensions for the <see cref="T:StardewUI.Framework.IViewEngine"/> interface.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.ViewEngineExtensions.EnableHotReloadingWithSourceSync(StardewUI.Framework.IViewEngine,System.String)">
            <summary>
            Starts monitoring this mod's directory for changes to assets managed by any of the <see cref="T:StardewUI.Framework.IViewEngine"/>'s
            <c>Register</c> methods, e.g. views and sprites, and attempts to set up an additional sync from the mod's
            project (source) directory to the deployed mod directory so that hot reloads can be initiated from the IDE.
            </summary>
            <remarks>
            <para>
            Callers should normally omit the <paramref name="callerFilePath"/> parameter in their call; this will cause it
            to be replaced at compile time with the actual file path of the caller, and used to automatically detect the
            project path.
            </para>
            <para>
            If detection/sync fails due to an unusual project structure, consider providing an exact path directly to
            <see cref="M:StardewUI.Framework.IViewEngine.EnableHotReloading(System.String)"/> instead of using this extension.
            </para>
            <para>
            Hot reload may impact game performance and should normally only be used during development and/or in debug mode.
            </para>
            </remarks>
            <param name="viewEngine">The view engine API.</param>
            <param name="callerFilePath">Do not pass in this argument, so that <see cref="T:System.Runtime.CompilerServices.CallerFilePathAttribute"/> can
            provide the correct value on build.</param>
        </member>
        <member name="T:StardewUI.Framework.LazyAsset`1">
            <summary>
            Helper for lazy-loading a single asset as game data, sourced from mod data.
            </summary>
            <typeparam name="T">The asset type.</typeparam>
        </member>
        <member name="M:StardewUI.Framework.LazyAsset`1.#ctor(StardewModdingAPI.IModHelper,System.String,System.String)">
            <summary>
            Initializes the asset and configures it for lazy loading.
            </summary>
            <param name="helper">Helper for the mod that owns the real asset.</param>
            <param name="name">The asset name in the content pipeline.</param>
            <param name="physicalPath">The physical location of the asset, relative to the mod directory.</param>
        </member>
        <member name="T:StardewUI.Framework.ModConfig">
            <summary>
            Configuration settings for StardewUI.Framework.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.ModConfig.Performance">
            <summary>
            Settings related to performance optimization.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.ModConfig.Tracing">
            <summary>
            Settings related to performance tracing.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.PerformanceConfig">
            <summary>
            Configuration sub-settings providing control over performance tweaks.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.PerformanceConfig.EnableParallelDescriptors">
            <summary>
            Whether to process member descriptors of a view or model in parallel.
            </summary>
            <remarks>
            Parallel processing will often make first-time loads slower rather than faster, due to scheduling overhead and
            some synchronization. This may be beneficial if types with hundreds of fields/properties are involved.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.PerformanceConfig.EnableReflectionWarmup">
            <summary>
            Whether to warm up StardewUI's reflection cache on a background thread during game start.
            </summary>
            <remarks>
            This will usually improve first-time loads of menus by 10-20%, and tends to have no cost/imperceptible cost on
            app startup, since it uses only one background thread (no parallelism) and other startup tasks tend to run on
            main thread only.
            </remarks>
        </member>
        <member name="T:StardewUI.Framework.Patches.ModContentManagerPatches">
            <summary>
            Patches for SMAPI's <c>ModContentManager</c> (internal).
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Patches.Patcher">
            <summary>
            Entry point for all patches managed by StardewUI.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Patches.Patcher.Patch(System.String)">
            <summary>
            Applies all patches.
            </summary>
            <param name="harmonyId">Unique ID for the harmony instance; generally the mod ID.</param>
        </member>
        <member name="T:StardewUI.Framework.Patches.SpriteTextPatches">
            <summary>
            Patches for <see cref="T:StardewValley.BellsAndWhistles.SpriteText"/>.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Sources.AssetValueSource`1">
            <summary>
            Value source that looks up an asset registered with SMAPI's content manager.
            </summary>
            <typeparam name="T">The type of asset to retrieve.</typeparam>
            <param name="cache">Asset cache used to obtain current value/status.</param>
            <param name="name">The asset name/path as it would be supplied to SMAPI in
            <see cref="M:StardewModdingAPI.IGameContentHelper.Load``1(System.String)"/>.</param>
        </member>
        <member name="M:StardewUI.Framework.Sources.AssetValueSource`1.#ctor(StardewUI.Framework.Content.IAssetCache,System.String)">
            <summary>
            Value source that looks up an asset registered with SMAPI's content manager.
            </summary>
            <typeparam name="T">The type of asset to retrieve.</typeparam>
            <param name="cache">Asset cache used to obtain current value/status.</param>
            <param name="name">The asset name/path as it would be supplied to SMAPI in
            <see cref="M:StardewModdingAPI.IGameContentHelper.Load``1(System.String)"/>.</param>
        </member>
        <member name="P:StardewUI.Framework.Sources.AssetValueSource`1.CanRead">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Sources.AssetValueSource`1.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Sources.AssetValueSource`1.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Sources.AssetValueSource`1.Value">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Sources.AssetValueSource`1.ValueType">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Sources.AssetValueSource`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Sources.AssetValueSource`1.Update(System.Boolean)">
            <inheritdoc />
            <returns><c>true</c> if the underlying asset expired since the last update; <c>false</c> if the
            <see cref="P:StardewUI.Framework.Sources.AssetValueSource`1.Value"/> was still current.</returns>
        </member>
        <member name="T:StardewUI.Framework.Sources.ConstantValueSource`1">
            <summary>
            Value source with a constant value, generally used to hold the literal (text) value of an attribute.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:StardewUI.Framework.Sources.ConstantValueSource`1.#ctor(`0)">
            <summary>
            Value source with a constant value, generally used to hold the literal (text) value of an attribute.
            </summary>
            <param name="value">The attribute value.</param>
        </member>
        <member name="P:StardewUI.Framework.Sources.ConstantValueSource`1.CanRead">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Sources.ConstantValueSource`1.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Sources.ConstantValueSource`1.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Sources.ConstantValueSource`1.Value">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Sources.ConstantValueSource`1.ValueType">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Sources.ConstantValueSource`1.Update(System.Boolean)">
            <inheritdoc />
            <remarks>
            As implemented on <see cref="T:StardewUI.Framework.Sources.ConstantValueSource`1"/>, always returns <c>false</c> as there can never be any
            change that requires an update.
            </remarks>
        </member>
        <member name="T:StardewUI.Framework.Sources.ContextPropertyValueSource`1">
            <summary>
            Value source that obtains its value from a context (or "model") property.
            </summary>
            <typeparam name="T">The return type of the context property.</typeparam>
        </member>
        <member name="P:StardewUI.Framework.Sources.ContextPropertyValueSource`1.CanRead">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Sources.ContextPropertyValueSource`1.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Sources.ContextPropertyValueSource`1.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Sources.ContextPropertyValueSource`1.Value">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Sources.ContextPropertyValueSource`1.ValueType">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Sources.ContextPropertyValueSource`1.#ctor(StardewUI.Framework.Binding.BindingContext,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:StardewUI.Framework.Sources.ContextPropertyValueSource`1"/> using the specified context and
            property name.
            </summary>
            <remarks>
            If the <see cref="P:StardewUI.Framework.Binding.BindingContext.Data"/> of the supplied <paramref name="context"/> implements
            <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>, then <see cref="M:StardewUI.Framework.Sources.ContextPropertyValueSource`1.Update(System.Boolean)"/> and <see cref="P:StardewUI.Framework.Sources.ContextPropertyValueSource`1.Value"/> will respond to changes
            to the given <paramref name="propertyName"/>. Otherwise, the source is "static" and will never change its value
            or return <c>true</c> from <see cref="M:StardewUI.Framework.Sources.ContextPropertyValueSource`1.Update(System.Boolean)"/>.
            </remarks>
            <param name="context">Context used for the data binding.</param>
            <param name="propertyName">Property to read on the <see cref="P:StardewUI.Framework.Binding.BindingContext.Data"/> of the supplied
            <paramref name="context"/> when updating.</param>
            <param name="allowUpdates">Whether or not to allow <see cref="M:StardewUI.Framework.Sources.ContextPropertyValueSource`1.Update(System.Boolean)"/> to read a new value. <c>false</c>
            prevents all updates and makes the source read only one time.</param>
        </member>
        <member name="M:StardewUI.Framework.Sources.ContextPropertyValueSource`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Sources.ContextPropertyValueSource`1.Update(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Sources.ConvertedValueSource">
            <summary>
            Helpers for creating instances of the generic <see cref="T:StardewUI.Framework.Sources.ConvertedValueSource`2"/> when some of the types
            are unknown at compile time.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Sources.ConvertedValueSource.Create(StardewUI.Framework.Sources.IValueSource,System.Type,StardewUI.Framework.Converters.IValueConverterFactory,System.Boolean)">
            <summary>
            Creates a converted source with a specified output type, using an original source with unknown value type.
            </summary>
            <param name="original">The original value source.</param>
            <param name="destinationType">The type to convert to.</param>
            <param name="converterFactory">Factory for creating instances of
            <see cref="T:StardewUI.Framework.Converters.IValueConverter`2"/>.</param>
            <param name="twoWay">Whether the resulting <see cref="T:StardewUI.Framework.Sources.IValueSource"/> should be able to convert in the reverse
            direction, i.e. for two-way bindings, by setting <see cref="P:StardewUI.Framework.Sources.IValueSource.Value"/>.</param>
        </member>
        <member name="M:StardewUI.Framework.Sources.ConvertedValueSource.Create``1(StardewUI.Framework.Sources.IValueSource,StardewUI.Framework.Converters.IValueConverterFactory,System.Boolean)">
            <summary>
            Creates a converted source with a specified output type, using an original source with unknown value type.
            </summary>
            <typeparam name="T">The converted value type.</typeparam>
            <param name="original">The original value source.</param>
            <param name="converterFactory">Factory for creating instances of
            <see cref="T:StardewUI.Framework.Converters.IValueConverter`2"/>.</param>
            <param name="twoWay">Whether the resulting <see cref="T:StardewUI.Framework.Sources.IValueSource"/> should be able to convert in the reverse
            direction, i.e. for two-way bindings, by setting <see cref="P:StardewUI.Framework.Sources.IValueSource.Value"/>.</param>
        </member>
        <member name="M:StardewUI.Framework.Sources.ConvertedValueSource.Warmup``2">
            <summary>
            Pre-initializes some reflection state in order to make future invocations faster.
            </summary>
            <typeparam name="TSource">The type of the original value.</typeparam>
            <typeparam name="TDestination">The converted value type.</typeparam>
        </member>
        <member name="M:StardewUI.Framework.Sources.ConvertedValueSource.Warmup(System.Type,System.Type)">
            <summary>
            Pre-initializes some reflection state in order to make future invocations faster.
            </summary>
            <param name="sourceType">The type of the original value.</param>
            <param name="destinationType">The converted value type.</param>
        </member>
        <member name="T:StardewUI.Framework.Sources.ConvertedValueSource`2">
            <summary>
            A value source that wraps another <see cref="T:StardewUI.Framework.Sources.IValueSource`1"/> and performs automatic conversion.
            </summary>
            <typeparam name="TSource">The original value type, i.e. of the <paramref name="source"/>.</typeparam>
            <typeparam name="T">The converted value type.</typeparam>
            <param name="source">The original value source.</param>
            <param name="inputConverter">A converter that converts from <typeparamref name="TSource"/> to
            <typeparamref name="T"/>. If this is <c>null</c>, then this instance's <see cref="P:StardewUI.Framework.Sources.ConvertedValueSource`2.Value"/> will always be
            <c>null</c> and <see cref="P:StardewUI.Framework.Sources.ConvertedValueSource`2.CanRead"/> will be <c>false</c> regardless of the underlying <paramref name="source"/>'s
            readability.</param>
            <param name="outputConverter">A converter that converts from <typeparamref name="T"/> to
            <typeparamref name="TSource"/>. If this is <c>null</c>, then this instance cannot accept any assignments to the
            <see cref="P:StardewUI.Framework.Sources.ConvertedValueSource`2.Value"/> property, and <see cref="P:StardewUI.Framework.Sources.ConvertedValueSource`2.CanWrite"/> will always be <c>false</c> regardless of the underlying
            <paramref name="source"/>'s writability.</param>
        </member>
        <member name="M:StardewUI.Framework.Sources.ConvertedValueSource`2.#ctor(StardewUI.Framework.Sources.IValueSource{`0},StardewUI.Framework.Converters.IValueConverter{`0,`1},StardewUI.Framework.Converters.IValueConverter{`1,`0})">
            <summary>
            A value source that wraps another <see cref="T:StardewUI.Framework.Sources.IValueSource`1"/> and performs automatic conversion.
            </summary>
            <typeparam name="TSource">The original value type, i.e. of the <paramref name="source"/>.</typeparam>
            <typeparam name="T">The converted value type.</typeparam>
            <param name="source">The original value source.</param>
            <param name="inputConverter">A converter that converts from <typeparamref name="TSource"/> to
            <typeparamref name="T"/>. If this is <c>null</c>, then this instance's <see cref="P:StardewUI.Framework.Sources.ConvertedValueSource`2.Value"/> will always be
            <c>null</c> and <see cref="P:StardewUI.Framework.Sources.ConvertedValueSource`2.CanRead"/> will be <c>false</c> regardless of the underlying <paramref name="source"/>'s
            readability.</param>
            <param name="outputConverter">A converter that converts from <typeparamref name="T"/> to
            <typeparamref name="TSource"/>. If this is <c>null</c>, then this instance cannot accept any assignments to the
            <see cref="P:StardewUI.Framework.Sources.ConvertedValueSource`2.Value"/> property, and <see cref="P:StardewUI.Framework.Sources.ConvertedValueSource`2.CanWrite"/> will always be <c>false</c> regardless of the underlying
            <paramref name="source"/>'s writability.</param>
        </member>
        <member name="P:StardewUI.Framework.Sources.ConvertedValueSource`2.CanRead">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Sources.ConvertedValueSource`2.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Sources.ConvertedValueSource`2.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Sources.ConvertedValueSource`2.Value">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Sources.ConvertedValueSource`2.ValueType">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Sources.ConvertedValueSource`2.Update(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Sources.IValueSource">
            <summary>
            Holds the type-independent data of an <see cref="T:StardewUI.Framework.Sources.IValueSource`1"/>.
            </summary>
            <remarks>
            Instances of this type should always implement <see cref="T:StardewUI.Framework.Sources.IValueSource`1"/> as well; the non-generic version is
            used when the type is unknown at compile time.
            </remarks>
        </member>
        <member name="P:StardewUI.Framework.Sources.IValueSource.Value">
            <summary>
            Gets or sets the value as a boxed object. The type must be assignable to/from the type parameter of the
            <see cref="T:StardewUI.Framework.Sources.IValueSource`1"/> that this instance implements.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Sources.IValueSource.CanRead">
            <summary>
            Whether or not the source can be read from, i.e. if an attempt to <b>get</b> the <see cref="P:StardewUI.Framework.Sources.IValueSource.Value"/> should
            succeed.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Sources.IValueSource.CanWrite">
            <summary>
            Whether or not the source can be written back to, i.e. if an attempt to <b>set</b> the <see cref="P:StardewUI.Framework.Sources.IValueSource.Value"/>
            should succeed.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Sources.IValueSource.DisplayName">
            <summary>
            Descriptive name for the property, used primarily for debug views and log/exception messages.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.Sources.IValueSource.ValueType">
            <summary>
            The compile-time type of the value tracked by this source; the type parameter for <see cref="T:StardewUI.Framework.Sources.IValueSource`1"/>.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Sources.IValueSource.Update(System.Boolean)">
            <summary>
            Checks if the value needs updating, and if so, updates <see cref="P:StardewUI.Framework.Sources.IValueSource.Value"/> to the latest.
            </summary>
            <remarks>
            This method is called every frame, for every binding, and providing a correct return value is essential in order
            to avoid slowdowns due to unnecessary rebinds.
            </remarks>
            <param name="force">If <c>true</c>, forces the source to update its value even if it isn't considered dirty.
            This should never be used in a regular binding, but can be useful in sources that are intended for occasional or
            one-shot use such as event handler arguments.</param>
            <returns><c>true</c> if the <see cref="P:StardewUI.Framework.Sources.IValueSource.Value"/> was updated; <c>false</c> if it already held the most recent
            value.</returns>
        </member>
        <member name="T:StardewUI.Framework.Sources.IValueSource`1">
            <summary>
            Abstract representation of the source of any value, generally as used in a data binding.
            </summary>
            <typeparam name="T">Type of value supplied.</typeparam>
        </member>
        <member name="P:StardewUI.Framework.Sources.IValueSource`1.Value">
            <summary>
            Gets the current value obtained from the most recent <see cref="M:StardewUI.Framework.Sources.IValueSource.Update(System.Boolean)"/>, or writes a new value
            when set.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.Sources.TranslationValueSource">
            <summary>
            Value source that reads the localized string from a translation key.
            </summary>
            <param name="scope">The scope providing access to translation values.</param>
            <param name="key">The translation key.</param>
        </member>
        <member name="M:StardewUI.Framework.Sources.TranslationValueSource.#ctor(StardewUI.Framework.Content.IResolutionScope,System.String)">
            <summary>
            Value source that reads the localized string from a translation key.
            </summary>
            <param name="scope">The scope providing access to translation values.</param>
            <param name="key">The translation key.</param>
        </member>
        <member name="P:StardewUI.Framework.Sources.TranslationValueSource.CanRead">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Sources.TranslationValueSource.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Sources.TranslationValueSource.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Sources.TranslationValueSource.Value">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Sources.TranslationValueSource.ValueType">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Framework.Sources.TranslationValueSource.StardewUI#Framework#Sources#IValueSource#Value">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Sources.TranslationValueSource.Update(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Sources.IValueSourceFactory">
            <summary>
            Provides methods to look up runtime value types and build appropriate sources based on their binding information.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Sources.IValueSourceFactory.GetValueSource(System.Type,StardewUI.Framework.Dom.IArgument,StardewUI.Framework.Binding.BindingContext)">
            <summary>
            Creates a value source that supplies values of a given type according to the specified argument binding.
            </summary>
            <param name="type">The type of value to obtain; can be determined using
            <see cref="M:StardewUI.Framework.Sources.IValueSourceFactory.GetValueType(StardewUI.Framework.Dom.IArgument,StardewUI.Framework.Binding.BindingContext)"/>.</param>
            <param name="argument">The parsed markup argument containing the binding info.</param>
            <param name="context">The binding context to use for any contextual bindings (those with
            <see cref="F:StardewUI.Framework.Grammar.ArgumentExpressionType.ContextBinding"/>).</param>
        </member>
        <member name="M:StardewUI.Framework.Sources.IValueSourceFactory.GetValueSource(System.Type,StardewUI.Framework.Dom.IAttribute,StardewUI.Framework.Binding.BindingContext,StardewUI.Framework.Content.IResolutionScope)">
            <summary>
            Creates a value source that supplies values of a given type according to the specified binding attribute.
            </summary>
            <param name="type">The type of value to obtain; can be determined using
            <see cref="M:StardewUI.Framework.Sources.IValueSourceFactory.GetValueType(StardewUI.Framework.Dom.IAttribute,StardewUI.Framework.Descriptors.IPropertyDescriptor,StardewUI.Framework.Binding.BindingContext)"/>.</param>
            <param name="attribute">The parsed markup attribute containing the binding info.</param>
            <param name="context">The binding context to use for any contextual bindings (those with
            <see cref="F:StardewUI.Framework.Grammar.ArgumentExpressionType.ContextBinding"/>).</param>
            <param name="scope">Scope for resolving externalized attributes, such as translation keys.</param>
        </member>
        <member name="M:StardewUI.Framework.Sources.IValueSourceFactory.GetValueSource``1(StardewUI.Framework.Dom.IArgument,StardewUI.Framework.Binding.BindingContext)">
            <summary>
            Creates a value source that supplies values according to the specified argument binding.
            </summary>
            <typeparam name="T">Type of value to obtain; same as the result of
            <see cref="M:StardewUI.Framework.Sources.IValueSourceFactory.GetValueType(StardewUI.Framework.Dom.IArgument,StardewUI.Framework.Binding.BindingContext)"/>.</typeparam>
            <param name="argument">The parsed markup argument containing the binding info.</param>
            <param name="context">The binding context to use for any contextual bindings (those with
            <see cref="F:StardewUI.Framework.Grammar.AttributeValueType.InputBinding"/>, <see cref="F:StardewUI.Framework.Grammar.AttributeValueType.OneTimeBinding"/>,
            <see cref="F:StardewUI.Framework.Grammar.AttributeValueType.OutputBinding"/> or <see cref="F:StardewUI.Framework.Grammar.AttributeValueType.TwoWayBinding"/>).</param>
        </member>
        <member name="M:StardewUI.Framework.Sources.IValueSourceFactory.GetValueSource``1(StardewUI.Framework.Dom.IAttribute,StardewUI.Framework.Binding.BindingContext,StardewUI.Framework.Content.IResolutionScope)">
            <summary>
            Creates a value source that supplies values according to the specified binding attribute.
            </summary>
            <typeparam name="T">Type of value to obtain; same as the result of
            <see cref="M:StardewUI.Framework.Sources.IValueSourceFactory.GetValueType(StardewUI.Framework.Dom.IAttribute,StardewUI.Framework.Descriptors.IPropertyDescriptor,StardewUI.Framework.Binding.BindingContext)"/>.</typeparam>
            <param name="attribute">The parsed markup attribute containing the binding info.</param>
            <param name="context">The binding context to use for any contextual bindings (those with
            <see cref="F:StardewUI.Framework.Grammar.AttributeValueType.InputBinding"/>, <see cref="F:StardewUI.Framework.Grammar.AttributeValueType.OneTimeBinding"/>,
            <see cref="F:StardewUI.Framework.Grammar.AttributeValueType.OutputBinding"/> or <see cref="F:StardewUI.Framework.Grammar.AttributeValueType.TwoWayBinding"/>).</param>
            <param name="scope">Scope for resolving externalized attributes, such as translation keys.</param>
        </member>
        <member name="M:StardewUI.Framework.Sources.IValueSourceFactory.GetValueType(StardewUI.Framework.Dom.IArgument,StardewUI.Framework.Binding.BindingContext)">
            <summary>
            Determines the type of value that will be supplied by a given argument binding, and with the specified context.
            </summary>
            <remarks>
            This provides the type argument that must be supplied to
            <see cref="M:StardewUI.Framework.Sources.IValueSourceFactory.GetValueSource(System.Type,StardewUI.Framework.Dom.IArgument,StardewUI.Framework.Binding.BindingContext)"/>.
            </remarks>
            <param name="argument">The parsed markup argument containing the binding info.</param>
            <param name="context">The binding context to use for any contextual bindings (those with
            <see cref="F:StardewUI.Framework.Grammar.ArgumentExpressionType.ContextBinding"/>).</param>
        </member>
        <member name="M:StardewUI.Framework.Sources.IValueSourceFactory.GetValueType(StardewUI.Framework.Dom.IAttribute,StardewUI.Framework.Descriptors.IPropertyDescriptor,StardewUI.Framework.Binding.BindingContext)">
            <summary>
            Determines the type of value that will be supplied by a given attribute binding, and with the specified context.
            </summary>
            <remarks>
            This provides the type argument that must be supplied to
            <see cref="M:StardewUI.Framework.Sources.IValueSourceFactory.GetValueSource``1(StardewUI.Framework.Dom.IAttribute,StardewUI.Framework.Binding.BindingContext,StardewUI.Framework.Content.IResolutionScope)"/>.
            </remarks>
            <param name="attribute">The parsed markup attribute containing the binding info.</param>
            <param name="property">Binding metadata for the destination property; used when the source does not encode any
            independent type information. If not specified, some attribute values may be unsupported.</param>
            <param name="context">The binding context to use for any contextual bindings (those with
            <see cref="F:StardewUI.Framework.Grammar.AttributeValueType.InputBinding"/>, <see cref="F:StardewUI.Framework.Grammar.AttributeValueType.OneTimeBinding"/>,
            <see cref="F:StardewUI.Framework.Grammar.AttributeValueType.OutputBinding"/> or <see cref="F:StardewUI.Framework.Grammar.AttributeValueType.TwoWayBinding"/>).</param>
        </member>
        <member name="T:StardewUI.Framework.Sources.ValueSourceFactory">
            <summary>
            Default implementation of the <see cref="T:StardewUI.Framework.Sources.IValueSourceFactory"/> supporting all binding types.
            </summary>
            <param name="assetCache">The current asset cache, for any asset-scoped bindings.</param>
        </member>
        <member name="M:StardewUI.Framework.Sources.ValueSourceFactory.#ctor(StardewUI.Framework.Content.IAssetCache)">
            <summary>
            Default implementation of the <see cref="T:StardewUI.Framework.Sources.IValueSourceFactory"/> supporting all binding types.
            </summary>
            <param name="assetCache">The current asset cache, for any asset-scoped bindings.</param>
        </member>
        <member name="M:StardewUI.Framework.Sources.ValueSourceFactory.Warmup">
            <summary>
            Pre-initializes some reflection state in order to make future invocations faster.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Sources.ValueSourceFactory.GetValueSource(System.Type,StardewUI.Framework.Dom.IArgument,StardewUI.Framework.Binding.BindingContext)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Sources.ValueSourceFactory.GetValueSource``1(StardewUI.Framework.Dom.IArgument,StardewUI.Framework.Binding.BindingContext)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Sources.ValueSourceFactory.GetValueSource(System.Type,StardewUI.Framework.Dom.IAttribute,StardewUI.Framework.Binding.BindingContext,StardewUI.Framework.Content.IResolutionScope)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Sources.ValueSourceFactory.GetValueSource``1(StardewUI.Framework.Dom.IAttribute,StardewUI.Framework.Binding.BindingContext,StardewUI.Framework.Content.IResolutionScope)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Sources.ValueSourceFactory.GetValueType(StardewUI.Framework.Dom.IArgument,StardewUI.Framework.Binding.BindingContext)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Sources.ValueSourceFactory.GetValueType(StardewUI.Framework.Dom.IAttribute,StardewUI.Framework.Descriptors.IPropertyDescriptor,StardewUI.Framework.Binding.BindingContext)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.SpriteMaps">
            <summary>
            Sprite maps included with the framework, e.g. for button prompts, keybinds, etc.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.SpriteMaps.#ctor(StardewModdingAPI.IModHelper)">
            <summary>
            Sprite maps included with the framework, e.g. for button prompts, keybinds, etc.
            </summary>
        </member>
        <member name="F:StardewUI.Framework.SpriteMaps.AssetNamePrefix">
            <summary>
            Asset name prefix that should be used for all sprite assets.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.SpriteMaps.KeybindButtons">
            <summary>
            Sprite sheet containing the sprites for gamepad buttons.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.SpriteMaps.KeybindKeys">
            <summary>
            Sprite sheet containing the sprites used for keyboard keys.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.SpriteMaps.MouseButtons">
            <summary>
            Sprite sheet containing the sprites used for mouse buttons.
            </summary>
        </member>
        <member name="P:StardewUI.Framework.SpriteMaps.PromptArrows">
            <summary>
            Sprite sheet containing arrows used in button prompts.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.SpriteMaps.GetButtonSpriteMap(System.String,System.String,System.Single)">
            <summary>
            Gets the sprite map for gamepad buttons/keyboard keys used in keybinds/button prompts.
            </summary>
            <param name="keyboardThemeName">Name of the color theme to use for keyboard button prompts.</param>
            <param name="mouseThemeName">Name of the color theme to use for mouse button prompts.</param>
            <param name="sliceScale">The <see cref="P:StardewUI.Graphics.SliceSettings.Scale"/> to apply to any 9-slice sprites.</param>
        </member>
        <member name="M:StardewUI.Framework.SpriteMaps.GetDirectionSpriteMap">
            <summary>
            Gets the sprite map for arrows used in positioning and other UI prompts.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.TypeExtensions">
            <summary>
            Type extensions/helpers used in various reflection code.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.TypeExtensions.GetEnumerableElementType(System.Type)">
            <summary>
            For a given type, attempts to infer the element type of any implemented <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface.
            </summary>
            <param name="type">The type which may or may not implement <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>The <c>T</c> type parameter of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface implemented by the given
            <paramref name="type"/>, or <c>null</c> if no such implementation exists.</returns>
        </member>
        <member name="T:StardewUI.Framework.UIException">
            <summary>
            Base class for all exceptions specific to StardewUI.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.UIException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StardewUI.Framework.UIException"/> class.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.UIException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StardewUI.Framework.UIException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:StardewUI.Framework.UIException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:StardewUI.Framework.UIException"/> class with a specified error message and a reference
            to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if not
            specified.</param>
        </member>
        <member name="T:StardewUI.Framework.Views.DynamicDropDownList">
            <summary>
            Adapter for a drop-down list with a dynamic value type, i.e. that can change the type of its option list, formatter,
            etc. according to the current bindings.
            </summary>
            <remarks>
            This class is only intended for framework use. When creating drop-down lists in custom widgets or app views, callers
            should use the generic <see cref="T:StardewUI.Widgets.DropDownList`1"/> instead. Dynamic lists require additional overhead, and may not
            fully sync their properties until the next update tick, unlike regular drop-down lists which update immediately.
            </remarks>
        </member>
        <member name="E:StardewUI.Framework.Views.DynamicDropDownList.Select">
            <inheritdoc cref="E:StardewUI.Widgets.DropDownList`1.Select" />
        </member>
        <member name="P:StardewUI.Framework.Views.DynamicDropDownList.MaxListHeight">
            <inheritdoc cref="P:StardewUI.Widgets.DropDownList`1.MaxListHeight" />
        </member>
        <member name="P:StardewUI.Framework.Views.DynamicDropDownList.OptionFormat">
            <inheritdoc cref="P:StardewUI.Widgets.DropDownList`1.OptionFormat" />
        </member>
        <member name="P:StardewUI.Framework.Views.DynamicDropDownList.OptionMaxLines">
            <inheritdoc cref="P:StardewUI.Widgets.DropDownList`1.OptionMaxLines" />
        </member>
        <member name="P:StardewUI.Framework.Views.DynamicDropDownList.OptionMinWidth">
            <inheritdoc cref="P:StardewUI.Widgets.DropDownList`1.OptionMinWidth" />
        </member>
        <member name="P:StardewUI.Framework.Views.DynamicDropDownList.Options">
            <inheritdoc cref="P:StardewUI.Widgets.DropDownList`1.Options" />
        </member>
        <member name="P:StardewUI.Framework.Views.DynamicDropDownList.SelectedIndex">
            <inheritdoc cref="P:StardewUI.Widgets.DropDownList`1.SelectedIndex" />
        </member>
        <member name="P:StardewUI.Framework.Views.DynamicDropDownList.SelectedOption">
            <inheritdoc cref="P:StardewUI.Widgets.DropDownList`1.SelectedOption" />
        </member>
        <member name="P:StardewUI.Framework.Views.DynamicDropDownList.SelectionFrameLayout">
            <inheritdoc cref="P:StardewUI.Widgets.DropDownList`1.SelectionFrameLayout" />
        </member>
        <member name="P:StardewUI.Framework.Views.DynamicDropDownList.SelectedOptionText">
            <inheritdoc cref="P:StardewUI.Widgets.DropDownList`1.SelectedOptionText" />
        </member>
        <member name="M:StardewUI.Framework.Views.DynamicDropDownList.#ctor">
            <summary>
            Initializes a new <see cref="T:StardewUI.Framework.Views.DynamicDropDownList"/> instance.
            </summary>
        </member>
        <member name="M:StardewUI.Framework.Views.DynamicDropDownList.Dispose">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Framework.Views.DynamicDropDownList.OnUpdate(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Framework.Warmups">
            <summary>
            Helpers for warming up various caches that can sometimes be slow to lazy-load.
            </summary>
        </member>
        <member name="T:StardewUI.Framework.I18n">
            <summary>Get translations from the mod's <c>i18n</c> folder.</summary>
            <remarks>This is auto-generated from the <c>i18n/default.json</c> file when the project is compiled.</remarks>
        </member>
        <member name="F:StardewUI.Framework.I18n.Translations">
            <summary>The mod's translation helper.</summary>
        </member>
        <member name="T:StardewUI.Framework.I18n.Keys">
            <summary>A lookup of available translation keys.</summary>
        </member>
        <member name="F:StardewUI.Framework.I18n.Keys.SettingsMenu_Title">
            <summary>The unique key for a translation equivalent to "Settings".</summary>
        </member>
        <member name="M:StardewUI.Framework.I18n.Init(StardewModdingAPI.ITranslationHelper)">
            <summary>Construct an instance.</summary>
            <param name="translations">The mod's translation helper.</param>
        </member>
        <member name="M:StardewUI.Framework.I18n.SettingsMenu_Title">
            <summary>Get a translation equivalent to "Settings".</summary>
        </member>
        <member name="M:StardewUI.Framework.I18n.GetByKey(System.String,System.Object)">
            <summary>Get a translation by its key.</summary>
            <param name="key">The translation key.</param>
            <param name="tokens">An object containing token key/value pairs. This can be an anonymous object (like <c>new { value = 42, name = "Cranberries" }</c>), a dictionary, or a class instance.</param>
            <remarks>You should usually use a strongly-typed method like <see cref="M:StardewUI.Framework.I18n.SettingsMenu_Title" /> instead.</remarks>
        </member>
        <member name="T:StardewUI.UI">
            <summary>
            Entry point for Stardew UI. Must be called from <see cref="M:StardewModdingAPI.Mod.Entry(StardewModdingAPI.IModHelper)"/>.
            </summary>
        </member>
        <member name="F:StardewUI.UI.addons">
            <summary>
            The add-ons registered so far.
            </summary>
        </member>
        <member name="M:StardewUI.UI.RegisterAddon(StardewUI.Framework.Addons.IAddon)">
            <summary>
            Registers a UI add-on (mod extension).
            </summary>
            <remarks>
            <para>
            Add-ons are resolved in the game's <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.GameLaunched"/> event.
            Therefore, mods providing add-ons must register them as early as possible, typically in their
            <see cref="M:StardewModdingAPI.Mod.Entry(StardewModdingAPI.IModHelper)"/> method, but if that is too early, then in a <c>GameLaunched</c> handler of
            their own with a high <see cref="T:StardewModdingAPI.Events.EventPriority"/>.
            </para>
            <para>
            Types provided by add-ons (views, converters, etc.) will not actually be used until a UI is created, so add-ons
            may employ lazy/deferred loading if they need to postpone some critical operations until after the game is fully
            loaded, other APIs are initialized, etc.
            </para>
            </remarks>
            <param name="addon">The add-on definition.</param>
        </member>
        <member name="M:StardewUI.UI.ResolveLoadOrder">
            <summary>
            For all add-ons registered so far, determines a correct load order such that all dependencies are met.
            </summary>
            <remarks>
            Any add-ons whose dependencies cannot be satisfied will be excluded from the load order, and errors will be
            logged for any dependencies that failed to load.
            </remarks>
            <returns>A safe load order for registered add-ons.</returns>
        </member>
        <member name="P:StardewUI.UI.InputHelper">
            <summary>
            Helper for game input.
            </summary>
        </member>
        <member name="M:StardewUI.UI.Initialize(StardewModdingAPI.IModHelper,StardewModdingAPI.IMonitor)">
            <summary>
            Initialize the framework.
            </summary>
            <param name="helper">Helper for the calling mod.</param>
            <param name="monitor">SMAPI logging helper.</param>
        </member>
        <member name="T:StardewUI.Widgets.Banner">
            <summary>
            Draws banner-style text with an optional background.
            </summary>
            <remarks>
            This is very similar to a <see cref="T:StardewUI.Widgets.Label"/> inside a <see cref="T:StardewUI.Widgets.Frame"/>, but uses the special
            <see cref="T:StardewValley.BellsAndWhistles.SpriteText"/> font which is more prominent than any of the game's available
            <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteFont"/>s and often used for top-level headings/menu titles.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Banner.Background">
            <summary>
            Background sprite (including border) to draw underneath the text.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Banner.BackgroundBorderThickness">
            <summary>
            The thickness of the border edges within the <see cref="P:StardewUI.Widgets.Banner.Background"/>. sprite.
            </summary>
            <remarks>
            This property has no effect on the appearance of the <see cref="P:StardewUI.Widgets.Banner.Background"/>, but affects how content is
            positioned inside the border. It is often correct to set it to the same value as the
            <see cref="P:StardewUI.Graphics.Sprite.FixedEdges"/> of the <see cref="P:StardewUI.Widgets.Banner.Background"/> sprite, but the values are considered
            independent.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Banner.Text">
            <summary>
            The text to display within the banner.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Banner.TextShadowAlpha">
            <summary>
            Alpha value for the text shadow, per layer in <see cref="T:StardewUI.Widgets.ShadowLayers"/>.
            </summary>
            <remarks>
            If set to zero, no text shadow will be drawn.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Banner.TextShadowColor">
            <summary>
            Base color for the text shadow, before applying <see cref="P:StardewUI.Widgets.Banner.TextShadowAlpha"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Banner.TextShadowLayers">
            <summary>
            Specifies which layers of the text shadow should be drawn.
            </summary>
            <remarks>
            Layers are additive, so the same <see cref="P:StardewUI.Widgets.Banner.TextShadowAlpha"/> will have a different visual intensity depending
            on which layers are allowed. If set to <see cref="F:StardewUI.Widgets.ShadowLayers.None"/>, then no shadow will be drawn.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Banner.TextShadowOffset">
            <summary>
            Offset to draw the text shadow, which is a second copy of the <see cref="P:StardewUI.Widgets.Banner.Text"/> drawn entirely black.
            Text shadows will not be visible unless <see cref="P:StardewUI.Widgets.Banner.TextShadowAlpha"/> is non-zero.
            </summary>
        </member>
        <member name="M:StardewUI.Widgets.Banner.GetBorderThickness">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Banner.IsContentDirty">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Banner.OnDrawBorder(StardewUI.Graphics.ISpriteBatch)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Banner.OnDrawContent(StardewUI.Graphics.ISpriteBatch)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Banner.OnMeasure(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Banner.ResetDirty">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Widgets.Button">
            <summary>
            Simple button with optional hover background.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Button.Content">
            <summary>
            Content view to display inside the button frame.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Button.DefaultBackground">
            <summary>
            The default background to show for the button's idle state.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Button.DefaultBackgroundTint">
            <summary>
            Tint color for the <see cref="P:StardewUI.Widgets.Button.DefaultBackground"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Button.Font">
            <summary>
            Font with which to render button text.
            </summary>
            <remarks>
            This setting only applies when the <see cref="P:StardewUI.Widgets.Button.Content"/> view is a <see cref="T:StardewUI.Widgets.Label"/>, either via passing in
            a <see cref="T:StardewUI.Widgets.Label"/> directly or by setting <see cref="P:StardewUI.Widgets.Button.Text"/>.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Button.HoverBackground">
            <summary>
            Alternate background sprite when the button has cursor focus.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Button.HoverBackgroundTint">
            <summary>
            Tint color for the <see cref="P:StardewUI.Widgets.Button.HoverBackground"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Button.Margin">
            <summary>
            Margin to add outside the button.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Button.ShadowVisible">
            <summary>
            Whether or not to display a drop shadow for the button frame. Default <c>false</c>.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Button.Text">
            <summary>
            Text to display inside the button.
            </summary>
            <remarks>
            If the <see cref="P:StardewUI.Widgets.Button.Content"/> is not a <see cref="T:StardewUI.Widgets.Label"/> then this is always <c>null</c>, even if there is a
            label nested somewhere inside a different type of view. Setting this to any string value will <b>replace</b> the
            <see cref="P:StardewUI.Widgets.Button.Content"/> view with a <see cref="T:StardewUI.Widgets.Label"/> having the specified text.
            </remarks>
        </member>
        <member name="M:StardewUI.Widgets.Button.CreateView">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Widgets.CheckBox">
            <summary>
            A togglable checkbox.
            </summary>
        </member>
        <member name="E:StardewUI.Widgets.CheckBox.Change">
            <summary>
            Event raised when the checked state changes.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.CheckBox.CheckedSprite">
            <summary>
            Sprite to display when the box is checked, if not using the default.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.CheckBox.IsChecked">
            <summary>
            Whether or not the box is checked.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.CheckBox.LabelColor">
            <summary>
            Color with which to render any <see cref="P:StardewUI.Widgets.CheckBox.LabelText"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.CheckBox.LabelText">
            <summary>
            Optional label text to be displayed to the right of the checkbox image.
            </summary>
            <remarks>
            The label text is clickable as part of the checkbox, but does not receive focus.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.CheckBox.Margin">
            <inheritdoc cref="P:StardewUI.View.Margin"/>
        </member>
        <member name="P:StardewUI.Widgets.CheckBox.Opacity">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Widgets.CheckBox.UncheckedSprite">
            <summary>
            Sprite to display when the box is unchecked, if not using the default.
            </summary>
        </member>
        <member name="M:StardewUI.Widgets.CheckBox.CreateView">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Widgets.ColorPicker">
            <summary>
            Drop-down style widget that opens a detailed color wheel/slider overlay for choosing a precise color.
            </summary>
        </member>
        <member name="E:StardewUI.Widgets.ColorPicker.Change">
            <summary>
            Event raised when the selected color changes.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.ColorPicker.Color">
            <summary>
            The current color.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.ColorPicker.Presets">
            <summary>
            Preset colors to show at the bottom, providing single click convenience for the most common colors.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.ColorPicker.WheelSprite">
            <summary>
            Sprite to display for the Hue-Saturation color wheel.
            </summary>
        </member>
        <member name="M:StardewUI.Widgets.ColorPicker.CreateView">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Widgets.Expander">
            <summary>
            A widget that can be clicked to expand/collapse with additional content.
            </summary>
        </member>
        <member name="E:StardewUI.Widgets.Expander.ExpandedChange">
            <summary>
            Event that fires when the <see cref="P:StardewUI.Widgets.Expander.IsExpanded"/> property is changed, either externally
            or by clicking on the header.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Expander.Content">
            <summary>
            The main content, displayed when expanded.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Expander.CollapsedSprite">
            <summary>
            Sprite to show next to the header when collapsed.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Expander.ExpandedSprite">
            <summary>
            Sprite to show next to the header when expanded.
            </summary>
            <remarks>
            If this is <c>null</c>, and <see cref="P:StardewUI.Widgets.Expander.CollapsedSprite"/> is not null, then the
            <see cref="P:StardewUI.Widgets.Expander.CollapsedSprite"/> will be rotated clockwise on expansion.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Expander.FloatingElements">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Widgets.Expander.Header">
            <summary>
            The primary content, which displays inside the menu frame and is clipped/scrollable.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Expander.HeaderBackground">
            <summary>
            Background sprite to display around the <see cref="P:StardewUI.Widgets.Expander.Header"/> and expansion indicator.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Expander.HeaderBackgroundTint">
            <summary>
            Tint color for the <see cref="P:StardewUI.Widgets.Expander.HeaderBackground"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Expander.HeaderLayout">
            <summary>
            Configures the layout of the header lane that includes the indicator and
            <see cref="P:StardewUI.Widgets.Expander.Header"/> content.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Expander.HeaderPadding">
            <summary>
            Padding to apply between the header border and content (including indicator).
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Expander.IsExpanded">
            <summary>
            Whether or not the view is expanded, i.e. whether or not to display the
            <see cref="P:StardewUI.Widgets.Expander.Content"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Expander.Margin">
            <summary>
            Margin around the entire widget. Same behavior as <see cref="P:StardewUI.View.Margin"/>.
            </summary>
        </member>
        <member name="M:StardewUI.Widgets.Expander.CreateView">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Widgets.Frame">
            <summary>
            A view that holds another view, typically for the purpose of adding a border or background, or in some cases
            swapping out the content.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Frame.Background">
            <summary>
            The background sprite to draw for this frame.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Frame.BackgroundTint">
            <summary>
            Tint color for the <see cref="P:StardewUI.Widgets.Frame.Background"/> image.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Frame.Border">
            <summary>
            The border sprite to draw for this frame.
            </summary>
            <remarks>
            Setting a border here does not affect layout, even if <see cref="P:StardewUI.Graphics.Sprite.FixedEdges"/> are set to non-zero
            values, since fixed edges only govern scaling and are not necessarily the same as the actual edge thicknesses.
            To ensure that inner content does not overlap with the border, <see cref="P:StardewUI.Widgets.Frame.BorderThickness"/> should also be set
            when using a border.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Frame.BorderThickness">
            <summary>
            The thickness of the border edges.
            </summary>
            <remarks>
            This property has no effect on the appearance of the <see cref="P:StardewUI.Widgets.Frame.Border"/>, but affects how content is positioned
            inside the border. It is often correct to set it to the same value as the <see cref="P:StardewUI.Graphics.Sprite.FixedEdges"/> of the
            <see cref="P:StardewUI.Widgets.Frame.Border"/> sprite, but the values are considered independent.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Frame.BorderTint">
            <summary>
            Tint color for the <see cref="P:StardewUI.Widgets.Frame.Border"/> image.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Frame.Content">
            <summary>
            The inner content view, which will render inside the border and padding.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Frame.HorizontalContentAlignment">
            <summary>
            Specifies how to align the <see cref="P:StardewUI.Widgets.Frame.Content"/> horizontally within the frame's area. Only has an effect if the
            frame's content area is larger than the content size, i.e. when <see cref="P:StardewUI.Layout.LayoutParameters.Width"/> does
            <i>not</i> use <see cref="F:StardewUI.Layout.LengthType.Content"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Frame.ShadowAlpha">
            <summary>
            Alpha value for the shadow. If set to the default of zero, no shadow will be drawn.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Frame.ShadowCount">
            <summary>
            Number of shadows to draw if <see cref="P:StardewUI.Widgets.Frame.ShadowAlpha"/> is non-zero.
            </summary>
            <remarks>
            While rare, some game sprites are supposed to be drawn with multiple stacked shadows. If this number is higher
            than the default of <c>1</c>, shadows will be drawn stacked with the offset repeatedly applied.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Frame.ShadowOffset">
            <summary>
            Offset to draw the sprite shadow, which is a second copy of the <see cref="P:StardewUI.Widgets.Frame.Background"/> drawn entirely black.
            Shadows will not be visible unless <see cref="P:StardewUI.Widgets.Frame.ShadowAlpha"/> is non-zero.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Frame.VerticalContentAlignment">
            <summary>
            Specifies how to align the <see cref="P:StardewUI.Widgets.Frame.Content"/> vertically within the frame's area. Only has an effect if the
            frame's content area is larger than the content size, i.e. when <see cref="P:StardewUI.Layout.LayoutParameters.Height"/> does
            <i>not</i> use <see cref="F:StardewUI.Layout.LengthType.Content"/>.
            </summary>
        </member>
        <member name="M:StardewUI.Widgets.Frame.FindFocusableDescendant(Microsoft.Xna.Framework.Vector2,StardewUI.Direction)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Frame.GetBorderThickness">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Frame.GetLocalChildren">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Frame.HasOwnContent">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Frame.IsContentDirty">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Frame.OnDrawBorder(StardewUI.Graphics.ISpriteBatch)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Frame.OnDrawContent(StardewUI.Graphics.ISpriteBatch)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Frame.OnMeasure(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Frame.ResetDirty">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Widgets.GhostView">
            <summary>
            A view that draws an exact copy of another view, generally with a tint and transparency to indicate that it is not
            the original view. Can be used for dragging, indicating target snap positions, etc.
            </summary>
            <remarks>
            The <see cref="P:StardewUI.Widgets.GhostView.RealView"/> must be part of a real layout in order for the ghosting to work correctly;
            <see cref="T:StardewUI.Widgets.GhostView"/> does no layout or layout-forwarding of its own.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.GhostView.RealView">
            <summary>
            The view for which a copy will be drawn.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.GhostView.TintColor">
            <summary>
            Color of the ghost.
            </summary>
            <remarks>
            This tint is multiplied against the <see cref="P:StardewUI.Widgets.GhostView.RealView"/>'s pixel values and acts as a recolor; for example,
            specifying <see cref="P:Microsoft.Xna.Framework.Color.Red"/> here will result in the ghost being entirely red and black.
            </remarks>
        </member>
        <member name="M:StardewUI.Widgets.GhostView.HasOwnContent">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.GhostView.OnDrawContent(StardewUI.Graphics.ISpriteBatch)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.GhostView.OnMeasure(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Widgets.Grid">
            <summary>
            A uniform grid containing other views.
            </summary>
            <remarks>
            Can be configured to use either a fixed cell size, and therefore a variable number of rows and columns depending on
            the grid size, or a fixed number of rows and columns, with a variable size per cell.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Grid.Children">
            <summary>
            Child views to display in this layout, arranged according to the <see cref="P:StardewUI.Widgets.Grid.ItemLayout"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Grid.GridAlignment">
            <summary>
            Specifies how to align the entire grid when the combined length of all columns is not exactly equal to the
            grid's layout length.
            </summary>
            <remarks>
            Applies only to the grid's <see cref="P:StardewUI.Widgets.Grid.PrimaryOrientation"/> axis, which is the axis affected by
            <see cref="P:StardewUI.Widgets.Grid.ItemLayout"/>; the secondary axis does not require or support grid-level alignment because it can
            already be made <see cref="M:StardewUI.Layout.Length.Content"/>-sized.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Grid.HorizontalItemAlignment">
            <summary>
            Specifies how to align each child <see cref="T:StardewUI.IView"/> horizontally within its respective cell, i.e. if the view
            is narrower than the cell's width.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Grid.ItemLayout">
            <summary>
            The layout for items (cells) in this grid.
            </summary>
            <remarks>
            <para>
            Layouts are relative to the <see cref="P:StardewUI.Widgets.Grid.PrimaryOrientation"/>. <see cref="T:StardewUI.Widgets.GridItemLayout.Count"/> specifies the
            number of columns when <see cref="F:StardewUI.Layout.Orientation.Horizontal"/>, and number of rows when
            <see cref="F:StardewUI.Layout.Orientation.Vertical"/>; similarly, <see cref="T:StardewUI.Widgets.GridItemLayout.Length"/> specifies the column width
            when horizontal and row height when vertical. The other dimension is determined by the individual item's own
            <see cref="T:StardewUI.Layout.LayoutParameters"/>.
            </para>
            <para>
            Note that this affects the <i>limits</i> for individual items, not necessarily their exact size. Children may be
            smaller than the cells that contain them, and if so are positioned according to the
            <see cref="P:StardewUI.Widgets.Grid.HorizontalItemAlignment"/> and <see cref="P:StardewUI.Widgets.Grid.VerticalItemAlignment"/>.
            </para>
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Grid.ItemSpacing">
            <summary>
            Spacing between the edges of adjacent columns (<see cref="F:Microsoft.Xna.Framework.Vector2.X"/>) and rows (<see cref="F:Microsoft.Xna.Framework.Vector2.Y"/>).
            </summary>
            <remarks>
            Setting this is roughly equivalent to specifying the same <see cref="P:StardewUI.View.Margin"/> on each child, except that
            it will not add extra space before the first item or after the last item.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Grid.PrimaryOrientation">
            <summary>
            Specifies the axis that items are added to before wrapping.
            </summary>
            <remarks>
            <para>
            <see cref="F:StardewUI.Layout.Orientation.Horizontal"/> means children are added from left to right, and when reaching the edge or
            max column count, start over at the beginning of the next row. <see cref="F:StardewUI.Layout.Orientation.Vertical"/> means children
            flow from top to bottom, and when reaching the bottom, wrap to the top of the next column.
            </para>
            <para>
            Also affects which dimension is fixed and which is potentially unbounded. Horizontally-oriented grids have a
            fixed width and can grow to any height (if <see cref="P:StardewUI.Layout.LayoutParameters.Height"/> is set to
            <see cref="M:StardewUI.Layout.Length.Content"/>). Vertically-oriented grids are the opposite, having a fixed height and growing to
            an arbitrary width.
            </para>
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Grid.VerticalItemAlignment">
            <summary>
            Specifies how to align each child <see cref="T:StardewUI.IView"/> vertically within its respective cell, i.e. if the view
            is shorter than the cell's height.
            </summary>
        </member>
        <member name="M:StardewUI.Widgets.Grid.FindFocusableDescendant(Microsoft.Xna.Framework.Vector2,StardewUI.Direction)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Grid.GetLocalChildren">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Grid.GetLocalChildrenAt(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Grid.HasOwnContent">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Grid.IsContentDirty">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Grid.OnDrawContent(StardewUI.Graphics.ISpriteBatch)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Grid.OnMeasure(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Grid.ResetDirty">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Widgets.Image">
            <summary>
            A view that draws a sprite, scaled to the layout size.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Image.Fit">
            <summary>
            How to fit the image in the content area, if sizes differ.
            </summary>
            <remarks>
            The fit setting is always ignored when <i>both</i> the <see cref="P:StardewUI.Layout.LayoutParameters.Width"/> and
            <see cref="P:StardewUI.Layout.LayoutParameters.Height"/> use <see cref="F:StardewUI.Layout.LengthType.Content"/>, because that combination of settings
            will cause the exact <see cref="P:StardewUI.Graphics.Sprite.SourceRect"/> (or texture bounds, if not specified) as the layout size.
            At least one dimension must be content-independent (fixed or container size) for this to have any effect.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Image.HorizontalAlignment">
            <summary>
            Specifies where to align the image horizontally if the image width is different from the final layout width.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Image.Rotation">
            <summary>
            Rotation to apply to the image.
            </summary>
            <remarks>
            Unlike <see cref="P:StardewUI.Widgets.Image.Scale"/>, rotation potentially <b>does</b> affect layout under specific conditions;
            specifically, if any dimensions are <see cref="F:StardewUI.Layout.LengthType.Content"/> sized, and the rotation is 90° in either
            direction, it will take the opposite dimension for layout. However, images whose dimensions are entirely fixed
            or stretch-based will not have their layout affected.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Image.Scale">
            <summary>
            Scale to apply to the image.
            </summary>
            <remarks>
            This scale acts only as a drawing transformation and does not affect layout; a scaled-up image can potentially
            draw (or clip) outside its container, and a scaled-down image will not shrink the size of an image that
            specifies <see cref="F:StardewUI.Layout.LengthType.Content"/> for either or both dimensions.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Image.ShadowAlpha">
            <summary>
            Alpha value for the shadow. If set to the default of zero, no shadow will be drawn.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Image.ShadowOffset">
            <summary>
            Offset to draw the sprite shadow, which is a second copy of the <see cref="P:StardewUI.Widgets.Image.Sprite"/> drawn entirely black.
            Shadows will not be visible unless <see cref="P:StardewUI.Widgets.Image.ShadowAlpha"/> is non-zero.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Image.Sprite">
            <summary>
            The sprite to draw.
            </summary>
            <remarks>
            If <see cref="T:StardewUI.Layout.LayoutParameters"/> uses <see cref="F:StardewUI.Layout.LengthType.Content"/> for either dimension, then changing the
            sprite can affect layout depending on <see cref="P:StardewUI.Widgets.Image.Fit"/>.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Image.SpriteEffects">
            <summary>
            Sprite effects to apply, such as horizontal or vertical flipping.
            </summary>
            <remarks>
            Effects are applied only during <see cref="M:StardewUI.IView.Draw(StardewUI.Graphics.ISpriteBatch)"/> and do not affect layout.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Image.Tint">
            <summary>
            Tint color (multiplier) to apply when drawing.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Image.VerticalAlignment">
            <summary>
            Specifies where to align the image vertically if the image height is different from the final layout height.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Image.HandlesOpacity">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Image.OnUpdate(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Image.HasOwnContent">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Image.IsContentDirty">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Image.OnDrawContent(StardewUI.Graphics.ISpriteBatch)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Image.OnMeasure(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Image.ResetDirty">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Widgets.Label">
            <summary>
            A view that renders a read-only text string.
            </summary>
        </member>
        <member name="M:StardewUI.Widgets.Label.Simple(System.String,Microsoft.Xna.Framework.Graphics.SpriteFont,System.Nullable{Microsoft.Xna.Framework.Color},System.Int32)">
            <summary>
            Creates a typical, simple run of 1-line text using content sizing.
            </summary>
            <param name="initialText">Initial text to display; can be updated later.</param>
            <param name="font">Font to use, if different from the default label font.</param>
            <param name="color">Color to use, if different from the default font color.</param>
            <param name="margin">Horizontal margin to add.</param>
            <returns></returns>
        </member>
        <member name="P:StardewUI.Widgets.Label.Bold">
            <summary>
            Whether to draw the text in a bold style.
            </summary>
            <remarks>
            Current implementation is based on overdraw, as <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteFont"/> does not support font variants. Changing
            this setting will not affect size/layout.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Label.Color">
            <summary>
            The text color.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Label.Font">
            <summary>
            The font that will be used to render the text.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Label.HorizontalAlignment">
            <summary>
            How to align the text horizontally.
            </summary>
            <remarks>
            This acts differently from setting an <see cref="T:StardewUI.Layout.Alignment"/> on the container view as it applies to each
            individual line of text rather than the entire block of text.
            <example>
            For example, center-aligned text looks like:
            <code>
            +--------------------------------------------+
            |         The quick brown fox jumps          |
            |             over the lazy dog              |
            +--------------------------------------------+
            </code>
            While left-aligned text that is centered in the container looks like:
            <code>
            +--------------------------------------------+
            |         The quick brown fox jumps          |
            |         over the lazy dog                  |
            +--------------------------------------------+
            </code>
            </example>
            Alignment behavior is also sensitive to the width settings in <see cref="P:StardewUI.View.Layout"/>.
            <see cref="F:StardewUI.Layout.Alignment.Middle"/> and <see cref="F:StardewUI.Layout.Alignment.End"/> may have no effect if the width type is set to
            <see cref="F:StardewUI.Layout.LengthType.Content"/>; for non-default alignments to work, one of the other length types is required.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Label.MaxLines">
            <summary>
            Maximum number of lines of text to display when wrapping. Default is <c>0</c> which applies no limit.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Label.Scale">
            <summary>
            Font scaling to apply. Default is <c>1.0</c> (normal size).
            </summary>
            <remarks>
            Applies only to the text itself and not layout properties such as <see cref="P:StardewUI.View.Margin"/>.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Label.ShadowAlpha">
            <summary>
            Alpha value for the text shadow, per layer in <see cref="P:StardewUI.Widgets.Label.ShadowLayers"/>.
            </summary>
            <remarks>
            If set to zero, no text shadow will be drawn.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Label.ShadowColor">
            <summary>
            Base color for the text shadow, before applying <see cref="P:StardewUI.Widgets.Label.ShadowAlpha"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Label.ShadowLayers">
            <summary>
            Specifies which layers of the shadow should be drawn.
            </summary>
            <remarks>
            Layers are additive, so the same <see cref="P:StardewUI.Widgets.Label.ShadowAlpha"/> will have a different visual intensity depending on
            which layers are allowed. If set to <see cref="F:StardewUI.Widgets.ShadowLayers.None"/>, then no shadow will be drawn.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Label.ShadowOffset">
            <summary>
            Offset to draw the text shadow, which is a second copy of the <see cref="P:StardewUI.Widgets.Label.Text"/> drawn entirely black.
            Text shadows will not be visible unless <see cref="P:StardewUI.Widgets.Label.ShadowAlpha"/> is non-zero.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Label.Text">
            <summary>
            The text string to display.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Label.HandlesOpacity">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Label.HasOwnContent">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Label.OnDrawContent(StardewUI.Graphics.ISpriteBatch)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Label.IsContentDirty">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Label.OnMeasure(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Label.ResetDirty">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Widgets.Lane">
            <summary>
            Simple unidirectional layout that draws multiple child views in a row or column arrangement.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Lane.Children">
            <summary>
            Child views to display in this layout.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Lane.HorizontalContentAlignment">
            <summary>
            Specifies how to align the <see cref="P:StardewUI.Widgets.Lane.Children"/> horizontally within the lane's area. Only has an effect if the
            total content area is larger than the content size, i.e. when <see cref="P:StardewUI.Layout.LayoutParameters.Width"/> does
            <i>not</i> use <see cref="F:StardewUI.Layout.LengthType.Content"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Lane.Orientation">
            <summary>
            The layout orientation.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Lane.VerticalContentAlignment">
            <summary>
            Specifies how to align the <see cref="P:StardewUI.Widgets.Lane.Children"/> vertically within the lane's area. Only has an effect if the
            total content area is larger than the content size, i.e. when <see cref="P:StardewUI.Layout.LayoutParameters.Height"/> does
            <i>not</i> use <see cref="F:StardewUI.Layout.LengthType.Content"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Lane.VisibleChildren">
            <summary>
            The children that have received layout and have at least some content visible.
            </summary>
        </member>
        <member name="M:StardewUI.Widgets.Lane.FindFocusableDescendant(Microsoft.Xna.Framework.Vector2,StardewUI.Direction)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Lane.GetLocalChildren">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Lane.HasOwnContent">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Lane.IsContentDirty">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Lane.OnDrawContent(StardewUI.Graphics.ISpriteBatch)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Lane.OnMeasure(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Lane.ResetDirty">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Widgets.Marquee">
            <summary>
            A scrolling marquee supporting any inner content.
            </summary>
            <remarks>
            Works by doubling and shifting the drawing the portion and applying a clipping rectangle, and therefore should be
            used only for non-interactive content; clicks and focus searches will not be correct inside the content area.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Marquee.Content">
            <summary>
            Content to scroll inside the marquee.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Marquee.ExtraDistance">
            <summary>
            Distance in pixels between the copy of the content being scrolled "out" of the marquee, and the second copy of
            the content being scrolled "in".
            </summary>
            <remarks>
            For example, a marquee scrolling the text "Hello World" might at any given moment look like:
            <example>
            <code>
            +----------------+
            | ld   Hello wor |
            +----------------+
            </code>
            and in the above scenario the value refers to the distance between the ending "d" and the starting "H".
            </example>
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Marquee.Speed">
            <summary>
            Scrolling speed, in pixels per second.
            </summary>
        </member>
        <member name="M:StardewUI.Widgets.Marquee.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:StardewUI.Widgets.Marquee"/>.
            </summary>
        </member>
        <member name="M:StardewUI.Widgets.Marquee.FindFocusableDescendant(Microsoft.Xna.Framework.Vector2,StardewUI.Direction)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Marquee.GetLocalChildren">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Marquee.IsContentDirty">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Marquee.OnDrawContent(StardewUI.Graphics.ISpriteBatch)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Marquee.OnMeasure(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Marquee.ResetDirty">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Widgets.NineGridPlacementEditor">
            <summary>
            Editor widget for a <see cref="T:StardewUI.Layout.NineGridPlacement"/>, which brings up a <see cref="T:StardewUI.Widgets.PositioningOverlay"/> on click.
            </summary>
            <remarks>
            Appears as a grid with 9 squares, with the "selected" cell according to <see cref="P:StardewUI.Widgets.NineGridPlacementEditor.Placement"/> drawn with a
            different background color. The grid is uniform and the size of each cell is determined by the widget's actual size
            (by way of its <see cref="P:StardewUI.IView.Layout"/>) and the current <see cref="P:StardewUI.Widgets.NineGridPlacementEditor.LineWidth"/>.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.NineGridPlacementEditor.ButtonSpriteMap">
            <summary>
            Map of buttons to button prompt sprites.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.NineGridPlacementEditor.CellColor">
            <summary>
            The default color to draw grid cells (inside the gridlines).
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.NineGridPlacementEditor.Content">
            <summary>
            The content to display in the <see cref="T:StardewUI.Widgets.PositioningOverlay"/> when editing. Not shown in the editor itself.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.NineGridPlacementEditor.DirectionSpriteMap">
            <summary>
            Map of directions to directional arrow sprites; used to indicate dragging.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.NineGridPlacementEditor.GridColor">
            <summary>
            The color to draw gridlines.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.NineGridPlacementEditor.HoverTintColor">
            <summary>
            Color to tint cells and gridlines while the mouse is hovering over the editor.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.NineGridPlacementEditor.LineWidth">
            <summary>
            Thickness of gridlines.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.NineGridPlacementEditor.Placement">
            <summary>
            The current content placement.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.NineGridPlacementEditor.SelectionBackgroundColor">
            <summary>
            Color for the grid cell that is is selected according to <see cref="P:StardewUI.Widgets.NineGridPlacementEditor.Placement"/>.
            </summary>
        </member>
        <member name="M:StardewUI.Widgets.NineGridPlacementEditor.OnClick(StardewUI.Events.ClickEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.NineGridPlacementEditor.OnPointerMove(StardewUI.Events.PointerMoveEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.NineGridPlacementEditor.IsContentDirty">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.NineGridPlacementEditor.OnDrawContent(StardewUI.Graphics.ISpriteBatch)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.NineGridPlacementEditor.OnMeasure(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.NineGridPlacementEditor.ResetDirty">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Widgets.Panel">
            <summary>
            A layout view whose children all overlap the same boundaries.
            </summary>
            <remarks>
            <para>
            A panel's content size (i.e. if any dimensions are <see cref="F:StardewUI.Layout.LengthType.Content"/>) is always equal to the largest
            child; alignment applies to each child individually, and children are drawn according to their
            <see cref="P:StardewUI.IView.ZIndex"/> first and then their order in <see cref="P:StardewUI.Widgets.Panel.Children"/>.
            </para>
            <para>
            Children can be positioned more precisely using their <see cref="P:StardewUI.View.Margin"/> and <see cref="P:StardewUI.View.Padding"/> for
            standard view types, or drawing at non-origin positions for custom <see cref="T:StardewUI.IView"/> implementations.
            </para>
            <para>
            A common use of panels is to draw overlapping images, in cases where a <see cref="T:StardewUI.Widgets.Frame"/> doesn't really make
            sense, e.g. there is no explicit "background" or "border", or if there are more than 2 layers to draw.
            </para>
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Panel.Children">
            <summary>
            Child views to display in this layout.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Panel.HorizontalContentAlignment">
            <summary>
            Specifies how to align each child in <see cref="P:StardewUI.Widgets.Panel.Children"/> horizontally within the frame's area.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Panel.VerticalContentAlignment">
            <summary>
            Specifies how to align each child in <see cref="P:StardewUI.Widgets.Panel.Children"/> vertically within the frame's area.
            </summary>
        </member>
        <member name="M:StardewUI.Widgets.Panel.Align(StardewUI.IView,StardewUI.Layout.Alignment,StardewUI.Layout.Alignment,System.String)">
            <summary>
            Creates a <see cref="T:StardewUI.Widgets.Panel"/> that is used to align some inner content inside a parent, typically another
            <see cref="T:StardewUI.Widgets.Panel"/>.
            </summary>
            <remarks>
            The created panel will stretch to fill all available area, and align the <paramref name="content"/> view within
            itself according to the <paramref name="horizontal"/> and <paramref name="vertical"/> alignments. Several
            <see cref="M:StardewUI.Widgets.Panel.Align(StardewUI.IView,StardewUI.Layout.Alignment,StardewUI.Layout.Alignment,System.String)"/> helpers can be used to align different content/controls to different edges or corners of the
            same parent <see cref="T:StardewUI.Widgets.Panel"/>.
            </remarks>
            <param name="content">The content to align.</param>
            <param name="horizontal">Horizontal alignment of the content.</param>
            <param name="vertical">Vertical alignment of the content.</param>
            <param name="name">Optional name to give to the panel, for debugging.</param>
        </member>
        <member name="M:StardewUI.Widgets.Panel.FindFocusableDescendant(Microsoft.Xna.Framework.Vector2,StardewUI.Direction)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Panel.GetLocalChildren">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Panel.HasOwnContent">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Panel.IsContentDirty">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Panel.OnDrawContent(StardewUI.Graphics.ISpriteBatch)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Panel.OnMeasure(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Panel.ResetDirty">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Widgets.ScrollableFrameView">
            <summary>
            Layout widget for a sectioned menu including a scrollable content area.
            </summary>
            <remarks>
            The primary content is always kept centered, with optional title, footer and sidebar (e.g. for
            navigation) available to decorate the view. Many if not most menus can be fully represented with
            this layout, as long as they do not have built-in subnavigation such as top-level tabs.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.ScrollableFrameView.Content">
            <summary>
            The primary content, which displays inside the menu frame and is clipped/scrollable.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.ScrollableFrameView.ContentLayout">
            <summary>
            Layout parameters to apply to the actual <see cref="T:StardewUI.Widgets.ScrollContainer"/> containing the <see cref="P:StardewUI.Widgets.ScrollableFrameView.Content"/>.
            </summary>
            <remarks>
            The scroll container sits between the <see cref="P:StardewUI.Widgets.ScrollableFrameView.Content"/> and the outer frame. By default it is set to stretch
            to the outer layout dimensions, but can be modified to e.g. fit width to content.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.ScrollableFrameView.Footer">
            <summary>
            Optional footer to display below the <see cref="P:StardewUI.Widgets.ScrollableFrameView.Content"/>.
            </summary>
            <remarks>
            Footer layout can be any arbitrary size and will not push up the <see cref="P:StardewUI.Widgets.ScrollableFrameView.Content"/>.
            However, footers wider than the <c>Content</c> may cause problems.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.ScrollableFrameView.FrameLayout">
            <summary>
            Layout parameters to apply to the frame surrounding the <see cref="P:StardewUI.Widgets.ScrollableFrameView.Content"/>.
            </summary>
            <remarks>
            Determines the size of the scrollable area and should generally be one of the
            <see cref="M:StardewUI.Layout.LayoutParameters.FixedSize(Microsoft.Xna.Framework.Point)"/> overloads, or at least have a fixed
            <see cref="P:StardewUI.Layout.LayoutParameters.Height"/>.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.ScrollableFrameView.Sidebar">
            <summary>
            Optional content to display to the left of the <see cref="P:StardewUI.Widgets.ScrollableFrameView.Content"/> frame.
            </summary>
            <remarks>
            Typically used for navigation or other contextual info. Max width is constrained to
            <see cref="P:StardewUI.Widgets.ScrollableFrameView.SidebarWidth"/> regardless of layout.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.ScrollableFrameView.SidebarWidth">
            <summary>
            Maximum width of the sidebar area.
            </summary>
            <remarks>
            To keep the primary content centered, the same dimension must be applied to the scrollbar's
            container, so the width must be specified ahead of time. This acts as a maximum width; the
            actual sidebar does not have to fill this space (it will be right-aligned in that case), but
            larger views may clip or overflow.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.ScrollableFrameView.Title">
            <summary>
            Title to display above the <see cref="P:StardewUI.Widgets.ScrollableFrameView.Content"/>.
            </summary>
            <remarks>
            All titles are displayed as a <see cref="T:StardewUI.Widgets.Banner"/>.
            </remarks>
        </member>
        <member name="M:StardewUI.Widgets.ScrollableFrameView.Measure(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.ScrollableFrameView.OnWheel(StardewUI.Events.WheelEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.ScrollableFrameView.CreateView">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Widgets.ScrollableView">
            <summary>
            Provides a content container and accompanying scrollbar.
            </summary>
            <remarks>
            <para>
            This does not add any extra UI elements aside from the scrollbar, like <see cref="T:StardewUI.Widgets.ScrollableFrameView"/> does, and
            is more suitable for highly customized menus.
            </para>
            <para>
            Currently supports only vertically-scrolling content.
            </para>
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.ScrollableView.Content">
            <summary>
            The content to make scrollable.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.ScrollableView.FloatingElements">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Widgets.ScrollableView.Peeking">
            <summary>
            Amount of extra distance above/below scrolled content; see <see cref="P:StardewUI.Widgets.ScrollContainer.Peeking"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.ScrollableView.ScrollbarDownSprite">
            <summary>
            The <see cref="P:StardewUI.Widgets.Scrollbar.DownSprite" /> used for the scrollbar.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.ScrollableView.ScrollbarMargin">
            <summary>
            The <see cref="P:StardewUI.Widgets.Scrollbar.Margin" /> of the scrollbar.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.ScrollableView.ScrollbarVisibility">
            <summary>
            The <see cref="P:StardewUI.Widgets.Scrollbar.ForcedVisibility" /> of the scrollbar.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.ScrollableView.ScrollbarThumbSprite">
            <summary>
            The <see cref="P:StardewUI.Widgets.Scrollbar.ThumbSprite" /> used for the scrollbar.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.ScrollableView.ScrollbarTrackSprite">
            <summary>
            The <see cref="P:StardewUI.Widgets.Scrollbar.TrackSprite" /> used for the scrollbar.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.ScrollableView.ScrollbarUpSprite">
            <summary>
            The <see cref="P:StardewUI.Widgets.Scrollbar.UpSprite" /> used for the scrollbar.
            </summary>
        </member>
        <member name="M:StardewUI.Widgets.ScrollableView.OnWheel(StardewUI.Events.WheelEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.ScrollableView.CreateView">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Widgets.Scrollbar">
            <summary>
            Controls the scrolling of a <see cref="T:StardewUI.Widgets.ScrollContainer"/>.
            </summary>
            <remarks>
            Must be associated with a <see cref="T:StardewUI.Widgets.ScrollContainer"/> in order to work; will not draw if the container is not set
            or if its <see cref="P:StardewUI.Widgets.ScrollContainer.ScrollSize"/> is zero.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Scrollbar.Container">
            <summary>
            The scroll container that this <see cref="T:StardewUI.Widgets.Scrollbar"/> controls.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Scrollbar.DownSprite">
            <summary>
            Sprite to draw for the down arrow, or right arrow in horizontal orientation.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Scrollbar.ForcedVisibility">
            <summary>
            Forces the scrollbar to be always visible or always hidden, depending on the value.
            </summary>
            <remarks>
            If not set, the <see cref="T:StardewUI.Layout.Visibility"/> will change according to whether the <see cref="T:StardewUI.Widgets.ScrollContainer"/> has
            content large enough to be scrolled.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Scrollbar.Margin">
            <summary>
            Margins for this view. See <see cref="P:StardewUI.View.Margin"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Scrollbar.ThumbSprite">
            <summary>
            Sprite to draw for the thumb, which moves within the track and indicates the current scroll position and can be
            dragged to scroll.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Scrollbar.TrackSprite">
            <summary>
            Sprite to draw for the track area, within which the thumb can move.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Scrollbar.UpSprite">
            <summary>
            Sprite to draw for the up arrow, or left arrow in horizontal orientation.
            </summary>
        </member>
        <member name="M:StardewUI.Widgets.Scrollbar.SyncPosition">
            <summary>
            Forces an immediate sync of the thumb position with the associated container.
            </summary>
            <remarks>
            This is typically automatic and should only need to be called in rare situations.
            </remarks>
        </member>
        <member name="M:StardewUI.Widgets.Scrollbar.CreateView">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Widgets.ScrollContainer">
            <summary>
            Renders inner content clipped to a boundary and with a modifiable scroll offset.
            </summary>
            <remarks>
            <para>
            Does not provide its own scroll bar; scrolling UI and behavior can be controlled via adding a
            <see cref="T:StardewUI.Widgets.Scrollbar"/> to any other part of the UI.
            </para>
            <para>
            While nothing prevents a <see cref="T:StardewUI.Widgets.ScrollContainer"/> from being set up with the <see cref="P:StardewUI.Widgets.ScrollContainer.Orientation"/>
            dimension set to use <see cref="F:StardewUI.Layout.LengthType.Content"/>, in general the container will only work correctly when the
            scrolled dimension is constrained (<see cref="F:StardewUI.Layout.LengthType.Px"/> or <see cref="F:StardewUI.Layout.LengthType.Stretch"/>). Scrolling
            behavior is enabled by providing an infinite available length to the <see cref="P:StardewUI.Widgets.ScrollContainer.Content"/> view for layout, while
            constraining its own size.
            </para>
            <para>
            Scrolling is not virtual. Regardless of the difference in size between scroll container and content, the full
            content will always be drawn on every frame, and simply clipped to the available area. This may therefore not be
            suitable for extremely long lists or other unbounded content.
            </para>
            </remarks>
        </member>
        <member name="E:StardewUI.Widgets.ScrollContainer.ScrollChanged">
            <summary>
            Event raised when any aspect of the scrolling changes.
            </summary>
            <remarks>
            This tracks changes to the <see cref="P:StardewUI.Widgets.ScrollContainer.ScrollOffset"/> but also the <see cref="P:StardewUI.Widgets.ScrollContainer.ScrollSize"/>, even if the offset
            has not changed. <see cref="P:StardewUI.Widgets.ScrollContainer.ScrollStep"/> is not included.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.ScrollContainer.Content">
            <summary>
            The inner content view which will be scrolled.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.ScrollContainer.Orientation">
            <summary>
            The orientation, i.e. the direction of scrolling.
            </summary>
            <remarks>
            A single <see cref="T:StardewUI.Widgets.ScrollContainer"/> can only scroll in one direction. If content needs to scroll both
            horizontally and vertically, a nested <see cref="T:StardewUI.Widgets.ScrollContainer"/> can be used.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.ScrollContainer.Peeking">
            <summary>
            The amount of "peeking" to add when scrolling a component into view; adds extra space before/after the visible
            element so that all or part of the previous/next element is also visible.
            </summary>
            <remarks>
            Nonzero values help with discoverability, making it clear that there is more content.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.ScrollContainer.ScrollOffset">
            <summary>
            The current scroll position along the <see cref="P:StardewUI.Widgets.ScrollContainer.Orientation"/> axis.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.ScrollContainer.ScrollSize">
            <summary>
            The maximum amount by which the container can be scrolled without exceeding the inner content bounds.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.ScrollContainer.ScrollStep">
            <summary>
            Default scroll distance when calling <see cref="M:StardewUI.Widgets.ScrollContainer.ScrollForward"/> or <see cref="M:StardewUI.Widgets.ScrollContainer.ScrollBackward"/>. Does not
            prevent directly setting the scroll position via <see cref="P:StardewUI.Widgets.ScrollContainer.ScrollOffset"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.ScrollContainer.ContentViewSize">
            <summary>
            The size of the current content view, or <see cref="P:Microsoft.Xna.Framework.Vector2.Zero"/> if there is no content.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.ScrollContainer.LayoutOffset">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.ScrollContainer.ScrollBackward">
            <summary>
            Scrolls backward (up or left) by the distance configured in <see cref="P:StardewUI.Widgets.ScrollContainer.ScrollStep"/>.
            </summary>
        </member>
        <member name="M:StardewUI.Widgets.ScrollContainer.ScrollForward">
            <summary>
            Scrolls forward (down or right) by the distance configured in <see cref="P:StardewUI.Widgets.ScrollContainer.ScrollStep"/>.
            </summary>
        </member>
        <member name="M:StardewUI.Widgets.ScrollContainer.ScrollIntoView(System.Collections.Generic.IEnumerable{StardewUI.ViewChild},Microsoft.Xna.Framework.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.ScrollContainer.FindFocusableDescendant(Microsoft.Xna.Framework.Vector2,StardewUI.Direction)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.ScrollContainer.GetLocalChildren">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.ScrollContainer.GetLocalChildrenAt(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.ScrollContainer.HasOwnContent">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.ScrollContainer.IsContentDirty">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.ScrollContainer.OnDrawContent(StardewUI.Graphics.ISpriteBatch)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.ScrollContainer.OnMeasure(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.ScrollContainer.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.ScrollContainer.ResetDirty">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Widgets.SegmentedControl">
            <summary>
            A horizontal list of options that can each be independently clicked and selected.
            </summary>
            <remarks>
            Segmented controls are a more discoverable and much more controller-friendly version of a
            <see cref="T:StardewUI.Widgets.DropDownList`1"/> and are particularly effective when the number of possible options
            (<see cref="P:StardewUI.Widgets.SegmentedControl.Children"/>) is limited to about five.
            </remarks>
            <seealso href="https://developer.apple.com/design/human-interface-guidelines/segmented-controls"/>
            <seealso href="https://m3.material.io/components/segmented-buttons/overview"/>
        </member>
        <member name="P:StardewUI.Widgets.SegmentedControl.Balanced">
            <summary>
            Whether to balance the segments so that each has the same width.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.SegmentedControl.Children">
            <summary>
            Child views to display in this layout.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.SegmentedControl.Highlight">
            <summary>
            Highlight sprite to draw beneath the selected segment.
            </summary>
            <remarks>
            Always stretched to the exact dimensions of the selected segment, so a nine-slice sprite is recommended.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.SegmentedControl.HighlightTint">
            <summary>
            Tint color with which to draw the <see cref="P:StardewUI.Widgets.SegmentedControl.Highlight"/> sprite.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.SegmentedControl.HighlightTransition">
            <summary>
            Transition animation to use for moving the <see cref="P:StardewUI.Widgets.SegmentedControl.Highlight"/> when a new segment is selected.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.SegmentedControl.HorizontalContentAlignment">
            <summary>
            Horizontal alignment for each frame's content.
            </summary>
            <remarks>
            Only applies when the control is <see cref="P:StardewUI.Widgets.SegmentedControl.Balanced"/> and therefore some segments may be wider than what is
            required for the content.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.SegmentedControl.SelectedIndex">
            <summary>
            Index of the segment (element of <see cref="P:StardewUI.Widgets.SegmentedControl.Children"/>) that is considered to be selected.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.SegmentedControl.SelectionSound">
            <summary>
            Sound cue to play when a new item is selected.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.SegmentedControl.Separator">
            <summary>
            Separator sprite to draw between segments.
            </summary>
            <remarks>
            Separators are always drawn with the specified <see cref="P:StardewUI.Widgets.SegmentedControl.SeparatorWidth"/>, if specified, or the sprite's
            native width if not, and are always stretched to the full layout height. No separators are drawn before the
            first segment or after the last segment.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.SegmentedControl.SeparatorTint">
            <summary>
            Tint color with which to draw the <see cref="P:StardewUI.Widgets.SegmentedControl.Separator"/> sprite.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.SegmentedControl.SeparatorWidth">
            <summary>
            Width to draw the <see cref="P:StardewUI.Widgets.SegmentedControl.Separator"/>, if any is specified.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.SegmentedControl.VerticalContentAlignment">
            <summary>
            Vertical alignment for each segment's content.
            </summary>
        </member>
        <member name="M:StardewUI.Widgets.SegmentedControl.OnUpdate(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.SegmentedControl.FindFocusableDescendant(Microsoft.Xna.Framework.Vector2,StardewUI.Direction)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.SegmentedControl.GetLocalChildren">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.SegmentedControl.IsContentDirty">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.SegmentedControl.OnDrawContent(StardewUI.Graphics.ISpriteBatch)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.SegmentedControl.OnMeasure(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.SegmentedControl.ResetDirty">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Widgets.Slider">
            <summary>
            A horizontal track with draggable thumb (button) for choosing a numeric value in a range.
            </summary>
        </member>
        <member name="E:StardewUI.Widgets.Slider.ValueChange">
            <summary>
            Event raised when the <see cref="P:StardewUI.Widgets.Slider.Value"/> changes.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Slider.BackgroundSprite">
            <summary>
            Background or track sprite, if not using the default.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Slider.ThumbSprite">
            <summary>
            Sprite for the thumb/button, if not using the default.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Slider.Interval">
            <summary>
            The interval of which <see cref="P:StardewUI.Widgets.Slider.Value"/> should be a multiple. Affects which values will be hit while dragging.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Slider.Max">
            <summary>
            The maximum value allowed for <see cref="P:StardewUI.Widgets.Slider.Value"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Slider.Min">
            <summary>
            The minimum value allowed for <see cref="P:StardewUI.Widgets.Slider.Value"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Slider.ThumbSize">
            <summary>
            Override for the thumb/button size, recommended when using a custom <see cref="P:StardewUI.Widgets.Slider.ThumbSprite"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Slider.TrackWidth">
            <summary>
            Width of the track bar.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Slider.Value">
            <summary>
            The current value.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Slider.ValueColor">
            <summary>
            Color of the value text to render, if overriding the default text color.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Slider.ValueFormat">
            <summary>
            Specifies how to format the <see cref="P:StardewUI.Widgets.Slider.Value"/> in the label text.
            </summary>
        </member>
        <member name="M:StardewUI.Widgets.Slider.FocusSearch(Microsoft.Xna.Framework.Vector2,StardewUI.Direction)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Slider.CreateView">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Slider.OnLayout">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Widgets.Spacer">
            <summary>
            An empty view whose sole purpose is to separate other elements.
            </summary>
            <remarks>
            The size of the view is entirely controlled by its <see cref="P:StardewUI.View.Layout"/>; that is, it is considered to have no
            content and setting both dimensions to <see cref="M:StardewUI.Layout.Length.Content"/> will cause it to disappear.
            </remarks>
        </member>
        <member name="M:StardewUI.Widgets.Spacer.HasOwnContent">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Spacer.OnDrawContent(StardewUI.Graphics.ISpriteBatch)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Spacer.OnMeasure(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Widgets.Tab">
            <summary>
            A view with tab appearance, used to navigate sections of a larger complex menu.
            </summary>
            <remarks>
            Tabs activate when clicked; multiple tabs can be assigned to the same <see cref="P:StardewUI.Widgets.Tab.Group"/>, each with a unique
            <see cref="P:StardewUI.Widgets.Tab.GroupKey"/>, in order to deactivate other tabs when any one tab is activated.
            </remarks>
        </member>
        <member name="E:StardewUI.Widgets.Tab.Activate">
            <summary>
            Event raised when <see cref="P:StardewUI.Widgets.Tab.Active"/> becomes <c>true</c>.
            </summary>
        </member>
        <member name="E:StardewUI.Widgets.Tab.Deactivate">
            <summary>
            Event raised when <see cref="P:StardewUI.Widgets.Tab.Active"/> becomes <c>false</c>.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Tab.Active">
            <summary>
            Whether or not the tab is considered active (selected).
            </summary>
            <remarks>
            Active tabs have an offset appearance, normally used to indicate their "pressed" status in relation to other,
            neighboring tabs. The offset can be adjusted with <see cref="P:StardewUI.Widgets.Tab.ActiveOffset"/>.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Tab.ActiveOffset">
            <summary>
            The drawing offset to apply when the tab is <see cref="P:StardewUI.Widgets.Tab.Active"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Tab.Background">
            <summary>
            Background image to draw behind the tab's <see cref="P:StardewUI.Widgets.Tab.Content"/>, which provides the tab appearance.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Tab.BackgroundRotation">
            <summary>
            Rotation of the <see cref="P:StardewUI.Widgets.Tab.Background"/>; does not apply to <see cref="P:StardewUI.Widgets.Tab.Content"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Tab.Content">
            <summary>
            Content to draw inside the tab's border.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Tab.ContentMargin">
            <summary>
            Margin to apply to the frame containing the <see cref="P:StardewUI.Widgets.Tab.Content"/>, i.e. distance between the tab's visual border
            and the inner image, text, etc.
            </summary>
            <remarks>
            When using the default <see cref="P:StardewUI.Widgets.Tab.Background"/>, this is automatically set up to match its border size. If a
            different background is used, the margin may need to be adjusted.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Tab.Group">
            <summary>
            The selection group, if any, to which this tab belongs.
            </summary>
            <remarks>
            <para>
            Assigning multiple tabs to the same group guarantees that only one can be <see cref="P:StardewUI.Widgets.Tab.Active"/> at a time. If
            this tab becomes active, any previously-active tab will become inactive.
            </para>
            <para>
            To participate in the group, a non-empty <see cref="P:StardewUI.Widgets.Tab.GroupKey"/> must also be specified.
            </para>
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Tab.GroupKey">
            <summary>
            The unique key per <see cref="P:StardewUI.Widgets.Tab.Group"/> that identifies this tab.
            </summary>
        </member>
        <member name="M:StardewUI.Widgets.Tab.Draw(StardewUI.Graphics.ISpriteBatch)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Tab.Dispose">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Tab.OnClick(StardewUI.Events.ClickEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Tab.CreateView">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Widgets.TextInput">
            <summary>
            A text input field that allows typing from a physical or virtual keyboard.
            </summary>
        </member>
        <member name="E:StardewUI.Widgets.TextInput.TextChanged">
            <summary>
            Event raised when the <see cref="P:StardewUI.Widgets.TextInput.Text"/> changes.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.TextInput.Background">
            <inheritdoc cref="P:StardewUI.Widgets.Frame.Background"/>
        </member>
        <member name="P:StardewUI.Widgets.TextInput.BorderThickness">
            <summary>
            Gets or sets the thickness of the border edges in the <see cref="P:StardewUI.Widgets.TextInput.Background"/> sprite.
            </summary>
            <remarks>
            This is similar to <see cref="P:StardewUI.Widgets.Frame.Border"/> but assumes that the border is part of the background, rather than
            a separate sprite. Setting this affects padding of content inside the background.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.TextInput.Caret">
            <summary>
            Sprite to draw for the cursor showing the current text position.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.TextInput.CaretPosition">
            <summary>
            The zero-based position of the caret within the text.
            </summary>
            <remarks>
            This value is the string position; e.g. if the <see cref="P:StardewUI.Widgets.TextInput.Text"/> has a length of 5, and the current caret
            position is 2, then the caret is between the 2nd and 3rd characters. The value cannot be greater than the length
            of the current text.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.TextInput.CaretWidth">
            <summary>
            The width to draw the <see cref="P:StardewUI.Widgets.TextInput.Caret"/>, if different from the sprite's source width.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.TextInput.Enabled">
            <summary>
            Whether the input is enabled.
            </summary>
            <remarks>
            Disabled text inputs have a darkened appearance and do not accept captures or text entry.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.TextInput.Font">
            <summary>
            The font with which to render text. Defaults to <see cref="F:StardewValley.Game1.smallFont"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.TextInput.MaxLength">
            <summary>
            The maximum number of characters allowed in this field.
            </summary>
            <remarks>
            The default value is <c>0</c> which does not impose any limit.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.TextInput.Placeholder">
            <summary>
            Placeholder text to display when the <see cref="P:StardewUI.Widgets.TextInput.Text"/> is empty and input is not captured.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.TextInput.PlaceholderColor">
            <summary>
            Color of the <see cref="P:StardewUI.Widgets.TextInput.Placeholder"/> text when displayed.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.TextInput.ShadowAlpha">
            <inheritdoc cref="P:StardewUI.Widgets.Frame.ShadowAlpha"/>
        </member>
        <member name="P:StardewUI.Widgets.TextInput.ShadowOffset">
            <inheritdoc cref="P:StardewUI.Widgets.Frame.ShadowOffset"/>
        </member>
        <member name="P:StardewUI.Widgets.TextInput.TextColor">
            <summary>
            Color of displayed text, as well as the <see cref="P:StardewUI.Widgets.TextInput.Caret"/> tint color.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.TextInput.Text">
            <summary>
            The text currently entered.
            </summary>
            <remarks>
            Setting this to a new value will reset the caret position to the end of the text.
            </remarks>
        </member>
        <member name="M:StardewUI.Widgets.TextInput.#ctor">
            <summary>
            Initializes a new <see cref="T:StardewUI.Widgets.TextInput"/>.
            </summary>
        </member>
        <member name="M:StardewUI.Widgets.TextInput.GetLocalChildren">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.TextInput.IsContentDirty">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.TextInput.OnClick(StardewUI.Events.ClickEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.TextInput.OnDrawContent(StardewUI.Graphics.ISpriteBatch)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.TextInput.OnMeasure(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Widgets.TinyNumberLabel">
            <summary>
            Renders a single-line numeric label using custom digit sprites.
            </summary>
            <remarks>
            <para>
            Corresponds to <see cref="M:StardewValley.Utility.drawTinyDigits(System.Int32,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,Microsoft.Xna.Framework.Color)"/>.
            </para>
            <para>
            For this widget type, <see cref="P:StardewUI.Widgets.TinyNumberLabel.Scale"/> <b> does</b> affect layout, and the size of the rendered text is entirely
            based on the <see cref="P:StardewUI.Widgets.TinyNumberLabel.DigitSprites"/> and cumulative scale which is effectively treated like a font size. If the
            view's <see cref="P:StardewUI.View.Layout"/> uses any non-content-based dimensions, it will affect the box size as expected but
            will not change the rendered text; the text is not scaled to the layout bounds.
            </para>
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.TinyNumberLabel.DigitSprites">
            <summary>
            The sprites for each individual digit, with the index corresponding to the digit itself (element 0 for digit
            '0', element 4 for digit '4', etc.). This must have exactly 10 elements.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.TinyNumberLabel.Number">
            <summary>
            The number to display.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.TinyNumberLabel.Scale">
            <summary>
            Scale to draw the digits, relative to their original pixel size.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.TinyNumberLabel.HandlesOpacity">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.TinyNumberLabel.IsContentDirty">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.TinyNumberLabel.OnDrawContent(StardewUI.Graphics.ISpriteBatch)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.TinyNumberLabel.OnMeasure(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.TinyNumberLabel.ResetDirty">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Widgets.Keybinding.KeybindListEditor">
            <summary>
            Editor widget for a <see cref="P:StardewUI.Widgets.Keybinding.KeybindListEditor.KeybindList"/>.
            </summary>
            <remarks>
            Displays all the configured keybinds in one row, and (<see cref="P:StardewUI.Widgets.Keybinding.KeybindListEditor.EditableType"/> is not <c>null</c>) opens up a
            <see cref="T:StardewUI.Widgets.Keybinding.KeybindOverlay"/> to edit the keybinds when clicked.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Keybinding.KeybindListEditor.AddButtonText">
            <summary>
            The <see cref="P:StardewUI.Widgets.Keybinding.KeybindOverlay.AddButtonText"/> to display for adding new bindings.
            </summary>
            <remarks>
            Changing this while the overlay is already displayed will not update the overlay.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Keybinding.KeybindListEditor.BackgroundColor">
            <summary>
            Solid background color to draw underneath each keybind frame.
            </summary>
            <remarks>
            Applies only to the drawn parts inside borders, not to the empty space between them.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Keybinding.KeybindListEditor.ButtonHeight">
            <summary>
            The height for button images/sprites. Images are scaled uniformly, preserving source aspect ratio.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Keybinding.KeybindListEditor.DeleteButtonTooltip">
            <summary>
            The <see cref="P:StardewUI.Widgets.Keybinding.KeybindOverlay.DeleteButtonTooltip"/> to display for deleting bindings in a multiple-binding UI.
            </summary>
            <remarks>
            Changing this while the overlay is already displayed will not update the overlay.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Keybinding.KeybindListEditor.EditableType">
            <summary>
            Specifies what kind of keybind the editor should allow.
            </summary>
            <remarks>
            The current value <see cref="P:StardewUI.Widgets.Keybinding.KeybindListEditor.KeybindList"/> is always fully displayed, even if it does not conform to the
            semantic type. It is up to the caller to ensure that the value initially assigned to the editor is of the
            correct kind. If this is <c>null</c>, the list is considered read-only.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Keybinding.KeybindListEditor.EmptyText">
            <summary>
            Placeholder text to display when the current keybind list is empty.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Keybinding.KeybindListEditor.EmptyTextColor">
            <summary>
            Color of the displayed <see cref="P:StardewUI.Widgets.Keybinding.KeybindListEditor.EmptyText"/> when the list is empty.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Keybinding.KeybindListEditor.Focusable">
            <inheritdoc cref="P:StardewUI.View.Focusable" />
        </member>
        <member name="P:StardewUI.Widgets.Keybinding.KeybindListEditor.Font">
            <summary>
            Font used to display text in button/key placeholders.
            </summary>
            <remarks>
            Only applies for buttons that use a placeholder sprite (i.e. set the <c>isPlaceholder</c> output of
            <see cref="M:StardewUI.Graphics.ISpriteMap`1.Get(`0,System.Boolean@)"/> to <c>true</c>). In these cases, the actual button text drawn
            inside the sprite will be drawn using the specified font.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Keybinding.KeybindListEditor.KeybindList">
            <summary>
            The current keybinds to display in the list.
            </summary>
            <remarks>
            Changing these while the overlay is open may not update the overlay.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Keybinding.KeybindListEditor.SpriteMap">
            <summary>
            Map of bindable buttons to sprite representations.
            </summary>
        </member>
        <member name="M:StardewUI.Widgets.Keybinding.KeybindListEditor.CreateView">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Widgets.Keybinding.KeybindView">
            <summary>
            Display widget for a single <see cref="P:StardewUI.Widgets.Keybinding.KeybindView.Keybind"/> showing all required keys.
            </summary>
        </member>
        <member name="F:StardewUI.Widgets.Keybinding.KeybindView.DEFAULT_BUTTON_HEIGHT">
            <summary>
            Default setting for <see cref="P:StardewUI.Widgets.Keybinding.KeybindView.ButtonHeight"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Keybinding.KeybindView.ButtonHeight">
            <summary>
            The height for button images/sprites. Images are scaled uniformly, preserving source aspect ratio.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Keybinding.KeybindView.ButtonMinWidth">
            <summary>
            Minimum width for button images/sprites, used if the layout width would be less than that implied by the
            <see cref="P:StardewUI.Widgets.Keybinding.KeybindView.ButtonHeight"/> and placeholder content (if any).
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Keybinding.KeybindView.EmptyText">
            <summary>
            Placeholder text to display when the current keybind is empty.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Keybinding.KeybindView.Font">
            <summary>
            Font used to display text in button/key placeholders.
            </summary>
            <remarks>
            Only applies for buttons that use a placeholder sprite (i.e. set the <c>isPlaceholder</c> output of
            <see cref="M:StardewUI.Graphics.ISpriteMap`1.Get(`0,System.Boolean@)"/> to <c>true</c>). In these cases, the actual button text drawn
            inside the sprite will be drawn using the specified font.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Keybinding.KeybindView.Keybind">
            <summary>
            The current keybind.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Keybinding.KeybindView.Margin">
            <inheritdoc cref="P:StardewUI.View.Margin" />
        </member>
        <member name="P:StardewUI.Widgets.Keybinding.KeybindView.Spacing">
            <summary>
            Extra spacing between displayed button sprites, if the sprites do not have implicit wide margins.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Keybinding.KeybindView.SpriteMap">
            <summary>
            Map of bindable buttons to sprite representations.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Keybinding.KeybindView.TextColor">
            <summary>
            Text color for the button text inside any placeholder sprites.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Keybinding.KeybindView.TintColor">
            <summary>
            Color to tint the background/sprite of each key.
            </summary>
        </member>
        <member name="M:StardewUI.Widgets.Keybinding.KeybindView.CreateView">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Widgets.Keybinding.KeybindExtensions">
            <summary>
            Extensions for SMAPI's keybind types.
            </summary>
        </member>
        <member name="M:StardewUI.Widgets.Keybinding.KeybindExtensions.KeybindEquals(StardewModdingAPI.Utilities.Keybind,StardewModdingAPI.Utilities.Keybind)">
            <summary>
            Checks if two keybind instances are equal.
            </summary>
            <remarks>
            The comparison is order-sensitive; two keybinds with the same buttons in a different order are considered to be
            unequal to each other.
            </remarks>
            <param name="keybind">The first keybind to compare.</param>
            <param name="other">The second keybind to compare.</param>
            <returns><c>true</c> if <paramref name="keybind"/> has the same <see cref="P:StardewModdingAPI.Utilities.Keybind.Buttons"/> as
            <paramref name="other"/> and in the same order, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:StardewUI.Widgets.Keybinding.KeybindExtensions.KeybindEquals(StardewModdingAPI.Utilities.KeybindList,StardewModdingAPI.Utilities.KeybindList)">
            <summary>
            Checks if two keybind lists are equal.
            </summary>
            <remarks>
            The comparison is order-sensitive; two keybind lists with the same keybinds in a different order, or with any
            two keybinds having keys in a different order
            </remarks>
            <param name="keybindList">The first keybind list to compare.</param>
            <param name="other">The second keybind list to compare.</param>
            <returns><c>true</c> if both <paramref name="keybindList"/> and <paramref name="other"/> contain the exact same
            keybinds in the same order, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:StardewUI.Widgets.Keybinding.KeybindOverlay">
            <summary>
            Overlay control for editing a keybinding, or list of bindings.
            </summary>
            <param name="spriteMap">Map of bindable buttons to sprite representations.</param>
        </member>
        <member name="M:StardewUI.Widgets.Keybinding.KeybindOverlay.#ctor(StardewUI.Graphics.ISpriteMap{StardewModdingAPI.SButton})">
            <summary>
            Overlay control for editing a keybinding, or list of bindings.
            </summary>
            <param name="spriteMap">Map of bindable buttons to sprite representations.</param>
        </member>
        <member name="P:StardewUI.Widgets.Keybinding.KeybindOverlay.AddButtonText">
            <summary>
            Text to display on the button used to add a new binding.
            </summary>
            <remarks>
            If not specified, the button will use a generic "+" image instead.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Keybinding.KeybindOverlay.DeleteButtonTooltip">
            <summary>
            Tooltip to display for the delete (trash can) button beside each existing binding.
            </summary>
            <remarks>
            If not specified, the delete buttons will have no tooltips.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.Keybinding.KeybindOverlay.KeybindList">
            <summary>
            The current keybinds to display in the list.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.Keybinding.KeybindOverlay.KeybindType">
            <summary>
            Specifies what kind of keybind is being edited.
            </summary>
            <remarks>
            This determines the behavior of the capturing as well as what happens after capture:
            <list type="bullet">
            <item><see cref="F:StardewUI.Widgets.Keybinding.KeybindType.MultipleKeybinds"/> displays the list of existing keybinds (if any), adds the
            captured keybind when all buttons/keys are released, and allows adding more;</item>
            <item><see cref="F:StardewUI.Widgets.Keybinding.KeybindType.SingleKeybind"/> does not display the list or separator, and when all buttons/keys
            are released, updates its <see cref="P:StardewUI.Widgets.Keybinding.KeybindOverlay.KeybindList"/> to have that single keybind and closes the overlay.</item>
            <item><see cref="F:StardewUI.Widgets.Keybinding.KeybindType.SingleButton"/> is similar to <see cref="F:StardewUI.Widgets.Keybinding.KeybindType.SingleKeybind"/> but records
            the keybind and closes the overlay as soon as a single button is pressed.</item>
            </list>
            Typically when using single-bind or single-button modes, the caller should <see cref="M:StardewUI.Widgets.Keybinding.KeybindOverlay.StartCapturing"/> upon
            creation of the overlay in order to minimize redundant clicks.
            </remarks>
        </member>
        <member name="M:StardewUI.Widgets.Keybinding.KeybindOverlay.StartCapturing">
            <summary>
            Starts capturing a new keybind.
            </summary>
            <remarks>
            This makes the capture area start flashing and hides the "Add" button; any buttons pressed in the capturing
            state are recorded and combined into a single keybind after the capture ends, when all buttons are released.
            </remarks>
        </member>
        <member name="M:StardewUI.Widgets.Keybinding.KeybindOverlay.Update(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.Keybinding.KeybindOverlay.CreateView">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Widgets.Keybinding.KeybindType">
            <summary>
            Specifies the exact type of keybind supported by a widget using a
            <see cref="T:StardewModdingAPI.Utilities.KeybindList"/>.
            </summary>
        </member>
        <member name="F:StardewUI.Widgets.Keybinding.KeybindType.SingleButton">
            <summary>
            The binding is a single <see cref="T:StardewModdingAPI.SButton"/> and does not support key combinations.
            </summary>
        </member>
        <member name="F:StardewUI.Widgets.Keybinding.KeybindType.SingleKeybind">
            <summary>
            The binding is a single <see cref="T:StardewModdingAPI.Utilities.Keybind"/>, supporting exactly one combination
            of keys that must all be pressed.
            </summary>
        </member>
        <member name="F:StardewUI.Widgets.Keybinding.KeybindType.MultipleKeybinds">
            <summary>
            The binding is a real <see cref="T:StardewModdingAPI.Utilities.KeybindList"/>, which can handle any number of
            individual <see cref="T:StardewModdingAPI.Utilities.Keybind"/>s each with their own key combination.
            </summary>
        </member>
        <member name="T:StardewUI.Widgets.ComponentView">
            <inheritdoc cref="T:StardewUI.Widgets.ComponentView`1"/>
        </member>
        <member name="T:StardewUI.Widgets.ComponentView`1">
            <summary>
            Base class for custom widgets and "app views" with potentially complex hierarchy using a single root view.
            </summary>
            <remarks>
            <para>
            This implements all the boilerplate of an <see cref="T:StardewUI.IView"/> without having to actually implement a totally custom
            <see cref="P:StardewUI.Widgets.ComponentView`1.View"/>; instead, it delegates all functionality to the inner (root) <see cref="T:StardewUI.IView"/>.
            </para>
            <para>
            The typical use case is for what is often called "Components", "Layouts", "User Controls", etc., in which a class
            defines both the view hierarchy and an API for interacting with the view and underlying data at the same time. The
            top-level layout is created in <see cref="M:StardewUI.Widgets.ComponentView`1.CreateView"/>, and child views can be added on creation or at any later
            time. More importantly, since the subclass decides what children to create, it can also store references to those
            children for the purposes of updating the UI, responding to events, etc.
            </para>
            <para>
            Component views can be composed like any other views, or used in a <see cref="T:StardewUI.ViewMenu"/>.
            </para>
            </remarks>
            <typeparam name="T">Type of view used for the root.</typeparam>
        </member>
        <member name="P:StardewUI.Widgets.ComponentView`1.View">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.ComponentView`1.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:StardewUI.Widgets.ComponentView`1"/>.
            </summary>
        </member>
        <member name="M:StardewUI.Widgets.ComponentView`1.CreateView">
            <summary>
            Creates and returns the root view.
            </summary>
        </member>
        <member name="T:StardewUI.Widgets.DecoratorView">
            <inheritdoc cref="T:StardewUI.Widgets.DecoratorView`1"/>
        </member>
        <member name="T:StardewUI.Widgets.DecoratorView`1">
            <summary>
            A view that owns and delegates to an inner view.
            </summary>
            <remarks>
            <para>
            Decorator views, while not abstract, are used as a base type for other composite views, and primarily intended for
            framework use. Custom widgets should normally use <see cref="T:StardewUI.Widgets.ComponentView`1"/> instead, which incorporates lazy
            loading and other conveniences for minimalistic implementations.
            </para>
            <para>
            The inner view is considered to be owned by the decorator; it will be assigned any values that were assigned to the
            decorator itself, such as <see cref="P:StardewUI.IView.Layout"/>, and if it implements <see cref="T:System.IDisposable"/>, then it will
            be disposed along with the decorator.
            </para>
            </remarks>
            <typeparam name="T">The specific type of view that the decorator owns.</typeparam>
        </member>
        <member name="T:StardewUI.Widgets.DecoratorView`1.DecoratedProperty`1">
            <summary>
            Helper for propagating a single property to and from the inner view.
            </summary>
            <remarks>
            Decorated properties must be initialized in the decorator's constructor by calling
            <see cref="M:StardewUI.Widgets.DecoratorView`1.RegisterDecoratedProperty``1(StardewUI.Widgets.DecoratorView{`0}.DecoratedProperty{``0})"/>, and have the following behavior:
            <list type="number">
            <item>The current value is tracked independently of the inner view;</item>
            <item>If the current value has <b>not</b> been set, then it is ignored when initializing a new view;</item>
            <item>If the current value <b>has</b> been set, the view's value is overwritten on initialization.</item>
            </list>
            </remarks>
            <typeparam name="TValue">The type of value tracked.</typeparam>
            <param name="getValue">Function to retrieve the current value from the inner view.</param>
            <param name="setValue">Delegate to change the current value on the inner view.</param>
            <param name="defaultValue">The initial value to return from <see cref="M:StardewUI.Widgets.DecoratorView`1.DecoratedProperty`1.Get"/> if no view exists and the value
            has not been changed. This is never written to the view, it is only used by <see cref="M:StardewUI.Widgets.DecoratorView`1.DecoratedProperty`1.Get"/> and is
            effectively a hack to allow <see cref="T:StardewUI.Widgets.DecoratorView`1.DecoratedProperty`1"/> to deal with value (struct) types.</param>
        </member>
        <member name="M:StardewUI.Widgets.DecoratorView`1.DecoratedProperty`1.#ctor(System.Func{`0,`1},System.Action{`0,`1},`1)">
            <summary>
            Helper for propagating a single property to and from the inner view.
            </summary>
            <remarks>
            Decorated properties must be initialized in the decorator's constructor by calling
            <see cref="M:StardewUI.Widgets.DecoratorView`1.RegisterDecoratedProperty``1(StardewUI.Widgets.DecoratorView{`0}.DecoratedProperty{``0})"/>, and have the following behavior:
            <list type="number">
            <item>The current value is tracked independently of the inner view;</item>
            <item>If the current value has <b>not</b> been set, then it is ignored when initializing a new view;</item>
            <item>If the current value <b>has</b> been set, the view's value is overwritten on initialization.</item>
            </list>
            </remarks>
            <typeparam name="TValue">The type of value tracked.</typeparam>
            <param name="getValue">Function to retrieve the current value from the inner view.</param>
            <param name="setValue">Delegate to change the current value on the inner view.</param>
            <param name="defaultValue">The initial value to return from <see cref="M:StardewUI.Widgets.DecoratorView`1.DecoratedProperty`1.Get"/> if no view exists and the value
            has not been changed. This is never written to the view, it is only used by <see cref="M:StardewUI.Widgets.DecoratorView`1.DecoratedProperty`1.Get"/> and is
            effectively a hack to allow <see cref="T:StardewUI.Widgets.DecoratorView`1.DecoratedProperty`1"/> to deal with value (struct) types.</param>
        </member>
        <member name="M:StardewUI.Widgets.DecoratorView`1.DecoratedProperty`1.Get">
            <summary>
            Gets the current value from the inner view.
            </summary>
            <returns>The value from the current view, if the view is non-null; otherwise, the default value configured
            for this property.</returns>
        </member>
        <member name="M:StardewUI.Widgets.DecoratorView`1.DecoratedProperty`1.Set(`1)">
            <summary>
            Updates the property value, also updating the inner view if one exists.
            </summary>
            <remarks>
            If the inner view has not been created yet, then its corresponding property will be updated as soon as it is
            assigned to the <see cref="P:StardewUI.Widgets.DecoratorView`1.View"/>.
            </remarks>
            <param name="value">The new value.</param>
        </member>
        <member name="M:StardewUI.Widgets.DecoratorView`1.DecoratedProperty`1.Update">
            <summary>
            Updates the inner view's property to the most recent value, if one has been set on the decorated property.
            </summary>
            <remarks>
            If there have been no calls to <see cref="M:StardewUI.Widgets.DecoratorView`1.DecoratedProperty`1.Set(`1)"/>, then the view is left untouched, to preserve any
            non-default settings on the inner view.
            </remarks>
        </member>
        <member name="M:StardewUI.Widgets.DecoratorView`1.DecoratedProperty`1.op_Implicit(StardewUI.Widgets.DecoratorView{`0}.DecoratedProperty{`1})~`1">
            <summary>
            Converts a <see cref="T:StardewUI.Widgets.DecoratorView`1.DecoratedProperty`1"/> to its corresponding value type.
            </summary>
            <param name="property">The decorated property.</param>
        </member>
        <member name="P:StardewUI.Widgets.DecoratorView`1.ActualBounds">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Widgets.DecoratorView`1.ClipOrigin">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Widgets.DecoratorView`1.ClipSize">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Widgets.DecoratorView`1.ContentBounds">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Widgets.DecoratorView`1.FloatingBounds">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Widgets.DecoratorView`1.IsFocusable">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Widgets.DecoratorView`1.Layout">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Widgets.DecoratorView`1.Name">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Widgets.DecoratorView`1.Opacity">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Widgets.DecoratorView`1.OuterSize">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Widgets.DecoratorView`1.PointerEventsEnabled">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Widgets.DecoratorView`1.PointerStyle">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Widgets.DecoratorView`1.ScrollWithChildren">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Widgets.DecoratorView`1.Tags">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Widgets.DecoratorView`1.Tooltip">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Widgets.DecoratorView`1.Transform">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Widgets.DecoratorView`1.TransformOrigin">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Widgets.DecoratorView`1.Visibility">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Widgets.DecoratorView`1.ZIndex">
            <inheritdoc />
        </member>
        <member name="E:StardewUI.Widgets.DecoratorView`1.ButtonPress">
            <inheritdoc />
        </member>
        <member name="E:StardewUI.Widgets.DecoratorView`1.ButtonRepeat">
            <inheritdoc />
        </member>
        <member name="E:StardewUI.Widgets.DecoratorView`1.Click">
            <inheritdoc />
        </member>
        <member name="E:StardewUI.Widgets.DecoratorView`1.Drag">
            <inheritdoc />
        </member>
        <member name="E:StardewUI.Widgets.DecoratorView`1.DragEnd">
            <inheritdoc />
        </member>
        <member name="E:StardewUI.Widgets.DecoratorView`1.DragStart">
            <inheritdoc />
        </member>
        <member name="E:StardewUI.Widgets.DecoratorView`1.LeftClick">
            <inheritdoc />
        </member>
        <member name="E:StardewUI.Widgets.DecoratorView`1.PointerEnter">
            <inheritdoc />
        </member>
        <member name="E:StardewUI.Widgets.DecoratorView`1.PointerLeave">
            <inheritdoc />
        </member>
        <member name="E:StardewUI.Widgets.DecoratorView`1.PointerMove">
            <inheritdoc />
        </member>
        <member name="E:StardewUI.Widgets.DecoratorView`1.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="E:StardewUI.Widgets.DecoratorView`1.RightClick">
            <inheritdoc />
        </member>
        <member name="E:StardewUI.Widgets.DecoratorView`1.Wheel">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Widgets.DecoratorView`1.View">
            <summary>
            The inner view that is decorated by this view.
            </summary>
        </member>
        <member name="M:StardewUI.Widgets.DecoratorView`1.#ctor">
            <summary>
            Initializes a new <see cref="T:StardewUI.Widgets.DecoratorView`1"/> instance.
            </summary>
        </member>
        <member name="M:StardewUI.Widgets.DecoratorView`1.ContainsPoint(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.DecoratorView`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.DecoratorView`1.Draw(StardewUI.Graphics.ISpriteBatch)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.DecoratorView`1.FocusSearch(Microsoft.Xna.Framework.Vector2,StardewUI.Direction)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.DecoratorView`1.GetChildAt(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.DecoratorView`1.GetChildPosition(StardewUI.IView)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.DecoratorView`1.GetChildren(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.DecoratorView`1.GetChildrenAt(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.DecoratorView`1.GetDefaultFocusChild">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.DecoratorView`1.HasOutOfBoundsContent">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.DecoratorView`1.IsDirty">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.DecoratorView`1.IsVisible(System.Nullable{Microsoft.Xna.Framework.Vector2})">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.DecoratorView`1.Measure(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.DecoratorView`1.OnButtonPress(StardewUI.Events.ButtonEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.DecoratorView`1.OnButtonRepeat(StardewUI.Events.ButtonEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.DecoratorView`1.OnClick(StardewUI.Events.ClickEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.DecoratorView`1.OnDrag(StardewUI.Events.PointerEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.DecoratorView`1.OnDrop(StardewUI.Events.PointerEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.DecoratorView`1.OnPointerMove(StardewUI.Events.PointerMoveEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.DecoratorView`1.OnUpdate(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.DecoratorView`1.OnWheel(StardewUI.Events.WheelEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.DecoratorView`1.ScrollIntoView(System.Collections.Generic.IEnumerable{StardewUI.ViewChild},Microsoft.Xna.Framework.Vector2@)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.DecoratorView`1.OnLayout">
            <summary>
            Runs whenever layout occurs as a result of the UI elements changing.
            </summary>
        </member>
        <member name="M:StardewUI.Widgets.DecoratorView`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:StardewUI.Widgets.DecoratorView`1.PropertyChanged"/> event.
            </summary>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:StardewUI.Widgets.DecoratorView`1.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:StardewUI.Widgets.DecoratorView`1.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">The name of the property that was changed.</param>
        </member>
        <member name="M:StardewUI.Widgets.DecoratorView`1.RegisterDecoratedProperty``1(StardewUI.Widgets.DecoratorView{`0}.DecoratedProperty{``0})">
            <summary>
            Registers a <see cref="T:StardewUI.Widgets.DecoratorView`1.DecoratedProperty`1"/>.
            </summary>
            <remarks>
            All <see cref="T:StardewUI.Widgets.DecoratorView`1.DecoratedProperty`1"/> fields must be registered in the constructor or before they are read
            from or written to.
            </remarks>
            <typeparam name="TValue">The property's value type.</typeparam>
            <param name="property">The property to register.</param>
        </member>
        <member name="T:StardewUI.Widgets.DropDownList`1">
            <summary>
            Button/text field with a drop-down menu.
            </summary>
            <typeparam name="T">The type of list item that can be chosen.</typeparam>
        </member>
        <member name="E:StardewUI.Widgets.DropDownList`1.Select">
            <summary>
            Event raised when an item in the list is selected.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.DropDownList`1.MaxListHeight">
            <summary>
            Maximum height of the expanded list.
            </summary>
            <remarks>
            <para>
            By default, the item list can expand all the way to the bottom of the viewport, and will scroll if it exceeds
            the full height; this can end up being very tall and difficult to navigate on large screens. Setting this to a
            smaller value will limit the height.
            </para>
            <para>
            This affects only the list of items in the expanded state; it is different from the
            <see cref="P:StardewUI.Layout.LayoutParameters.MaxHeight"/> of the <see cref="T:StardewUI.Widgets.DropDownList`1"/>'s own <see cref="P:StardewUI.IView.Layout"/>.
            </para>
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.DropDownList`1.OptionFormat">
            <summary>
            Specifies how to format the <see cref="P:StardewUI.Widgets.DropDownList`1.SelectedOption"/> in the label text.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.DropDownList`1.OptionMaxLines">
            <summary>
            Maximum number of lines to allow per option in the drop-down list.
            </summary>
            <remarks>
            Setting this allows options in the list to wrap lines instead of being truncated to one line. Applies only to
            the open list, and not the selected item text within the main border, which is always single-line.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.DropDownList`1.OptionMinWidth">
            <summary>
            Minimum width for the text area of an option.
            </summary>
            <remarks>
            If this is <c>0</c>, or if all options are larger, then the dropdown will expand horizontally.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.DropDownList`1.Options">
            <summary>
            The options available to select.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.DropDownList`1.SelectedIndex">
            <summary>
            Index of the currently-selected option in the <see cref="P:StardewUI.Widgets.DropDownList`1.Options"/>, or <c>-1</c> if none selected.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.DropDownList`1.SelectedOption">
            <summary>
            The option that is currently selected, or <c>null</c> if there is no selection.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.DropDownList`1.SelectedOptionText">
            <summary>
            The text of the currently-selected option.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.DropDownList`1.SelectionFrameLayout">
            <summary>
            Customizes the layout settings of the selection frame.
            </summary>
            <remarks>
            The selection frame is the frame surrounding the text of the selected item, not including the dropdown button
            (arrow) itself which is fixed size. By default, the selection frame matches the width of the selected item text;
            this can be changed, for example, to stretch to the available layout width, minus the button.
            </remarks>
        </member>
        <member name="M:StardewUI.Widgets.DropDownList`1.Measure(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.DropDownList`1.CreateView">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Widgets.FormBuilder">
            <summary>
            Fluent builder style API for creating form-like tables within a view.
            </summary>
            <remarks>
            Useful for "settings" style views.
            </remarks>
            <param name="labelWidth">The width of the label column. Same for all rows.</param>
            <param name="fieldIndent">Pixel amount by which to indent the field rows, relative to any heading rows.</param>
        </member>
        <member name="M:StardewUI.Widgets.FormBuilder.#ctor(System.Int32,System.Int32)">
            <summary>
            Fluent builder style API for creating form-like tables within a view.
            </summary>
            <remarks>
            Useful for "settings" style views.
            </remarks>
            <param name="labelWidth">The width of the label column. Same for all rows.</param>
            <param name="fieldIndent">Pixel amount by which to indent the field rows, relative to any heading rows.</param>
        </member>
        <member name="M:StardewUI.Widgets.FormBuilder.Build">
            <summary>
            Builds the form.
            </summary>
            <returns>The view containing the form layout.</returns>
        </member>
        <member name="M:StardewUI.Widgets.FormBuilder.AddCustom(StardewUI.IView[])">
            <summary>
            Adds a custom row, which is simply a horizontal <see cref="T:StardewUI.Widgets.Lane"/> consisting of the specified views, not
            including any label - i.e. the first view is flush with the labels on other rows.
            </summary>
            <remarks>
            Might be used for a row of confirmation buttons, a paragraph of help text, etc.
            </remarks>
            <param name="views">The views to display in this row.</param>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:StardewUI.Widgets.FormBuilder.AddField(System.String,System.String,StardewUI.IView)">
            <summary>
            Adds a labeled control row, i.e. a field.
            </summary>
            <param name="title">The field title, displayed on the left side.</param>
            <param name="description">Description of the field's value or purpose, displayed as a tooltip when hovering over
            the title text.</param>
            <param name="view">The view for modifying the field's value.</param>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:StardewUI.Widgets.FormBuilder.AddSection(System.String)">
            <summary>
            Starts a new section by adding header text.
            </summary>
            <param name="title">The section title.</param>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:StardewUI.Widgets.FormBuilder.CreateSectionHeading(System.String)">
            <summary>
            Creates the banner used as a section heading.
            </summary>
            <remarks>
            This is the standalone version of <see cref="M:StardewUI.Widgets.FormBuilder.AddSection(System.String)"/> that can be used by any views wanting to
            provide form-style section headings outside of an actual form.
            </remarks>
            <param name="title">The section title.</param>
            <returns>Section heading view.</returns>
        </member>
        <member name="M:StardewUI.Widgets.FormBuilder.SetMargin(StardewUI.Layout.Edges)">
            <summary>
            Configures the margin for the entire form.
            </summary>
            <param name="margin">Margin outside the form.</param>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:StardewUI.Widgets.FormBuilder.SetPadding(StardewUI.Layout.Edges)">
            <summary>
            Configures the padding for the entire form.
            </summary>
            <param name="padding">Padding inside the form.</param>
            <returns>The current builder instance.</returns>
        </member>
        <member name="T:StardewUI.Widgets.GridItemLayout">
            <summary>
            Describes the layout of all items in a <see cref="T:StardewUI.Widgets.Grid"/>.
            </summary>
        </member>
        <member name="T:StardewUI.Widgets.GridItemLayout.Count">
            <summary>
            A <see cref="T:StardewUI.Widgets.GridItemLayout"/> specifying the maximum divisions - rows or columns, depending on the grid's
            <see cref="T:StardewUI.Layout.Orientation"/>; items will be sized distributed uniformly along that axis.
            </summary>
            <param name="ItemCount">Maximum number of cell divisions along the primary orientation axis.</param>
        </member>
        <member name="M:StardewUI.Widgets.GridItemLayout.Count.#ctor(System.Int32)">
            <summary>
            A <see cref="T:StardewUI.Widgets.GridItemLayout"/> specifying the maximum divisions - rows or columns, depending on the grid's
            <see cref="T:StardewUI.Layout.Orientation"/>; items will be sized distributed uniformly along that axis.
            </summary>
            <param name="ItemCount">Maximum number of cell divisions along the primary orientation axis.</param>
        </member>
        <member name="P:StardewUI.Widgets.GridItemLayout.Count.ItemCount">
            <summary>Maximum number of cell divisions along the primary orientation axis.</summary>
        </member>
        <member name="M:StardewUI.Widgets.GridItemLayout.Count.GetItemCountAndLength(System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Widgets.GridItemLayout.Length">
            <summary>
            A <see cref="T:StardewUI.Widgets.GridItemLayout"/> specifying that each item is to have the same fixed length (width or height,
            depending on the grid's <see cref="T:StardewUI.Layout.Orientation"/>) and to wrap to the next row/column afterward.
            </summary>
            <param name="Px">The length, in pixels, of each item along the grid's orientation axis.</param>
            <param name="Expandable">Whether the length of cells should expand (uniformly) to fill the grid's primary layout
            size, i.e. when that size is not an exact multiple of the total size of all cells that can fit.</param>
        </member>
        <member name="M:StardewUI.Widgets.GridItemLayout.Length.#ctor(System.Single,System.Boolean)">
            <summary>
            A <see cref="T:StardewUI.Widgets.GridItemLayout"/> specifying that each item is to have the same fixed length (width or height,
            depending on the grid's <see cref="T:StardewUI.Layout.Orientation"/>) and to wrap to the next row/column afterward.
            </summary>
            <param name="Px">The length, in pixels, of each item along the grid's orientation axis.</param>
            <param name="Expandable">Whether the length of cells should expand (uniformly) to fill the grid's primary layout
            size, i.e. when that size is not an exact multiple of the total size of all cells that can fit.</param>
        </member>
        <member name="P:StardewUI.Widgets.GridItemLayout.Length.Px">
            <summary>The length, in pixels, of each item along the grid's orientation axis.</summary>
        </member>
        <member name="P:StardewUI.Widgets.GridItemLayout.Length.Expandable">
            <summary>Whether the length of cells should expand (uniformly) to fill the grid's primary layout
            size, i.e. when that size is not an exact multiple of the total size of all cells that can fit.</summary>
        </member>
        <member name="M:StardewUI.Widgets.GridItemLayout.Length.GetItemCountAndLength(System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Widgets.GridItemLayout.Parse(System.String)">
            <summary>
            Converts the string representation of an item layout to an equivalent <see cref="T:StardewUI.Widgets.GridItemLayout"/>.
            </summary>
            <param name="value">String containing the item layout to convert.</param>
            <returns>The converted layout information.</returns>
            <exception cref="T:System.FormatException">Thrown when <paramref name="value"/> is not in the correct format.</exception>
        </member>
        <member name="M:StardewUI.Widgets.GridItemLayout.GetItemCountAndLength(System.Single,System.Single)">
            <summary>
            Computes the length (along the grid's <see cref="P:StardewUI.Widgets.Grid.PrimaryOrientation"/> axis) of a single item, and the
            number of items that can fit before wrapping.
            </summary>
            <param name="available">The length available along the same axis.</param>
            <param name="spacing">Spacing between items, to adjust count-based layouts.</param>
            <returns>The length to apply to each item.</returns>
        </member>
        <member name="T:StardewUI.Widgets.ImageFit">
            <summary>
            Specifies how an image should be scaled to fit the content area when the available size is different from the image
            size, and especially when it has a different aspect ratio.
            </summary>
        </member>
        <member name="F:StardewUI.Widgets.ImageFit.None">
            <summary>
            Don't scale the image, i.e. draw it at its original size regardless of the eventual layout size.
            </summary>
        </member>
        <member name="F:StardewUI.Widgets.ImageFit.Contain">
            <summary>
            Force uniform scaling, and make both dimensions small enough to fit in the content area.
            </summary>
            <remarks>
            If one dimension uses <see cref="F:StardewUI.Layout.LengthType.Content"/>, then the other dimension will be scaled to fit, and the
            content-dependent dimension will be set according to the image's aspect ratio.
            </remarks>
        </member>
        <member name="F:StardewUI.Widgets.ImageFit.Cover">
            <summary>
            Force uniform scaling, and make both dimensions large enough to completely cover the content area (i.e. clip
            whatever parts are outside the bounds).
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:StardewUI.Widgets.ImageFit.Stretch">
            <summary>
            Allow non-uniform scaling, and scale the image to exactly match the content area.
            </summary>
        </member>
        <member name="T:StardewUI.Widgets.OutletAttribute">
            <summary>
            Marks a child/children property as a named outlet.
            </summary>
            <remarks>
            <para>
            Outlets are used by the UI Framework, in StarML views, to differentiate between multiple child properties of the
            same layout view. For example, the <see cref="T:StardewUI.Widgets.Expander"/> defines both a <see cref="P:StardewUI.Widgets.Expander.Content"/> view (the
            "main" view) and a separate <see cref="P:StardewUI.Widgets.Expander.Header"/> view, but normally only one children/content property is
            allowed per layout view.
            </para>
            <para>
            When a property is decorated with an <c>OutletAttribute</c>, it is ignored by the framework unless the markup
            element includes an <c>*outlet</c> attribute with a value equal to the outlet <see cref="P:StardewUI.Widgets.OutletAttribute.Name"/>, in which case the
            element (or elements) will be added or assigned to that specific outlet.
            </para>
            <para>
            The attribute should be omitted for whichever outlet is considered the default, i.e. to be targeted whenever the
            markup element does not include an <c>*outlet</c> attribute.
            </para>
            <para>
            Has no effect when used outside a data binding context, or when applied to any property that does not have either
            <see cref="T:StardewUI.IView"/> or a collection of <see cref="T:StardewUI.IView"/> elements such as <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </para>
            </remarks>
            <param name="name">The outlet name, to be matched in an <c>*outlet</c> attribute.</param>
        </member>
        <member name="M:StardewUI.Widgets.OutletAttribute.#ctor(System.String)">
            <summary>
            Marks a child/children property as a named outlet.
            </summary>
            <remarks>
            <para>
            Outlets are used by the UI Framework, in StarML views, to differentiate between multiple child properties of the
            same layout view. For example, the <see cref="T:StardewUI.Widgets.Expander"/> defines both a <see cref="P:StardewUI.Widgets.Expander.Content"/> view (the
            "main" view) and a separate <see cref="P:StardewUI.Widgets.Expander.Header"/> view, but normally only one children/content property is
            allowed per layout view.
            </para>
            <para>
            When a property is decorated with an <c>OutletAttribute</c>, it is ignored by the framework unless the markup
            element includes an <c>*outlet</c> attribute with a value equal to the outlet <see cref="P:StardewUI.Widgets.OutletAttribute.Name"/>, in which case the
            element (or elements) will be added or assigned to that specific outlet.
            </para>
            <para>
            The attribute should be omitted for whichever outlet is considered the default, i.e. to be targeted whenever the
            markup element does not include an <c>*outlet</c> attribute.
            </para>
            <para>
            Has no effect when used outside a data binding context, or when applied to any property that does not have either
            <see cref="T:StardewUI.IView"/> or a collection of <see cref="T:StardewUI.IView"/> elements such as <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </para>
            </remarks>
            <param name="name">The outlet name, to be matched in an <c>*outlet</c> attribute.</param>
        </member>
        <member name="P:StardewUI.Widgets.OutletAttribute.Name">
            <summary>
            The outlet name, to be matched in an <c>*outlet</c> attribute.
            </summary>
        </member>
        <member name="T:StardewUI.Widgets.PositioningOverlay">
            <summary>
            An overlay that can be used to edit the position of some arbitrary content.
            </summary>
            <remarks>
            Note that the widget only provides a means to visually/interactively obtain a new position, similar to e.g.
            obtaining a text string from a modal input query. It is up to the caller to persist the resulting
            <see cref="P:StardewUI.Widgets.PositioningOverlay.ContentPlacement"/> to configuration and determine how to actually position the content in its usual
            context (e.g. game HUD).
            </remarks>
            <param name="buttonSpriteMap">Map of buttons to button prompt sprites.</param>
            <param name="directionSpriteMap">Map of directions to directional arrow sprites; used to indicate dragging.</param>
        </member>
        <member name="M:StardewUI.Widgets.PositioningOverlay.#ctor(StardewUI.Graphics.ISpriteMap{StardewModdingAPI.SButton},StardewUI.Graphics.ISpriteMap{StardewUI.Direction})">
            <summary>
            An overlay that can be used to edit the position of some arbitrary content.
            </summary>
            <remarks>
            Note that the widget only provides a means to visually/interactively obtain a new position, similar to e.g.
            obtaining a text string from a modal input query. It is up to the caller to persist the resulting
            <see cref="P:StardewUI.Widgets.PositioningOverlay.ContentPlacement"/> to configuration and determine how to actually position the content in its usual
            context (e.g. game HUD).
            </remarks>
            <param name="buttonSpriteMap">Map of buttons to button prompt sprites.</param>
            <param name="directionSpriteMap">Map of directions to directional arrow sprites; used to indicate dragging.</param>
        </member>
        <member name="T:StardewUI.Widgets.PositioningOverlay.ControlScheme">
            <summary>
            Configures the mapping of buttons to positioning actions in a <see cref="T:StardewUI.Widgets.PositioningOverlay"/>.
            </summary>
            <remarks>
            <para>
            For all <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> properties, <b>any</b> of the buttons can be pressed in order to perform
            that function; it is primarily intended to support left-stick/d-pad equivalency and WASD/arrow-key equivalency.
            Button combinations are not supported.
            </para>
            <para>
            Keyboard control schemes only specify the fine movements; alignments are always controlled using number/numpad
            keys for each of the 9 possibilities.
            </para>
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.PositioningOverlay.ControlScheme.FineDown">
            <summary>
            Buttons to shift the content down one pixel by modifying the <see cref="P:StardewUI.Layout.NineGridPlacement.Offset"/> of the
            <see cref="P:StardewUI.Widgets.PositioningOverlay.ContentPlacement"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.PositioningOverlay.ControlScheme.FineLeft">
            <summary>
            Buttons to shift the content left one pixel by modifying the <see cref="P:StardewUI.Layout.NineGridPlacement.Offset"/> of the
            <see cref="P:StardewUI.Widgets.PositioningOverlay.ContentPlacement"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.PositioningOverlay.ControlScheme.FineRight">
            <summary>
            Buttons to shift the content right one pixel by modifying the <see cref="P:StardewUI.Layout.NineGridPlacement.Offset"/> of the
            <see cref="P:StardewUI.Widgets.PositioningOverlay.ContentPlacement"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.PositioningOverlay.ControlScheme.FineUp">
            <summary>
            Buttons to shift the content up one pixel by modifying the <see cref="P:StardewUI.Layout.NineGridPlacement.Offset"/> of the
            <see cref="P:StardewUI.Widgets.PositioningOverlay.ContentPlacement"/>.
            </summary>
        </member>
        <member name="T:StardewUI.Widgets.PositioningOverlay.GamepadControlScheme">
            <summary>
            Configures the mapping of buttons to positioning actions in a <see cref="T:StardewUI.Widgets.PositioningOverlay"/>. Includes the
            generic <see cref="T:StardewUI.Widgets.PositioningOverlay.ControlScheme"/> settings as well as grid-movement settings specific to gamepads.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.PositioningOverlay.GamepadControlScheme.GridDown">
            <summary>
            Buttons to shift the content down by one grid cell by changing the
            <see cref="P:StardewUI.Layout.NineGridPlacement.VerticalAlignment"/> of the <see cref="P:StardewUI.Widgets.PositioningOverlay.ContentPlacement"/>.
            <see cref="F:StardewUI.Layout.Alignment.Start"/> becomes <see cref="F:StardewUI.Layout.Alignment.Middle"/> and <see cref="F:StardewUI.Layout.Alignment.Middle"/>
            becomes <see cref="F:StardewUI.Layout.Alignment.End"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.PositioningOverlay.GamepadControlScheme.GridLeft">
            <summary>
            Buttons to shift the content left by one grid cell by changing the
            <see cref="P:StardewUI.Layout.NineGridPlacement.HorizontalAlignment"/> of the <see cref="P:StardewUI.Widgets.PositioningOverlay.ContentPlacement"/>.
            <see cref="F:StardewUI.Layout.Alignment.End"/> becomes <see cref="F:StardewUI.Layout.Alignment.Middle"/> and <see cref="F:StardewUI.Layout.Alignment.Middle"/>
            becomes <see cref="F:StardewUI.Layout.Alignment.Start"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.PositioningOverlay.GamepadControlScheme.GridRight">
            <summary>
            Buttons to shift the content right by one grid cell by changing the
            <see cref="P:StardewUI.Layout.NineGridPlacement.HorizontalAlignment"/> of the <see cref="P:StardewUI.Widgets.PositioningOverlay.ContentPlacement"/>.
            <see cref="F:StardewUI.Layout.Alignment.Start"/> becomes <see cref="F:StardewUI.Layout.Alignment.Middle"/> and <see cref="F:StardewUI.Layout.Alignment.Middle"/>
            becomes <see cref="F:StardewUI.Layout.Alignment.End"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.PositioningOverlay.GamepadControlScheme.GridUp">
            <summary>
            Buttons to shift the content up by one grid cell by changing the
            <see cref="P:StardewUI.Layout.NineGridPlacement.VerticalAlignment"/> of the <see cref="P:StardewUI.Widgets.PositioningOverlay.ContentPlacement"/>.
            <see cref="F:StardewUI.Layout.Alignment.End"/> becomes <see cref="F:StardewUI.Layout.Alignment.Middle"/> and <see cref="F:StardewUI.Layout.Alignment.Middle"/>
            becomes <see cref="F:StardewUI.Layout.Alignment.Start"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.PositioningOverlay.GamepadControlScheme.Modifier">
            <summary>
            Modifier key to switch between grid- and fine-positioning modes.
            </summary>
            <remarks>
            If specified, the default motion will be fine, and the modifier key must be held in order to move accross
            the grid.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.PositioningOverlay.Content">
            <summary>
            The content that is being positioned.
            </summary>
            <remarks>
            This is normally a "representative" version of the real content, as the true HUD widget or other element may not
            exist or have its properties known at configuration time.
            </remarks>
        </member>
        <member name="P:StardewUI.Widgets.PositioningOverlay.ContentPlacement">
            <summary>
            Current placement of the <see cref="P:StardewUI.Widgets.PositioningOverlay.Content"/> within the viewport.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.PositioningOverlay.GamepadControls">
            <summary>
            The control scheme to use when positioning with a gamepad.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.PositioningOverlay.KeyboardControls">
            <summary>
            The control scheme to use when positioning with keyboard/mouse.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:StardewUI.Widgets.PositioningOverlay.CreateView">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Widgets.SelectionGroup">
            <summary>
            Provides a single selection key with change notifications.
            </summary>
            <remarks>
            Can be used to group together UI widgets so that only one at a time can be active, e.g. in a tab or radio group.
            </remarks>
        </member>
        <member name="E:StardewUI.Widgets.SelectionGroup.Change">
            <summary>
            Raised when the <see cref="P:StardewUI.Widgets.SelectionGroup.Key"/> changes.
            </summary>
        </member>
        <member name="P:StardewUI.Widgets.SelectionGroup.Key">
            <summary>
            The currently-selected key.
            </summary>
        </member>
        <member name="T:StardewUI.Widgets.ShadowLayers">
            <summary>
            Describes which shadow layers will be drawn, for widgets such as <see cref="T:StardewUI.Widgets.Label"/> that support layered shadows.
            </summary>
        </member>
        <member name="F:StardewUI.Widgets.ShadowLayers.None">
            <summary>
            No layers; the shadow will not be drawn.
            </summary>
        </member>
        <member name="F:StardewUI.Widgets.ShadowLayers.Diagonal">
            <summary>
            Diagonal shadow layer, with both a horizontal and vertical offset from the content.
            </summary>
        </member>
        <member name="F:StardewUI.Widgets.ShadowLayers.Horizontal">
            <summary>
            Horizontal shadow layer, using only the horizontal offset from content and ignoring vertical offset.
            </summary>
        </member>
        <member name="F:StardewUI.Widgets.ShadowLayers.HorizontalAndDiagonal">
            <summary>
            Combination of <see cref="F:StardewUI.Widgets.ShadowLayers.Horizontal"/> and <see cref="F:StardewUI.Widgets.ShadowLayers.Diagonal"/> layers.
            </summary>
        </member>
        <member name="F:StardewUI.Widgets.ShadowLayers.Vertical">
            <summary>
            Vertical shadow layer, using only the vertical offset from content and ignoring horizontal offset.
            </summary>
        </member>
        <member name="F:StardewUI.Widgets.ShadowLayers.VerticalAndDiagonal">
            <summary>
            Combination of <see cref="F:StardewUI.Widgets.ShadowLayers.Vertical"/> and <see cref="F:StardewUI.Widgets.ShadowLayers.Diagonal"/> layers.
            </summary>
        </member>
        <member name="F:StardewUI.Widgets.ShadowLayers.HorizontalAndVertical">
            <summary>
            Combination of <see cref="F:StardewUI.Widgets.ShadowLayers.Horizontal"/> and <see cref="F:StardewUI.Widgets.ShadowLayers.Vertical"/> layers.
            </summary>
        </member>
        <member name="F:StardewUI.Widgets.ShadowLayers.All">
            <summary>
            Includes all individual shadow layers.
            </summary>
        </member>
        <member name="T:StardewUI.Animation.Animation`1">
            <summary>
            Defines a single animation.
            </summary>
            <typeparam name="T">The type of value being animated.</typeparam>
            <param name="StartValue">The initial value for the animated property.</param>
            <param name="EndValue">The final value for the animated property.</param>
            <param name="Duration">Duration of the animation.</param>
        </member>
        <member name="M:StardewUI.Animation.Animation`1.#ctor(`0,`0,System.TimeSpan)">
            <summary>
            Defines a single animation.
            </summary>
            <typeparam name="T">The type of value being animated.</typeparam>
            <param name="StartValue">The initial value for the animated property.</param>
            <param name="EndValue">The final value for the animated property.</param>
            <param name="Duration">Duration of the animation.</param>
        </member>
        <member name="P:StardewUI.Animation.Animation`1.StartValue">
            <summary>The initial value for the animated property.</summary>
        </member>
        <member name="P:StardewUI.Animation.Animation`1.EndValue">
            <summary>The final value for the animated property.</summary>
        </member>
        <member name="P:StardewUI.Animation.Animation`1.Duration">
            <summary>Duration of the animation.</summary>
        </member>
        <member name="T:StardewUI.Animation.AnimationRunner">
            <summary>
            Central registry for view animations, meant to be driven from the game loop.
            </summary>
        </member>
        <member name="M:StardewUI.Animation.AnimationRunner.Tick(System.TimeSpan)">
            <summary>
            Handles a game tick.
            </summary>
            <param name="elapsed">Time elapsed since last tick.</param>
        </member>
        <member name="T:StardewUI.Animation.Animator">
            <summary>
            Helpers for creating typed <see cref="T:StardewUI.Animation.Animator`2"/> instances.
            </summary>
        </member>
        <member name="M:StardewUI.Animation.Animator.On``2(``0,System.Func{``0,``1},StardewUI.Animation.Lerp{``1},System.Action{``0,``1})">
            <summary>
            Creates a new <see cref="T:StardewUI.Animation.Animator`2"/>.
            </summary>
            <remarks>
            Calling this is the same as calling the constructor, but typically does not require explicit type arguments.
            </remarks>
            <param name="target">The object whose property will be animated.</param>
            <param name="getValue">Function to get the current value. Used for animations that don't explicit specify a
            start value, e.g. when using the <see cref="M:StardewUI.Animation.Animator`2.Start(`1,System.TimeSpan)"/> overload.</param>
            <param name="lerpValue">Function to linearly interpolate between the start and end values.</param>
            <param name="setValue">Delegate to set the value on the <paramref name="target"/>.</param>
        </member>
        <member name="M:StardewUI.Animation.Animator.On``1(``0,System.Func{``0,System.Single},System.Action{``0,System.Single})">
            <summary>
            Creates a new <see cref="T:StardewUI.Animation.Animator`2"/> that animates a standard <see cref="T:System.Single"/> property.
            </summary>
            <remarks>
            Calling this is the same as calling the constructor, but typically does not require explicit type arguments.
            </remarks>
            <param name="target">The object whose property will be animated.</param>
            <param name="getValue">Function to get the current value. Used for animations that don't explicit specify a
            start value, e.g. when using the <see cref="M:StardewUI.Animation.Animator`2.Start(`1,System.TimeSpan)"/> overload.</param>
            <param name="setValue">Delegate to set the value on the <paramref name="target"/>.</param>
        </member>
        <member name="T:StardewUI.Animation.Animator`2">
            <summary>
            Animates a single property of a single class.
            </summary>
            <typeparam name="T">The target class that will receive the animation.</typeparam>
            <typeparam name="V">The type of value belonging to <typeparamref name="T"/> that should be animated.</typeparam>
        </member>
        <member name="P:StardewUI.Animation.Animator`2.AutoReverse">
            <summary>
            Whether to automatically start playing in reverse after reaching the end.
            </summary>
        </member>
        <member name="P:StardewUI.Animation.Animator`2.CurrentAnimation">
            <summary>
            The current animation, if any, started by <see cref="M:StardewUI.Animation.Animator`2.Start(StardewUI.Animation.Animation{`1})"/> or any <c>Start</c> overloads.
            </summary>
        </member>
        <member name="P:StardewUI.Animation.Animator`2.IsReversing">
            <summary>
            Gets whether or not the animator is currently animating in <see cref="M:StardewUI.Animation.Animator`2.Reverse" />.
            </summary>
        </member>
        <member name="P:StardewUI.Animation.Animator`2.Loop">
            <summary>
            Whether or not the animation should automatically loop back to the beginning when finished.
            </summary>
        </member>
        <member name="P:StardewUI.Animation.Animator`2.Paused">
            <summary>
            Whether or not to pause animation. If <c>true</c>, the animator will hold at the current position and not
            progress until set to <c>false</c> again. Does not affect the <see cref="P:StardewUI.Animation.Animator`2.CurrentAnimation"/>.
            </summary>
        </member>
        <member name="M:StardewUI.Animation.Animator`2.#ctor(`0,System.Func{`0,`1},StardewUI.Animation.Lerp{`1},System.Action{`0,`1})">
            <summary>
            Initializes a new <see cref="T:StardewUI.Animation.Animator`2"/>.
            </summary>
            <param name="target">The object whose property will be animated.</param>
            <param name="getValue">Function to get the current value. Used for animations that don't explicit specify a
            start value, e.g. when using the <see cref="M:StardewUI.Animation.Animator`2.Start(`1,System.TimeSpan)"/> overload.</param>
            <param name="lerpValue">Function to linearly interpolate between the start and end values.</param>
            <param name="setValue">Delegate to set the value on the <paramref name="target"/>.</param>
        </member>
        <member name="M:StardewUI.Animation.Animator`2.Forward">
            <summary>
            Causes the animator to animate in the forward direction toward animation's <see cref="P:StardewUI.Animation.Animation`1.EndValue"/>.
            </summary>
            <remarks>
            Does not restart the animation; if the animator is not reversed, then calling this has no effect.
            </remarks>
        </member>
        <member name="M:StardewUI.Animation.Animator`2.Reset">
            <summary>
            Jumps to the first frame of the current animation, or the last frame if <see cref="P:StardewUI.Animation.Animator`2.IsReversing"/> is
            <c>true</c>.
            </summary>
            <remarks>
            Has no effect unless <see cref="P:StardewUI.Animation.Animator`2.CurrentAnimation"/> has been set by a previous call to one of the
            <see cref="M:StardewUI.Animation.Animator`2.Start(StardewUI.Animation.Animation{`1})"/> overloads.
            </remarks>
        </member>
        <member name="M:StardewUI.Animation.Animator`2.Reverse">
            <summary>
            Reverses the current animation, so that it gradually returns to the animation's
            <see cref="P:StardewUI.Animation.Animation`1.StartValue"/>.
            </summary>
            <remarks>
            Calling <see cref="M:StardewUI.Animation.Animator`2.Reverse"/> is different from starting a new animation with reversed start and end values;
            specifically, it will follow the timeline/curve backward from the current progress. If only 1/4 second of a
            1-second animation elapsed in the forward direction, then the reverse animation will also only take 1/4 second.
            </remarks>
        </member>
        <member name="M:StardewUI.Animation.Animator`2.Start(StardewUI.Animation.Animation{`1})">
            <summary>
            Starts a new animation.
            </summary>
            <param name="animation">The animation settings.</param>
        </member>
        <member name="M:StardewUI.Animation.Animator`2.Start(`1,`1,System.Nullable{System.TimeSpan})">
            <summary>
            Starts a new animation using the specified start/end values and duration.
            </summary>
            <param name="startValue">The initial value of the animation property. This will take effect immediately, even if
            it is far away from the current value; i.e. it may cause "jumps".</param>
            <param name="endValue">The final value to be reached once the <paramref name="duration"/> ends.</param>
            <param name="duration">Duration of the animation; defaults to 1 second if not specified.</param>
        </member>
        <member name="M:StardewUI.Animation.Animator`2.Start(`1,System.TimeSpan)">
            <summary>
            Starts a new animation that begins at the current value and ends at the specified value after the specified
            duration.
            </summary>
            <param name="endValue">The final value to be reached once the <paramref name="duration"/> ends.</param>
            <param name="duration">Duration of the animation; defaults to 1 second if not specified.</param>
        </member>
        <member name="M:StardewUI.Animation.Animator`2.Stop">
            <summary>
            Completely stops animating, removing the <see cref="P:StardewUI.Animation.Animator`2.CurrentAnimation"/> and resetting animation state such as
            <see cref="M:StardewUI.Animation.Animator`2.Reverse"/> and <see cref="P:StardewUI.Animation.Animator`2.Paused"/>.
            </summary>
            <remarks>
            <para>
            This tries to put the animator in the same state it was in when first created. To preserve the current animation
            but pause progress and be able to resume later, set <see cref="P:StardewUI.Animation.Animator`2.Paused"/> instead.
            </para>
            <para>
            Calling this does <b>not</b> reset the animated object to the animation's starting value. To do this, call
            <see cref="M:StardewUI.Animation.Animator`2.Reset"/> before calling <see cref="M:StardewUI.Animation.Animator`2.Stop"/> (not after, as <see cref="M:StardewUI.Animation.Animator`2.Reset"/> has no effect once the
            <see cref="P:StardewUI.Animation.Animator`2.CurrentAnimation"/> is cleared).
            </para>
            </remarks>
        </member>
        <member name="M:StardewUI.Animation.Animator`2.Tick(System.TimeSpan)">
            <summary>
            Continues animating in the current direction.
            </summary>
            <param name="elapsed">Time elapsed since last tick.</param>
        </member>
        <member name="T:StardewUI.Animation.Easing">
            <summary>
            An easing function which computes the Y value between transitions or keyframes.
            </summary>
            <param name="x">A value between <c>0.0</c> and <c>1.0</c> representing the position on a timeline.</param>
            <returns>The <c>y</c> value for the given <paramref name="x"/> value; the interpolation amount to use in the
            <see cref="T:StardewUI.Animation.Lerp`1"/> between states. This value does not have to be between <c>0.0</c> and <c>0.1</c>; it can be
            outside that range, e.g. to create an elastic or bounce effect, but generally should be <c>0</c>> when <c>x</c> is
            exactly <c>0</c>> and <c>1</c> when <c>x</c> is exactly <c>1</c>.</returns>
        </member>
        <member name="T:StardewUI.Animation.Easings">
            <summary>
            Common registration and lookup for easing functions.
            </summary>
        </member>
        <member name="M:StardewUI.Animation.Easings.Add(System.String,StardewUI.Animation.Easing)">
            <summary>
            Registers a new easing, if one with the same name is not already registered.
            </summary>
            <remarks>
            If an easing with the specified <paramref name="name"/> already exists, the call is ignored.
            </remarks>
            <param name="name">The name of the easing function.</param>
            <param name="easing">The easing function.</param>
        </member>
        <member name="M:StardewUI.Animation.Easings.CubicBezier(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a Cubic Bézier (AKA key spline) easing from two control points.
            </summary>
            <param name="x1">The X value of the first control point.</param>
            <param name="y1">The Y value of the first control point.</param>
            <param name="x2">The X value of the second control point.</param>
            <param name="y2">The Y value of the second control point.</param>
            <returns>The easing function described by the control points.</returns>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/CSS/easing-function/cubic-bezier"/>
        </member>
        <member name="M:StardewUI.Animation.Easings.Named(System.String)">
            <summary>
            Retrieves an easing function, given its registered name.
            </summary>
            <param name="name">An easing function name, such as <c>EaseOutCubic</c>.</param>
            <returns>The easing function registered with the specified <paramref name="name"/>, or <c>null</c> if no such
            function was registered.</returns>
        </member>
        <member name="M:StardewUI.Animation.Easings.Parse(System.String)">
            <inheritdoc cref="M:StardewUI.Animation.Easings.Parse(System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:StardewUI.Animation.Easings.Parse(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses an <see cref="T:StardewUI.Animation.Easing"/> value from a string value.
            </summary>
            <param name="value">The string value to parse.</param>
            <returns>The parsed easing function.</returns>
            <exception cref="T:System.FormatException">Thrown when the <paramref name="value"/> is not a known easing function or a
            valid user-defined easing definition.</exception>
        </member>
        <member name="M:StardewUI.Animation.Easings.TryParse(System.ReadOnlySpan{System.Char},StardewUI.Animation.Easing@)">
            <summary>
            Attempts to parse an <see cref="T:StardewUI.Animation.Easing"/> value from a string value.
            </summary>
            <remarks>
            Works with both named easings, and known easing functions like <c>CubicBezier</c>.
            </remarks>
            <param name="value">The string value to parse.</param>
            <param name="result">The parsed easing function, if successful; otherwise <c>null</c>.</param>
            <returns><c>true</c> if the <paramref name="value"/> was parsed successfully, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:StardewUI.Animation.HoverScale">
            <summary>
            Standalone scaling behavior that can be attached to any <see cref="T:StardewUI.Widgets.Image"/>, causing it to scale up to a specified
            amount when hovered by the pointer.
            </summary>
        </member>
        <member name="M:StardewUI.Animation.HoverScale.Attach(StardewUI.Widgets.Image,System.Single,System.Nullable{System.TimeSpan})">
            <summary>
            Attaches a new hover behavior to an image.
            </summary>
            <param name="image">The image that will receive the hover behavior.</param>
            <param name="maxScale">Target scale at the end of the animation; generally a number > 1.</param>
            <param name="duration">Duration of the animation; if not specified, defaults to 80 ms.</param>
        </member>
        <member name="T:StardewUI.Animation.IAnimator">
            <summary>
            Internal animator abstraction used for driving animations; does not need to know the target or value types, only to
            have the ability to accept time ticks.
            </summary>
        </member>
        <member name="M:StardewUI.Animation.IAnimator.IsValid">
            <summary>
            Checks if the animator can still animate, e.g. if it still has a valid target.
            </summary>
        </member>
        <member name="M:StardewUI.Animation.IAnimator.Tick(System.TimeSpan)">
            <summary>
            Advances the animation.
            </summary>
            <param name="elapsed">The time elapsed since the previous tick.</param>
        </member>
        <member name="T:StardewUI.Animation.Lerp`1">
            <summary>
            Performs linear interpolation between two values.
            </summary>
            <typeparam name="T">The type of value.</typeparam>
            <param name="value1">The first, or "start" value to use at <paramref name="amount"/> = <c>0.0</c>.</param>
            <param name="value2">The second, or "end" value to use at <paramref name="amount"/> = <c>1.0</c>.</param>
            <param name="amount">The interpolation amount between <c>0.0</c> and <c>1.0</c>.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="T:StardewUI.Animation.Lerps">
            <summary>
            Common registration and lookup for interpolation functions.
            </summary>
        </member>
        <member name="M:StardewUI.Animation.Lerps.Add``1(StardewUI.Animation.Lerp{``0})">
            <summary>
            Registers a new interpolation function, if there is not already a function for the same type.
            </summary>
            <remarks>
            If an interpolation function is already known for the type <typeparamref name="T"/>, the call is ignored.
            </remarks>
            <param name="lerp">Interpolation function for the specified type.</param>
            <typeparam name="T">The type of value to interpolate.</typeparam>
        </member>
        <member name="M:StardewUI.Animation.Lerps.Get``1">
            <summary>
            Retrieves the interpolation function for a given type, if one is defined.
            </summary>
            <typeparam name="T">The type of value to interpolate.</typeparam>
            <returns>The interpolation function for type <typeparamref name="T"/>, or <c>null</c> if there is no known
            function for the given type.</returns>
        </member>
        <member name="T:StardewUI.Animation.SpriteAnimator">
            <summary>
            Animates the sprite of an <see cref="T:StardewUI.Widgets.Image"/>, using equal duration for all frames in a list.
            </summary>
        </member>
        <member name="P:StardewUI.Animation.SpriteAnimator.FrameDuration">
            <summary>
            Duration of each frame.
            </summary>
        </member>
        <member name="P:StardewUI.Animation.SpriteAnimator.Frames">
            <summary>
            Frames to animate through.
            </summary>
        </member>
        <member name="P:StardewUI.Animation.SpriteAnimator.Paused">
            <summary>
            Whether or not to pause animation. If <c>true</c>, the animator will hold at the current position and not
            progress until set to <c>false</c> again.
            </summary>
        </member>
        <member name="P:StardewUI.Animation.SpriteAnimator.StartDelay">
            <summary>
            Delay before advancing from the first frame to the next frames.
            </summary>
            <remarks>
            Repeats on every loop, but only applies to the first frame of each loop.
            </remarks>
        </member>
        <member name="M:StardewUI.Animation.SpriteAnimator.#ctor(StardewUI.Widgets.Image)">
            <summary>
            Initializes a new instance of <see cref="T:StardewUI.Animation.SpriteAnimator"/> that animates the sprite on a specified image.
            </summary>
            <param name="image">The image to animate.</param>
        </member>
        <member name="M:StardewUI.Animation.SpriteAnimator.Reset">
            <summary>
            Resets the animation to the first frame, and waits any <see cref="P:StardewUI.Animation.SpriteAnimator.StartDelay"/> required again.
            </summary>
        </member>
        <member name="M:StardewUI.Animation.SpriteAnimator.Tick(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Animation.Transition">
            <summary>
            Describes the transition behavior of a single property.
            </summary>
            <param name="Duration">Duration of the transition.</param>
            <param name="Delay">Delay during which to hold the current value before transitioning to the new value.</param>
            <param name="Easing">Type of easing or acceleration curve for the transition.</param>
        </member>
        <member name="M:StardewUI.Animation.Transition.#ctor(System.TimeSpan,System.TimeSpan,StardewUI.Animation.Easing)">
            <summary>
            Describes the transition behavior of a single property.
            </summary>
            <param name="Duration">Duration of the transition.</param>
            <param name="Delay">Delay during which to hold the current value before transitioning to the new value.</param>
            <param name="Easing">Type of easing or acceleration curve for the transition.</param>
        </member>
        <member name="P:StardewUI.Animation.Transition.Duration">
            <summary>Duration of the transition.</summary>
        </member>
        <member name="P:StardewUI.Animation.Transition.Delay">
            <summary>Delay during which to hold the current value before transitioning to the new value.</summary>
        </member>
        <member name="P:StardewUI.Animation.Transition.Easing">
            <summary>Type of easing or acceleration curve for the transition.</summary>
        </member>
        <member name="F:StardewUI.Animation.Transition.Default">
            <summary>
            A <see cref="T:StardewUI.Animation.Transition"/> instance with all values set to their defaults.
            </summary>
        </member>
        <member name="F:StardewUI.Animation.Transition.DefaultDelay">
            <summary>
            Default delay (zero) for transitions not specifying an explicit delay.
            </summary>
        </member>
        <member name="F:StardewUI.Animation.Transition.DefaultDuration">
            <summary>
            Default duration (1 second) for transitions not specifying an explicit duration.
            </summary>
        </member>
        <member name="F:StardewUI.Animation.Transition.DefaultEasing">
            <summary>
            Default easing (linear) for transitions not specifying an explicit easing function.
            </summary>
        </member>
        <member name="P:StardewUI.Animation.Transition.TotalDuration">
            <summary>
            The total duration of the transition, including both the animation itself and any pre-delay.
            </summary>
        </member>
        <member name="M:StardewUI.Animation.Transition.#ctor(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},StardewUI.Animation.Easing)">
            <summary>
            Initializes a new <see cref="T:StardewUI.Animation.Transition"/> instance.
            </summary>
            <param name="duration">Duration of the transition. If not specified, the transition will use the
            <see cref="F:StardewUI.Animation.Transition.DefaultDuration"/>.</param>
            <param name="delay">Delay during which to hold the current value before transitioning to the new value. If not
            specified, the transition will use the <see cref="F:StardewUI.Animation.Transition.DefaultDelay"/>.</param>
            <param name="easing">Type of easing or acceleration curve for the transition. If not specified, the transition
            will use the <see cref="F:StardewUI.Animation.Transition.DefaultEasing"/>.</param>
        </member>
        <member name="M:StardewUI.Animation.Transition.GetPosition(System.TimeSpan)">
            <summary>
            Computes the interpolation position for this transition, given the time elapsed since the transition was first
            triggered.
            </summary>
            <remarks>
            The value is independent of the type of property being transitioned, or how it is interpolated; the result is
            intended to be used as the <c>amount</c> argument to a <see cref="T:StardewUI.Animation.Lerp`1"/> delegate.
            </remarks>
            <param name="elapsed">Time elapsed since the transition was initiated.</param>
            <returns>The interpolation amount or "y position" at the specified time.</returns>
        </member>
        <member name="M:StardewUI.Animation.Transition.Parse(System.String)">
            <inheritdoc cref="M:StardewUI.Animation.Transition.Parse(System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:StardewUI.Animation.Transition.Parse(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a <see cref="T:StardewUI.Animation.Transition"/> value from a string value.
            </summary>
            <param name="value">The string value to parse.</param>
            <returns>The parsed transition.</returns>
            <exception cref="T:System.FormatException">Thrown when the <paramref name="value"/> is not a valid transition
            string.</exception>
        </member>
        <member name="M:StardewUI.Animation.Transition.TryParse(System.ReadOnlySpan{System.Char},StardewUI.Animation.Transition@)">
            <summary>
            Attempts to parse a <see cref="T:StardewUI.Animation.Transition"/> value from a string value.
            </summary>
            <param name="value">The string value to parse.</param>
            <param name="result">The parsed transition, if successful; otherwise <c>null</c>.</param>
            <returns><c>true</c> if the <paramref name="value"/> was parsed successfully, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:StardewUI.Data.ButtonSpriteMapData">
            <summary>
            JSON configuration data for a <see cref="T:StardewUI.Graphics.ButtonSpriteMap"/>.
            </summary>
            <remarks>
            The data is based on having the sprites themselves registered as assets, e.g. via <see cref="T:StardewUI.Data.SpriteSheetData"/>.
            </remarks>
        </member>
        <member name="P:StardewUI.Data.ButtonSpriteMapData.Buttons">
            <summary>
            Map of buttons to the asset name used for that button's sprite.
            </summary>
            <remarks>
            Specific button sprites <b>replace</b> the <see cref="P:StardewUI.Data.ButtonSpriteMapData.ControllerBlank"/> or <see cref="P:StardewUI.Data.ButtonSpriteMapData.KeyboardBlank"/> and
            therefore must include both the border and inner icon/text.
            </remarks>
        </member>
        <member name="P:StardewUI.Data.ButtonSpriteMapData.ControllerBlank">
            <summary>
            Name of the sprite asset to use for <see cref="P:StardewUI.Graphics.ButtonSpriteMap.ControllerBlank"/>.
            </summary>
            <remarks>
            Used as the background for any controller button lacking its own unique sprite; the button name is rendered
            inside as regular text.
            </remarks>
        </member>
        <member name="P:StardewUI.Data.ButtonSpriteMapData.KeyboardBlank">
            <summary>
            Name of the sprite asset to use for <see cref="P:StardewUI.Graphics.ButtonSpriteMap.KeyboardBlank"/>.
            </summary>
            <remarks>
            Used as the background for any key lacking its own unique sprite; the key name is rendered inside as regular
            text.
            </remarks>
        </member>
        <member name="P:StardewUI.Data.ButtonSpriteMapData.MouseLeft">
            <summary>
            Name of the sprite asset to use for <see cref="P:StardewUI.Graphics.ButtonSpriteMap.MouseLeft"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Data.ButtonSpriteMapData.MouseMiddle">
            <summary>
            Name of the sprite asset to use for <see cref="P:StardewUI.Graphics.ButtonSpriteMap.MouseMiddle"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Data.ButtonSpriteMapData.MouseRight">
            <summary>
            Name of the sprite asset to use for <see cref="P:StardewUI.Graphics.ButtonSpriteMap.MouseRight"/>.
            </summary>
        </member>
        <member name="T:StardewUI.Data.EdgesJsonConverter">
            <summary>
            JSON converter for the <see cref="T:StardewUI.Layout.Edges"/> type.
            </summary>
        </member>
        <member name="T:StardewUI.Data.RectangleJsonConverter">
            <summary>
            JSON converter for the <see cref="T:Microsoft.Xna.Framework.Rectangle"/> type.
            </summary>
        </member>
        <member name="T:StardewUI.Data.SpriteSheetData">
            <summary>
            JSON data for a sprite sheet configuration.
            </summary>
            <remarks>
            Only used externally; internally, all UI code uses <see cref="T:StardewUI.Graphics.Sprite"/>.
            </remarks>
        </member>
        <member name="P:StardewUI.Data.SpriteSheetData.TextureAssetName">
            <summary>
            The name of the texture asset (not path) to load for all <see cref="P:StardewUI.Data.SpriteSheetData.Sprites"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Data.SpriteSheetData.Sprites">
            <summary>
            The individual sprites - source rectangles and other attributes.
            </summary>
        </member>
        <member name="T:StardewUI.Data.SpriteData">
            <summary>
            JSON data for an individual sprite configuration.
            </summary>
            <remarks>
            Requires the parent <see cref="T:StardewUI.Data.SpriteData"/> for identifying the texture. Only used externally; internally, all UI
            code uses <see cref="T:StardewUI.Graphics.Sprite"/>.
            </remarks>
        </member>
        <member name="P:StardewUI.Data.SpriteData.SourceRect">
            <summary>
            The rectangular region of the source texture where the sprite is located.
            </summary>
        </member>
        <member name="P:StardewUI.Data.SpriteData.FixedEdges">
            <summary>
            The sprite's fixed edges, containing the length on each side (left, top, right, bottom) that should not be
            scaled with the rest of the image. Used for nine-slice sprites.
            </summary>
        </member>
        <member name="P:StardewUI.Data.SpriteData.SliceSettings">
            <summary>
            Additional settings specific to nine-slicing.
            </summary>
        </member>
        <member name="P:StardewUI.Data.SpriteData.Scale">
            <summary>
            The <em>native</em> scale at which to draw the sprite.
            </summary>
            <remarks>
            <para>
            Sprites drawn as part of an <see cref="T:StardewUI.Widgets.Image"/> are always scaled according to the layout dimensions and
            fit settings; specifying a non-unity scale here will also cause any <see cref="P:StardewUI.Data.SpriteData.FixedEdges"/> to be scaled. This
            is meant for nine-slice sprites that need to scale borders up by a fixed amount (most often 4, sometimes 2) and
            the center slice by an arbitrary amount.
            </para>
            <para>
            This setting is shorthand for <see cref="P:StardewUI.Graphics.SliceSettings.Scale"/> since it is the most commonly used slice
            setting. Providing a non-default value will create the <see cref="P:StardewUI.Data.SpriteData.SliceSettings"/> instance.
            </para>
            </remarks>
        </member>
        <member name="M:StardewUI.Data.SpriteData.CreateSprite(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Creates a <see cref="T:StardewUI.Graphics.Sprite"/> based on this data.
            </summary>
            <param name="texture">The texture containing the sprite.</param>
        </member>
        <member name="T:StardewUI.Data.TooltipData">
            <summary>
            Provides data for all known variants of a menu tooltip.
            </summary>
            <param name="Text">The primary description text to display. Tooltips converted from a simple <see cref="T:System.String"/>
            will have this field populated.</param>
            <param name="Title">Bolded title to display above the <see cref="P:StardewUI.Data.TooltipData.Text"/>, with a separator in between.</param>
            <param name="Item">The specific game item, if any, that is the "topic" of this tooltip, used to show additional
            item-specific information such as buffs, durations and recovery values.</param>
            <param name="CurrencyAmount">Amount of money associated with the tooltip action, generally a buy or sell
            price.</param>
            <param name="CurrencySymbol">
            <para>
            The currency associated with any <see cref="P:StardewUI.Data.TooltipData.CurrencyAmount"/>; has no effect unless <see cref="P:StardewUI.Data.TooltipData.CurrencyAmount"/>
            is also specified.
            </para>
            <para>
            The meaning of each value is dependent on game implementation, but at the time of writing the available options are:
            <c>0</c> = coins, <c>1</c> = star tokens (silver star), <c>2</c> = casino tokens, and <c>4</c> = Qi gems.
            </para>
            </param>
            <param name="RequiredItemId">Item ID to show as a required item, usually used as an alternative to
            <see cref="P:StardewUI.Data.TooltipData.CurrencySymbol"/> for non-currency trades, such as the Desert Trader.</param>
            <param name="RequiredItemAmount">The number of items required, e.g. for trade, when <see cref="P:StardewUI.Data.TooltipData.RequiredItemId"/> is
            specified.</param>
            <param name="CraftingRecipe">Crafting recipe to show, if the tooltip is for a craftable item.</param>
            <param name="AdditionalCraftingMaterials">List of additional items required for crafting that are not included in
            the <see cref="P:StardewUI.Data.TooltipData.CraftingRecipe"/>.</param>
        </member>
        <member name="M:StardewUI.Data.TooltipData.#ctor(System.String,System.String,StardewValley.Item,System.Nullable{System.Int32},System.Int32,System.String,System.Int32,StardewValley.CraftingRecipe,System.Collections.Generic.IList{StardewValley.Item})">
            <summary>
            Provides data for all known variants of a menu tooltip.
            </summary>
            <param name="Text">The primary description text to display. Tooltips converted from a simple <see cref="T:System.String"/>
            will have this field populated.</param>
            <param name="Title">Bolded title to display above the <see cref="P:StardewUI.Data.TooltipData.Text"/>, with a separator in between.</param>
            <param name="Item">The specific game item, if any, that is the "topic" of this tooltip, used to show additional
            item-specific information such as buffs, durations and recovery values.</param>
            <param name="CurrencyAmount">Amount of money associated with the tooltip action, generally a buy or sell
            price.</param>
            <param name="CurrencySymbol">
            <para>
            The currency associated with any <see cref="P:StardewUI.Data.TooltipData.CurrencyAmount"/>; has no effect unless <see cref="P:StardewUI.Data.TooltipData.CurrencyAmount"/>
            is also specified.
            </para>
            <para>
            The meaning of each value is dependent on game implementation, but at the time of writing the available options are:
            <c>0</c> = coins, <c>1</c> = star tokens (silver star), <c>2</c> = casino tokens, and <c>4</c> = Qi gems.
            </para>
            </param>
            <param name="RequiredItemId">Item ID to show as a required item, usually used as an alternative to
            <see cref="P:StardewUI.Data.TooltipData.CurrencySymbol"/> for non-currency trades, such as the Desert Trader.</param>
            <param name="RequiredItemAmount">The number of items required, e.g. for trade, when <see cref="P:StardewUI.Data.TooltipData.RequiredItemId"/> is
            specified.</param>
            <param name="CraftingRecipe">Crafting recipe to show, if the tooltip is for a craftable item.</param>
            <param name="AdditionalCraftingMaterials">List of additional items required for crafting that are not included in
            the <see cref="P:StardewUI.Data.TooltipData.CraftingRecipe"/>.</param>
        </member>
        <member name="P:StardewUI.Data.TooltipData.Text">
            <summary>The primary description text to display. Tooltips converted from a simple <see cref="T:System.String"/>
            will have this field populated.</summary>
        </member>
        <member name="P:StardewUI.Data.TooltipData.Title">
            <summary>Bolded title to display above the <see cref="P:StardewUI.Data.TooltipData.Text"/>, with a separator in between.</summary>
        </member>
        <member name="P:StardewUI.Data.TooltipData.Item">
            <summary>The specific game item, if any, that is the "topic" of this tooltip, used to show additional
            item-specific information such as buffs, durations and recovery values.</summary>
        </member>
        <member name="P:StardewUI.Data.TooltipData.CurrencyAmount">
            <summary>Amount of money associated with the tooltip action, generally a buy or sell
            price.</summary>
        </member>
        <member name="P:StardewUI.Data.TooltipData.CurrencySymbol">
            <summary>
            <para>
            The currency associated with any <see cref="P:StardewUI.Data.TooltipData.CurrencyAmount"/>; has no effect unless <see cref="P:StardewUI.Data.TooltipData.CurrencyAmount"/>
            is also specified.
            </para>
            <para>
            The meaning of each value is dependent on game implementation, but at the time of writing the available options are:
            <c>0</c> = coins, <c>1</c> = star tokens (silver star), <c>2</c> = casino tokens, and <c>4</c> = Qi gems.
            </para>
            </summary>
        </member>
        <member name="P:StardewUI.Data.TooltipData.RequiredItemId">
            <summary>Item ID to show as a required item, usually used as an alternative to
            <see cref="P:StardewUI.Data.TooltipData.CurrencySymbol"/> for non-currency trades, such as the Desert Trader.</summary>
        </member>
        <member name="P:StardewUI.Data.TooltipData.RequiredItemAmount">
            <summary>The number of items required, e.g. for trade, when <see cref="P:StardewUI.Data.TooltipData.RequiredItemId"/> is
            specified.</summary>
        </member>
        <member name="P:StardewUI.Data.TooltipData.CraftingRecipe">
            <summary>Crafting recipe to show, if the tooltip is for a craftable item.</summary>
        </member>
        <member name="P:StardewUI.Data.TooltipData.AdditionalCraftingMaterials">
            <summary>List of additional items required for crafting that are not included in
            the <see cref="P:StardewUI.Data.TooltipData.CraftingRecipe"/>.</summary>
        </member>
        <member name="M:StardewUI.Data.TooltipData.ValidateItemId(System.String)">
            <summary>
            Validates an item ID for use as the <see cref="P:StardewUI.Data.TooltipData.RequiredItemId"/>, or else returns <c>null</c> if the ID cannot
            be used.
            </summary>
            <remarks>
            Currently, the game only supports unqualified object IDs in this context, so the method will return the
            unqualified ID if the <paramref name="itemId"/> is either unqualified or qualified as an object, otherwise
            <c>null</c>.
            </remarks>
            <param name="itemId">The item ID, qualified or unqualified. Unqualified IDs are assumed to be objects.</param>
        </member>
        <member name="M:StardewUI.Data.TooltipData.ConstrainTextWidth(System.Int32)">
            <summary>
            Constraints the tooltip to a specified pixel width by breaking lines for the <see cref="P:StardewUI.Data.TooltipData.Text"/> and
            <see cref="P:StardewUI.Data.TooltipData.Title"/>.
            </summary>
            <param name="maxWidth">The desired maximum pixel width for the displayed tooltip.</param>
            <returns>A <see cref="T:StardewUI.Data.TooltipData"/> instance with any necessary line breaks added to its text properties in
            order to keep the displayed width equal to or less than <paramref name="maxWidth"/>.</returns>
        </member>
        <member name="M:StardewUI.Data.TooltipData.op_Implicit(System.String)~StardewUI.Data.TooltipData">
            <summary>
            Converts a simple text string to a <see cref="T:StardewUI.Data.TooltipData"/> that has the specified <see cref="P:StardewUI.Data.TooltipData.Text"/>.
            </summary>
            <param name="text">The tooltip text.</param>
        </member>
        <member name="T:StardewUI.Diagnostics.ITraceWriter">
            <summary>
            Abstract output writer for performance traces.
            </summary>
            <remarks>
            This is an internal helper meant for use by the <see cref="T:StardewUI.Diagnostics.Trace"/> utility and should not be used directly by mods.
            </remarks>
        </member>
        <member name="P:StardewUI.Diagnostics.ITraceWriter.IsTracing">
            <summary>
            Whether or not a trace has been started, and not yet ended.
            </summary>
        </member>
        <member name="M:StardewUI.Diagnostics.ITraceWriter.BeginSlice(System.String)">
            <inheritdoc cref="M:StardewUI.Diagnostics.Trace.Begin(System.String)" />
            <exception cref="T:System.InvalidOperationException">Thrown if no trace is currently active.</exception>
        </member>
        <member name="M:StardewUI.Diagnostics.ITraceWriter.BeginTrace">
            <summary>
            Starts a new trace.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when a trace is already active.</exception>
        </member>
        <member name="M:StardewUI.Diagnostics.ITraceWriter.EndTrace">
            <summary>
            Ends the current trace and writes all recorded data to a new trace file in the output directory.
            </summary>
            <returns>The name of the trace file that was written.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if no trace is currently active.</exception>
        </member>
        <member name="T:StardewUI.Diagnostics.Trace">
            <summary>
            Provides methods to toggle tracing and write to the current trace.
            </summary>
        </member>
        <member name="P:StardewUI.Diagnostics.Trace.IsTracing">
            <summary>
            Gets or sets whether tracing is active.
            </summary>
            <remarks>
            While inactive, all calls to any of the <see cref="M:StardewUI.Diagnostics.Trace.Begin(System.String)"/> overloads are ignored and return <c>null</c>.
            If tracing is active, then setting this to <c>false</c> will cause the trace file to be written automatically.
            </remarks>
        </member>
        <member name="P:StardewUI.Diagnostics.Trace.Writer">
            <summary>
            The configured writer.
            </summary>
        </member>
        <member name="M:StardewUI.Diagnostics.Trace.Begin(System.String)">
            <summary>
            Begins tracking a new operation (slice).
            </summary>
            <remarks>
            Slices must be disposed in the opposite order in which they are created, otherwise the final trace may be
            considered invalid.
            </remarks>
            <param name="name">The name that should appear in the trace log/visualization.</param>
            <returns>A disposable instance which, when disposed, stops tracking this operation and records the duration it
            took, for subsequent writing to the trace file.</returns>
        </member>
        <member name="M:StardewUI.Diagnostics.Trace.Begin(System.Func{System.String},System.String)">
            <summary>
            Begins tracking a new operation (slice).
            </summary>
            <remarks>
            Slices must be disposed in the opposite order in which they are created, otherwise the final trace may be
            considered invalid.
            </remarks>
            <param name="callerName">Reference to the name (e.g. type name) of the object performing the traced
            operation.</param>
            <param name="memberName">Name of the member (method or property) about to begin execution.</param>
            <returns>A disposable instance which, when disposed, stops tracking this operation and records the duration it
            took, for subsequent writing to the trace file.</returns>
        </member>
        <member name="M:StardewUI.Diagnostics.Trace.Begin(System.Object,System.String)">
            <summary>
            Begins tracking a new operation (slice).
            </summary>
            <remarks>
            Slices must be disposed in the opposite order in which they are created, otherwise the final trace may be
            considered invalid.
            </remarks>
            <param name="caller">Reference to the object performing the traced operation.</param>
            <param name="memberName">Name of the member (method or property) about to begin execution.</param>
            <returns>A disposable instance which, when disposed, stops tracking this operation and records the duration it
            took, for subsequent writing to the trace file.</returns>
        </member>
        <member name="T:StardewUI.Direction">
            <summary>
            Cardinal directions used in UI, matching gamepad stick/button directions for navigation.
            </summary>
        </member>
        <member name="F:StardewUI.Direction.North">
            <summary>
            "Up" in screen space.
            </summary>
        </member>
        <member name="F:StardewUI.Direction.East">
            <summary>
            "Right" in screen space.
            </summary>
        </member>
        <member name="F:StardewUI.Direction.South">
            <summary>
            "Down" in screen space.
            </summary>
        </member>
        <member name="F:StardewUI.Direction.West">
            <summary>
            "Left" in screen space.
            </summary>
        </member>
        <member name="T:StardewUI.DirectionExtensions">
            <summary>
            Helpers for working with <see cref="T:StardewUI.Direction"/>.
            </summary>
        </member>
        <member name="M:StardewUI.DirectionExtensions.GetOrientation(StardewUI.Direction)">
            <summary>
            Gets the orientation axis associated with a given <paramref name="direction" />, i.e. whether it flows
            horizontally or vertically.
            </summary>
        </member>
        <member name="M:StardewUI.DirectionExtensions.IsHorizontal(StardewUI.Direction)">
            <summary>
            Returns <c>true</c> if the specified <paramref name="direction"/> is along the horizontal (width) axis,
            otherwise <c>false</c>.
            </summary>
        </member>
        <member name="M:StardewUI.DirectionExtensions.IsVertical(StardewUI.Direction)">
            <summary>
            Returns <c>true</c> if the specified <paramref name="direction"/> is along the vertical (height) axis, otherwise
            <c>false</c>.
            </summary>
        </member>
        <member name="T:StardewUI.DuckPropertyAttribute">
            <summary>
            Specifies a property name to use for duck-type conversions, if different from the member name.
            </summary>
            <remarks>
            <para>
            This attribute is applied to the type being converted <em>from</em>, unlike <see cref="T:StardewUI.DuckTypeAttribute"/> which
            applies to the target type. It is used to match a target property with a different name, or to match multiple target
            properties with a single source field.
            </para>
            <para>
            Multiple copies of the attribute can be used to match multiple target properties, with
            <paramref name="targetTypeName"/> being used to optionally filter which type conversions it will apply to, if the
            data type might be used in more than one kind of conversion.
            </para>
            </remarks>
            <param name="targetPropertyName">The name of the property to match on the target type.</param>
            <param name="targetTypeName">Name of the conversion target type (i.e. type with <see cref="T:StardewUI.DuckTypeAttribute"/>)
            to which this rename applies, not including the namespace or generic arguments. If not set, the property will be
            available under the specified <paramref name="targetPropertyName"/> for all conversions.</param>
        </member>
        <member name="M:StardewUI.DuckPropertyAttribute.#ctor(System.String,System.String)">
            <summary>
            Specifies a property name to use for duck-type conversions, if different from the member name.
            </summary>
            <remarks>
            <para>
            This attribute is applied to the type being converted <em>from</em>, unlike <see cref="T:StardewUI.DuckTypeAttribute"/> which
            applies to the target type. It is used to match a target property with a different name, or to match multiple target
            properties with a single source field.
            </para>
            <para>
            Multiple copies of the attribute can be used to match multiple target properties, with
            <paramref name="targetTypeName"/> being used to optionally filter which type conversions it will apply to, if the
            data type might be used in more than one kind of conversion.
            </para>
            </remarks>
            <param name="targetPropertyName">The name of the property to match on the target type.</param>
            <param name="targetTypeName">Name of the conversion target type (i.e. type with <see cref="T:StardewUI.DuckTypeAttribute"/>)
            to which this rename applies, not including the namespace or generic arguments. If not set, the property will be
            available under the specified <paramref name="targetPropertyName"/> for all conversions.</param>
        </member>
        <member name="P:StardewUI.DuckPropertyAttribute.TargetPropertyName">
            <summary>
            The name of the property to match on the target type.
            </summary>
        </member>
        <member name="P:StardewUI.DuckPropertyAttribute.TargetTypeName">
            <summary>
            Name of the conversion target type (i.e. type with <see cref="T:StardewUI.DuckTypeAttribute"/>) to which this rename
            applies, not including the namespace or generic arguments. If not set, the property will be available under the
            specified <see cref="P:StardewUI.DuckPropertyAttribute.TargetPropertyName"/> for all conversions.
            </summary>
        </member>
        <member name="T:StardewUI.DuckTypeAttribute">
            <summary>
            Specifies that a type is eligible for duck-type conversions in data bindings.
            </summary>
            <remarks>
            <para>
            This attribute is not used by the core library, only the data binding framework. When a type is decorated with it,
            values of normally non-convertible types, such as user-defined types in a separate mod, can become eligible for
            conversion to the decorated type and have converters generated at runtime, as long as the external type's properties
            are sufficient to satisfy one of the decorated type's constructors; or, in the case of default constructors, when
            the external type can contribute at least one property value.
            </para>
            <para>
            Duck type conversions always match using the combined property type and (case-insensitive) name. The name of the
            decorated type's property or constructor argument must match the name of the property on the source type, unless
            <see cref="T:StardewUI.DuckPropertyAttribute"/> is specified, in which case it must match the specified name(s).
            </para>
            <para>
            </para>
            </remarks>
        </member>
        <member name="T:StardewUI.Events.BubbleEventArgs">
            <summary>
            Base class for events that can bubble up to parents from descendant views.
            </summary>
        </member>
        <member name="P:StardewUI.Events.BubbleEventArgs.Handled">
            <summary>
            Whether or not the view receiving the event handled the event. Set to <c>true</c> to prevent bubbling.
            </summary>
        </member>
        <member name="T:StardewUI.Events.ButtonEventArgs">
            <summary>
            Event arguments for an event relating to a button (or key) of some input device.
            </summary>
            <param name="position">The position of the mouse cursor when the button was pressed.</param>
            <param name="button">The button that triggered the event.</param>
        </member>
        <member name="M:StardewUI.Events.ButtonEventArgs.#ctor(Microsoft.Xna.Framework.Vector2,StardewModdingAPI.SButton)">
            <summary>
            Event arguments for an event relating to a button (or key) of some input device.
            </summary>
            <param name="position">The position of the mouse cursor when the button was pressed.</param>
            <param name="button">The button that triggered the event.</param>
        </member>
        <member name="P:StardewUI.Events.ButtonEventArgs.Button">
            <summary>
            The button that triggered the event.
            </summary>
        </member>
        <member name="M:StardewUI.Events.ButtonEventArgs.Offset(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc/>
        </member>
        <member name="T:StardewUI.Events.ClickEventArgs">
            <summary>
            Event arguments for a controller or mouse click.
            </summary>
            <inheritdoc cref="M:StardewUI.Events.PointerEventArgs.#ctor(Microsoft.Xna.Framework.Vector2)" path="/param[@name='position']"/>
            <param name="button">The specific button that triggered the click.</param>
        </member>
        <member name="M:StardewUI.Events.ClickEventArgs.#ctor(Microsoft.Xna.Framework.Vector2,StardewModdingAPI.SButton)">
            <summary>
            Event arguments for a controller or mouse click.
            </summary>
            <inheritdoc cref="M:StardewUI.Events.PointerEventArgs.#ctor(Microsoft.Xna.Framework.Vector2)" path="/param[@name='position']"/>
            <param name="button">The specific button that triggered the click.</param>
        </member>
        <member name="P:StardewUI.Events.ClickEventArgs.Button">
            <summary>
            The specific button that triggered the click.
            </summary>
        </member>
        <member name="M:StardewUI.Events.ClickEventArgs.IsPrimaryButton">
            <summary>
            Gets whether the pressed <see cref="P:StardewUI.Events.ClickEventArgs.Button"/> is the default for primary actions.
            </summary>
            <returns>
            <c>true</c> if the pressed <see cref="P:StardewUI.Events.ClickEventArgs.Button"/> is either <see cref="F:StardewModdingAPI.SButton.MouseLeft"/> or the configured
            gamepad action button; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:StardewUI.Events.ClickEventArgs.IsSecondaryButton">
            <summary>
            Gets whether the pressed <see cref="P:StardewUI.Events.ClickEventArgs.Button"/> is the default for secondary (context) actions.
            </summary>
            <returns>
            <c>true</c> if the pressed <see cref="P:StardewUI.Events.ClickEventArgs.Button"/> is either <see cref="F:StardewModdingAPI.SButton.MouseRight"/> or the configured
            gamepad tool-use button; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:StardewUI.Events.ClickEventArgs.Offset(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc/>
        </member>
        <member name="T:StardewUI.Events.PointerEventArgs">
            <summary>
            Base class for any event involving the cursor/pointer, e.g. clicks.
            </summary>
            <param name="position">The position, relative to the view receiving the event, of the pointer when the event
            occurred.</param>
        </member>
        <member name="M:StardewUI.Events.PointerEventArgs.#ctor(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Base class for any event involving the cursor/pointer, e.g. clicks.
            </summary>
            <param name="position">The position, relative to the view receiving the event, of the pointer when the event
            occurred.</param>
        </member>
        <member name="P:StardewUI.Events.PointerEventArgs.Position">
            <summary>
            The position, relative to the view receiving the event, of the pointer when the event occurred.
            </summary>
        </member>
        <member name="M:StardewUI.Events.PointerEventArgs.Offset(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc/>
        </member>
        <member name="T:StardewUI.Events.PointerMoveEventArgs">
            <summary>
            Event arguments for pointer movement relative to some view.
            </summary>
            <param name="previousPosition">The previously-tracked position of the pointer.</param>
            <param name="position">The new pointer position.</param>
        </member>
        <member name="M:StardewUI.Events.PointerMoveEventArgs.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Event arguments for pointer movement relative to some view.
            </summary>
            <param name="previousPosition">The previously-tracked position of the pointer.</param>
            <param name="position">The new pointer position.</param>
        </member>
        <member name="P:StardewUI.Events.PointerMoveEventArgs.PreviousPosition">
            <summary>
            The previously-tracked position of the pointer.
            </summary>
        </member>
        <member name="M:StardewUI.Events.PointerMoveEventArgs.Offset(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc/>
        </member>
        <member name="T:StardewUI.Events.WheelEventArgs">
            <summary>
            Event arguments for mouse wheel/scroll wheel actions.
            </summary>
            <inheritdoc cref="M:StardewUI.Events.PointerEventArgs.#ctor(Microsoft.Xna.Framework.Vector2)" path="/param[@name='position']"/>
            <param name="direction">Direction of the wheel movement.</param>
        </member>
        <member name="M:StardewUI.Events.WheelEventArgs.#ctor(Microsoft.Xna.Framework.Vector2,StardewUI.Direction)">
            <summary>
            Event arguments for mouse wheel/scroll wheel actions.
            </summary>
            <inheritdoc cref="M:StardewUI.Events.PointerEventArgs.#ctor(Microsoft.Xna.Framework.Vector2)" path="/param[@name='position']"/>
            <param name="direction">Direction of the wheel movement.</param>
        </member>
        <member name="P:StardewUI.Events.WheelEventArgs.Direction">
            <summary>
            Direction of the wheel movement.
            </summary>
        </member>
        <member name="M:StardewUI.Events.WheelEventArgs.Offset(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc/>
        </member>
        <member name="T:StardewUI.Graphics.ButtonSpriteMap">
            <summary>
            Base class for a <see cref="T:StardewUI.Graphics.ISpriteMap`1"/> for controller/keyboard bindings.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.ButtonSpriteMap.ControllerBlank">
            <summary>
            A blank controller button upon which the specific button label can be drawn.
            </summary>
            <remarks>
            If the sprite specifies non-zero <see cref="P:StardewUI.Graphics.Sprite.FixedEdges"/> then they will be added to the label's margin.
            </remarks>
        </member>
        <member name="P:StardewUI.Graphics.ButtonSpriteMap.KeyboardBlank">
            <summary>
            A blank keyboard key upon which the specific key name can be drawn.
            </summary>
            /// <remarks>
            If the sprite specifies non-zero <see cref="P:StardewUI.Graphics.Sprite.FixedEdges"/> then they will be added to the label's margin.
            </remarks>
        </member>
        <member name="P:StardewUI.Graphics.ButtonSpriteMap.MouseLeft">
            <summary>
            The mouse with left button pressed.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.ButtonSpriteMap.MouseMiddle">
            <summary>
            The mouse with middle button pressed.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.ButtonSpriteMap.MouseRight">
            <summary>
            The mouse with right button pressed.
            </summary>
        </member>
        <member name="M:StardewUI.Graphics.ButtonSpriteMap.Get(StardewModdingAPI.SButton,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Graphics.ButtonSpriteMap.Get(StardewModdingAPI.SButton)">
            <summary>
            Gets the specific sprite for a particular button.
            </summary>
            <param name="button">The button for which to retrieve a sprite.</param>
            <returns>The precise <see cref="T:StardewUI.Graphics.Sprite"/> representing the given <paramref name="button"/>, or <c>null</c> if
            the button does not have a special sprite and could/should use a generic background + text.</returns>
        </member>
        <member name="T:StardewUI.Graphics.Cursor">
            <summary>
            Defines a cursor that can be drawn instead of or in addition to the regular mouse pointer.
            </summary>
            <param name="Sprite">The sprite to draw.</param>
            <param name="Size">Size with which to draw the <see cref="P:StardewUI.Graphics.Cursor.Sprite"/>, if different from the size of the sprite's
            <see cref="P:StardewUI.Graphics.Sprite.SourceRect"/>.</param>
            <param name="Offset">Offset from the exact mouse position where the sprite should be drawn. This always refers to
            the top-left corner of the sprite. If not specified, uses <see cref="F:StardewUI.Graphics.Cursor.DefaultOffset"/>.</param>
            <param name="Tint">Tint color for the sprite. If not specified, uses <see cref="F:StardewUI.Graphics.Cursor.DefaultTint"/>.</param>
        </member>
        <member name="M:StardewUI.Graphics.Cursor.#ctor(StardewUI.Graphics.Sprite,System.Nullable{Microsoft.Xna.Framework.Point},System.Nullable{Microsoft.Xna.Framework.Point},System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            Defines a cursor that can be drawn instead of or in addition to the regular mouse pointer.
            </summary>
            <param name="Sprite">The sprite to draw.</param>
            <param name="Size">Size with which to draw the <see cref="P:StardewUI.Graphics.Cursor.Sprite"/>, if different from the size of the sprite's
            <see cref="P:StardewUI.Graphics.Sprite.SourceRect"/>.</param>
            <param name="Offset">Offset from the exact mouse position where the sprite should be drawn. This always refers to
            the top-left corner of the sprite. If not specified, uses <see cref="F:StardewUI.Graphics.Cursor.DefaultOffset"/>.</param>
            <param name="Tint">Tint color for the sprite. If not specified, uses <see cref="F:StardewUI.Graphics.Cursor.DefaultTint"/>.</param>
        </member>
        <member name="P:StardewUI.Graphics.Cursor.Sprite">
            <summary>The sprite to draw.</summary>
        </member>
        <member name="P:StardewUI.Graphics.Cursor.Size">
            <summary>Size with which to draw the <see cref="P:StardewUI.Graphics.Cursor.Sprite"/>, if different from the size of the sprite's
            <see cref="P:StardewUI.Graphics.Sprite.SourceRect"/>.</summary>
        </member>
        <member name="P:StardewUI.Graphics.Cursor.Offset">
            <summary>Offset from the exact mouse position where the sprite should be drawn. This always refers to
            the top-left corner of the sprite. If not specified, uses <see cref="F:StardewUI.Graphics.Cursor.DefaultOffset"/>.</summary>
        </member>
        <member name="P:StardewUI.Graphics.Cursor.Tint">
            <summary>Tint color for the sprite. If not specified, uses <see cref="F:StardewUI.Graphics.Cursor.DefaultTint"/>.</summary>
        </member>
        <member name="F:StardewUI.Graphics.Cursor.DefaultOffset">
            <summary>
            The default offset to apply when <see cref="P:StardewUI.Graphics.Cursor.Offset"/> is not specified.
            </summary>
        </member>
        <member name="F:StardewUI.Graphics.Cursor.DefaultTint">
            <summary>
            The default color to tint with when <see cref="P:StardewUI.Graphics.Cursor.Tint"/> is not specified.
            </summary>
        </member>
        <member name="T:StardewUI.Graphics.CustomButtonSpriteMap">
            <summary>
            Controller/keyboard/mouse sprite map using custom/configured asset data.
            </summary>
            <param name="content">Helper for retrieving main game assets.</param>
            <param name="data">Configuration data for this map.</param>
        </member>
        <member name="M:StardewUI.Graphics.CustomButtonSpriteMap.#ctor(StardewModdingAPI.IGameContentHelper,StardewUI.Data.ButtonSpriteMapData)">
            <summary>
            Controller/keyboard/mouse sprite map using custom/configured asset data.
            </summary>
            <param name="content">Helper for retrieving main game assets.</param>
            <param name="data">Configuration data for this map.</param>
        </member>
        <member name="P:StardewUI.Graphics.CustomButtonSpriteMap.ControllerBlank">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Graphics.CustomButtonSpriteMap.KeyboardBlank">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Graphics.CustomButtonSpriteMap.MouseLeft">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Graphics.CustomButtonSpriteMap.MouseMiddle">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Graphics.CustomButtonSpriteMap.MouseRight">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Graphics.CustomButtonSpriteMap.Get(StardewModdingAPI.SButton)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Graphics.GlobalTransform">
            <summary>
            Global transform applied to an <see cref="T:StardewUI.Graphics.ISpriteBatch"/>.
            </summary>
            <remarks>
            <para>
            Because the <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> in MonoGame/XNA has scale and rotation parameters for individual draw methods
            (whether texture or text), which are presumably more optimized than computing a new global transform matrix and
            restarting the sprite batch, the global transform maintains a current local transform and only "merges" it into the
            transform matrix once the accumulated local transform can no longer be represented in one <see cref="T:StardewUI.Graphics.Transform"/>.
            </para>
            <para>
            These "local" transforms actually represent the model matrix, while the accumulated global transform is the view
            matrix, so the relationship between them is quirky; see <see cref="M:StardewUI.Graphics.Transform.CanMergeLocally(StardewUI.Graphics.Transform)"/> for more
            details on the process.
            </para>
            <para>
            Global transforms are always "around" the viewport origin (0, 0). To use a different origin relative to the current
            view, first translated by the negated origin position, then apply regular transforms, then translate by the
            (positive) origin position again.
            </para>
            </remarks>
            <param name="Matrix">The cumulative transformation matrix.</param>
            <param name="Local">Local transform to apply after the <paramref name="Matrix"/> takes effect.</param>
            <param name="LocalOrigin">Origin for the <see cref="P:StardewUI.Graphics.GlobalTransform.Local"/> transform.</param>
        </member>
        <member name="M:StardewUI.Graphics.GlobalTransform.#ctor(Microsoft.Xna.Framework.Matrix,StardewUI.Graphics.Transform,StardewUI.Graphics.TransformOrigin)">
            <summary>
            Global transform applied to an <see cref="T:StardewUI.Graphics.ISpriteBatch"/>.
            </summary>
            <remarks>
            <para>
            Because the <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> in MonoGame/XNA has scale and rotation parameters for individual draw methods
            (whether texture or text), which are presumably more optimized than computing a new global transform matrix and
            restarting the sprite batch, the global transform maintains a current local transform and only "merges" it into the
            transform matrix once the accumulated local transform can no longer be represented in one <see cref="T:StardewUI.Graphics.Transform"/>.
            </para>
            <para>
            These "local" transforms actually represent the model matrix, while the accumulated global transform is the view
            matrix, so the relationship between them is quirky; see <see cref="M:StardewUI.Graphics.Transform.CanMergeLocally(StardewUI.Graphics.Transform)"/> for more
            details on the process.
            </para>
            <para>
            Global transforms are always "around" the viewport origin (0, 0). To use a different origin relative to the current
            view, first translated by the negated origin position, then apply regular transforms, then translate by the
            (positive) origin position again.
            </para>
            </remarks>
            <param name="Matrix">The cumulative transformation matrix.</param>
            <param name="Local">Local transform to apply after the <paramref name="Matrix"/> takes effect.</param>
            <param name="LocalOrigin">Origin for the <see cref="P:StardewUI.Graphics.GlobalTransform.Local"/> transform.</param>
        </member>
        <member name="P:StardewUI.Graphics.GlobalTransform.Matrix">
            <summary>The cumulative transformation matrix.</summary>
        </member>
        <member name="P:StardewUI.Graphics.GlobalTransform.Local">
            <summary>Local transform to apply after the <paramref name="Matrix"/> takes effect.</summary>
        </member>
        <member name="P:StardewUI.Graphics.GlobalTransform.LocalOrigin">
            <summary>Origin for the <see cref="P:StardewUI.Graphics.GlobalTransform.Local"/> transform.</summary>
        </member>
        <member name="F:StardewUI.Graphics.GlobalTransform.Default">
            <summary>
            The default instance, which applies no transformation.
            </summary>
        </member>
        <member name="M:StardewUI.Graphics.GlobalTransform.Apply(StardewUI.Graphics.Transform,StardewUI.Graphics.TransformOrigin,System.Boolean@)">
            <summary>
            Applies a local transformation and returns the new, accumulated global transform.
            </summary>
            <param name="transform">The local transform to apply.</param>
            <param name="origin">Origin position for the <paramref name="transform"/>.</param>
            <param name="isNewMatrix">Whether the newly-created <see cref="T:StardewUI.Graphics.GlobalTransform"/> has a different
            <see cref="P:StardewUI.Graphics.GlobalTransform.Matrix"/> from the current instance.</param>
            <returns>A new <see cref="T:StardewUI.Graphics.GlobalTransform"/> that combines the accumulated transformation of this instance with
            the specified <paramref name="transform"/>.</returns>
        </member>
        <member name="M:StardewUI.Graphics.GlobalTransform.Collapse">
            <summary>
            Merges the <see cref="P:StardewUI.Graphics.GlobalTransform.Local"/> component into the global <see cref="P:StardewUI.Graphics.GlobalTransform.Matrix"/>.
            </summary>
            <remarks>
            For use when the <see cref="P:StardewUI.Graphics.GlobalTransform.Local"/> transform cannot be combined with the model transform of a specific drawing
            operation.
            </remarks>
            <returns>A new <see cref="T:StardewUI.Graphics.GlobalTransform"/> whose <see cref="P:StardewUI.Graphics.GlobalTransform.Matrix"/> is the combined <see cref="P:StardewUI.Graphics.GlobalTransform.Matrix"/> and
            <see cref="P:StardewUI.Graphics.GlobalTransform.Local"/> components of this instance, and whose <see cref="P:StardewUI.Graphics.GlobalTransform.Local"/> transform is reset to the
            <see cref="F:StardewUI.Graphics.Transform.Default"/>.</returns>
        </member>
        <member name="M:StardewUI.Graphics.GlobalTransform.IsRectangular">
            <summary>
            Checks if this transform represents a single rectangular area of the viewport, i.e. not rotated or skewed.
            </summary>
            <remarks>
            Does not ascertain whether the <see cref="P:StardewUI.Graphics.GlobalTransform.Local"/> part of the transform would make a non-rectangular
            <see cref="P:StardewUI.Graphics.GlobalTransform.Matrix"/> rectangular again; i.e. this returns <c>false</c> if <b>either</b> the global or local
            components are non-rectangular, regardless of their combined effect.
            </remarks>
        </member>
        <member name="T:StardewUI.Graphics.Hsv">
            <summary>
            A color in the HSV space.
            </summary>
            <param name="Hue">The color <see href="https://en.wikipedia.org/wiki/Hue">hue</see>.</param>
            <param name="Saturation">The color <see href="https://en.wikipedia.org/wiki/Colorfulness">saturation</see>.</param>
            <param name="Value">The color value or <see href="https://en.wikipedia.org/wiki/Brightness">brightness</see>.</param>
        </member>
        <member name="M:StardewUI.Graphics.Hsv.#ctor(System.Int32,System.Single,System.Single)">
            <summary>
            A color in the HSV space.
            </summary>
            <param name="Hue">The color <see href="https://en.wikipedia.org/wiki/Hue">hue</see>.</param>
            <param name="Saturation">The color <see href="https://en.wikipedia.org/wiki/Colorfulness">saturation</see>.</param>
            <param name="Value">The color value or <see href="https://en.wikipedia.org/wiki/Brightness">brightness</see>.</param>
        </member>
        <member name="P:StardewUI.Graphics.Hsv.Hue">
            <summary>The color <see href="https://en.wikipedia.org/wiki/Hue">hue</see>.</summary>
        </member>
        <member name="P:StardewUI.Graphics.Hsv.Saturation">
            <summary>The color <see href="https://en.wikipedia.org/wiki/Colorfulness">saturation</see>.</summary>
        </member>
        <member name="P:StardewUI.Graphics.Hsv.Value">
            <summary>The color value or <see href="https://en.wikipedia.org/wiki/Brightness">brightness</see>.</summary>
        </member>
        <member name="M:StardewUI.Graphics.Hsv.FromRgb(Microsoft.Xna.Framework.Color)">
            <summary>
            Converts an RGB color to its HSV equivalent.
            </summary>
            <param name="color">The RGB color.</param>
            <returns>The <paramref name="color"/> converted to HSV components.</returns>
        </member>
        <member name="M:StardewUI.Graphics.Hsv.ToRgb(System.Single)">
            <summary>
            Converts this color to its RGB equivalent.
            </summary>
            <param name="alpha">Optional alpha component if not 1 (fully opaque).</param>
            <returns>The RGB color.</returns>
        </member>
        <member name="T:StardewUI.Graphics.ISpriteBatch">
            <summary>
            Abstraction for the <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> providing sprite-drawing methods.
            </summary>
            <remarks>
            Importantly, this interface represents a "local" sprite batch with inherited transforms, so that views using it do
            not need to be given explicit information about global coordinates.
            </remarks>
        </member>
        <member name="M:StardewUI.Graphics.ISpriteBatch.Blend(Microsoft.Xna.Framework.Graphics.BlendState)">
            <summary>
            Sets up subsequent draw calls to use the designated blending settings.
            </summary>
            <param name="blendState">Blend state determining the color/alpha blend behavior.</param>
            <returns>A disposable instance which, when disposed, will revert to the previous blending state.</returns>
        </member>
        <member name="M:StardewUI.Graphics.ISpriteBatch.Clip(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Sets up subsequent draw calls to clip contents within the specified bounds.
            </summary>
            <param name="clipRect">The clipping bounds in local coordinates.</param>
            <returns>A disposable instance which, when disposed, will revert to the previous clipping state.</returns>
        </member>
        <member name="M:StardewUI.Graphics.ISpriteBatch.DelegateDraw(System.Action{Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2})">
            <summary>
            Draws using a delegate action on a concrete <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>.
            </summary>
            <remarks>
            <para>
            Delegation is provided as a fallback for game-specific "utilities" that require a <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> and
            are not trivial to reimplement; the method acts as a bridge between the abstract <see cref="T:StardewUI.Graphics.ISpriteBatch"/> and
            the concrete-dependent logic.
            </para>
            <para>
            Most view types shouldn't use this; it is only needed for a few niche features like
            <see cref="T:StardewValley.BellsAndWhistles.SpriteText"/>.
            </para>
            </remarks>
            <param name="draw">A function that accepts an underlying <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> as well as the transformed
            (global/screen) position and draws using that position as the origin (top left).</param>
        </member>
        <member name="M:StardewUI.Graphics.ISpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Nullable{Microsoft.Xna.Framework.Color},System.Single,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <inheritdoc cref="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)"/>
        </member>
        <member name="M:StardewUI.Graphics.ISpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Nullable{Microsoft.Xna.Framework.Color},System.Single,System.Nullable{Microsoft.Xna.Framework.Vector2},Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <inheritdoc cref="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)"/>
        </member>
        <member name="M:StardewUI.Graphics.ISpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Nullable{Microsoft.Xna.Framework.Color},System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <inheritdoc cref="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)"/>
        </member>
        <member name="M:StardewUI.Graphics.ISpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <inheritdoc cref="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)"/>
        </member>
        <member name="M:StardewUI.Graphics.ISpriteBatch.InitializeRenderTarget(Microsoft.Xna.Framework.Graphics.RenderTarget2D@,System.Int32,System.Int32)">
            <summary>
            Initializes a <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/> for use with <see cref="M:StardewUI.Graphics.ISpriteBatch.SetRenderTarget(Microsoft.Xna.Framework.Graphics.RenderTarget2D,System.Nullable{Microsoft.Xna.Framework.Color})"/>.
            </summary>
            <remarks>
            This will reuse an existing render target if available, i.e. if <paramref name="target"/> is not <c>null</c>
            and matches the specified <paramref name="width"/> and <paramref name="height"/>; otherwise it will replace any
            previous <paramref name="target"/> and replace it with a new instance.
            </remarks>
            <param name="target">The previous render target, if any, to reuse if possible.</param>
            <param name="width">The target width.</param>
            <param name="height">The target height.</param>
        </member>
        <member name="M:StardewUI.Graphics.ISpriteBatch.Rotate(System.Single,StardewUI.Graphics.TransformOrigin)">
            <summary>
            Applies a rotation transformation to subsequent operations.
            </summary>
            <param name="angle">The rotation angle, in radians.</param>
            <param name="origin">The center of the rotation, or <c>null</c> to use the <see cref="F:StardewUI.Graphics.TransformOrigin.Default"/>
            origin.</param>
        </member>
        <member name="M:StardewUI.Graphics.ISpriteBatch.SaveTransform">
            <summary>
            Saves the current transform, so that it can later be restored to its current state.
            </summary>
            <remarks>
            This is typically used in hierarchical layout; i.e. a view with children would apply a transform before handing
            the canvas or sprite batch down to any of those children, and then restore it after the child is done with it.
            This enables a single <see cref="T:StardewUI.Graphics.ISpriteBatch"/> instance to be used for the entire layout rather than having to
            create a tree.
            </remarks>
            <returns>A disposable instance which, when disposed, restores the transform of this <see cref="T:StardewUI.Graphics.ISpriteBatch"/>
            to the same state it was in before <c>SaveTransform</c> was called.</returns>
        </member>
        <member name="M:StardewUI.Graphics.ISpriteBatch.Scale(System.Single,StardewUI.Graphics.TransformOrigin)">
            <summary>
            Applies a uniform scale transformation to subsequent operations.
            </summary>
            <param name="scale">Amount to scale, both horizontally and vertically. <c>1</c> is unity scale.</param>
            <param name="origin">The center of the scaling, or <c>null</c> to use the <see cref="F:StardewUI.Graphics.TransformOrigin.Default"/>
            origin.</param>
        </member>
        <member name="M:StardewUI.Graphics.ISpriteBatch.Scale(System.Single,System.Single,StardewUI.Graphics.TransformOrigin)">
            <summary>
            Applies a scale transformation to subsequent operations.
            </summary>
            <param name="x">Amount of horizontal scaling. <c>1</c> is unity scale.</param>
            <param name="y">Amount of vertical scaling. <c>1</c> is unity scale.</param>
            <param name="origin">The center of the scaling, or <c>null</c> to use the <see cref="F:StardewUI.Graphics.TransformOrigin.Default"/>
            origin.</param>
        </member>
        <member name="M:StardewUI.Graphics.ISpriteBatch.Scale(Microsoft.Xna.Framework.Vector2,StardewUI.Graphics.TransformOrigin)">
            <summary>
            Applies a scale transformation to subsequent operations.
            </summary>
            <param name="scale">Scaling vector containing the horizontal (<see cref="F:Microsoft.Xna.Framework.Vector2.X"/>) and vertical
            (<see cref="F:Microsoft.Xna.Framework.Vector2.Y"/>) scaling amounts.</param>
            <param name="origin">The center of the scaling, or <c>null</c> to use the <see cref="F:StardewUI.Graphics.TransformOrigin.Default"/>
            origin.</param>
        </member>
        <member name="M:StardewUI.Graphics.ISpriteBatch.SetRenderTarget(Microsoft.Xna.Framework.Graphics.RenderTarget2D,System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            Sets up subsequent draw calls to use a custom render target.
            </summary>
            <remarks>
            This will also reset any active transforms for the new render target, e.g. those resulting from
            <see cref="M:StardewUI.Graphics.ISpriteBatch.Translate(Microsoft.Xna.Framework.Vector2)"/>. Previously-active transforms will be restored when the render target is
            reverted by calling <see cref="M:System.IDisposable.Dispose"/> on the result.
            </remarks>
            <param name="renderTarget">The new render target.</param>
            <param name="clearColor">Color to clear the <paramref name="renderTarget"/> with after making it active, or
            <c>null</c> to skip clearing.</param>
            <returns>A disposable instance which, when disposed, will revert to the previous render target(s).</returns>
        </member>
        <member name="M:StardewUI.Graphics.ISpriteBatch.Transform(StardewUI.Graphics.Transform,StardewUI.Graphics.TransformOrigin)">
            <summary>
            Applies an arbitrary transformation to subsequent operations.
            </summary>
            <param name="transform">The transform properties (scale, rotation and translation).</param>
            <param name="origin">The origin (i.e. center) of the transformation, or <c>null</c> to use the
            <see cref="F:StardewUI.Graphics.TransformOrigin.Default"/> origin.</param>
        </member>
        <member name="M:StardewUI.Graphics.ISpriteBatch.Translate(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Applies a translation transformation to subsequent operations.
            </summary>
            <param name="translation">The translation vector.</param>
        </member>
        <member name="M:StardewUI.Graphics.ISpriteBatch.Translate(System.Single,System.Single)">
            <summary>
            Applies a translation transformation to subsequent operations.
            </summary>
            <param name="x">The translation's X component.</param>
            <param name="y">The translation's Y component.</param>
        </member>
        <member name="T:StardewUI.Graphics.ISpriteMap`1">
            <summary>
            Provides a single method to obtain a sprite for some key, such as <see cref="T:StardewModdingAPI.SButton"/>.
            </summary>
            <typeparam name="T">Type of key for which to obtain sprites.</typeparam>
        </member>
        <member name="M:StardewUI.Graphics.ISpriteMap`1.Get(`0,System.Boolean@)">
            <summary>
            Gets the sprite corresponding to a particular key.
            </summary>
            <param name="key">The key to retrieve.</param>
            <param name="isPlaceholder"><c>true</c> if the returned <see cref="T:StardewUI.Graphics.Sprite"/> is not specific to the
            <paramref name="key"/>, but is instead a placeholder (border/background) in which some substitute, typically
            normal text, must be drawn. <c>false</c> if the <see cref="T:StardewUI.Graphics.Sprite"/> is a complete self-contained representation
            of the <paramref name="key"/>.</param>
            <returns>The precise or generic sprite for the given <paramref name="key"/>.</returns>
        </member>
        <member name="T:StardewUI.Graphics.NineSlice">
            <summary>
            Draws sprites according to a <see href="https://en.wikipedia.org/wiki/9-slice_scaling">nine-slice scale</see>.
            </summary>
            <param name="sprite">The source sprite.</param>
        </member>
        <member name="M:StardewUI.Graphics.NineSlice.#ctor(StardewUI.Graphics.Sprite)">
            <summary>
            Draws sprites according to a <see href="https://en.wikipedia.org/wiki/9-slice_scaling">nine-slice scale</see>.
            </summary>
            <param name="sprite">The source sprite.</param>
        </member>
        <member name="P:StardewUI.Graphics.NineSlice.Sprite">
            <summary>
            The source sprite.
            </summary>
        </member>
        <member name="M:StardewUI.Graphics.NineSlice.Draw(StardewUI.Graphics.ISpriteBatch,System.Nullable{Microsoft.Xna.Framework.Color},Microsoft.Xna.Framework.Graphics.SpriteEffects)">
            <summary>
            Draws the sprite to an <see cref="T:StardewUI.Graphics.ISpriteBatch"/>, applying 9-slice scaling if specified.
            </summary>
            <param name="b">Output sprite batch.</param>
            <param name="tint">Optional tint multiplier color.</param>
            <param name="effects">Sprite effect to apply, e.g. for drawing flipped.</param>
        </member>
        <member name="M:StardewUI.Graphics.NineSlice.Layout(Microsoft.Xna.Framework.Rectangle,System.Nullable{StardewUI.Graphics.SimpleRotation})">
            <summary>
            Prepares the layout for next <see cref="M:StardewUI.Graphics.NineSlice.Draw(StardewUI.Graphics.ISpriteBatch,System.Nullable{Microsoft.Xna.Framework.Color},Microsoft.Xna.Framework.Graphics.SpriteEffects)"/>.
            </summary>
            <param name="destinationRect">The rectangular area that the drawn sprite should fill.</param>
            <param name="rotation">Rotation to apply to the source sprite, if any.</param>
        </member>
        <member name="T:StardewUI.Graphics.PropagatedSpriteBatch">
            <summary>
            Sprite batch wrapper with transform propagation.
            </summary>
            <param name="spriteBatch">The XNA/MonoGame sprite batch.</param>
            <param name="transform">Transformation to apply.</param>
            <param name="renderTargetPool">Shared pool of <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/> instances to use for creating internal
            targets, such as those used for transformed clipping regions. The batch does not take ownership of the pool, nor do
            any targets explicitly provided (e.g. via <see cref="M:StardewUI.Graphics.PropagatedSpriteBatch.InitializeRenderTarget(Microsoft.Xna.Framework.Graphics.RenderTarget2D@,System.Int32,System.Int32)"/> or <see cref="M:StardewUI.Graphics.PropagatedSpriteBatch.SetRenderTarget(Microsoft.Xna.Framework.Graphics.RenderTarget2D,System.Nullable{Microsoft.Xna.Framework.Color})"/>) get
            automatically pooled.</param>
        </member>
        <member name="M:StardewUI.Graphics.PropagatedSpriteBatch.#ctor(Microsoft.Xna.Framework.Graphics.SpriteBatch,StardewUI.Graphics.GlobalTransform,StardewUI.Graphics.RenderTargetPool)">
            <summary>
            Sprite batch wrapper with transform propagation.
            </summary>
            <param name="spriteBatch">The XNA/MonoGame sprite batch.</param>
            <param name="transform">Transformation to apply.</param>
            <param name="renderTargetPool">Shared pool of <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/> instances to use for creating internal
            targets, such as those used for transformed clipping regions. The batch does not take ownership of the pool, nor do
            any targets explicitly provided (e.g. via <see cref="M:StardewUI.Graphics.PropagatedSpriteBatch.InitializeRenderTarget(Microsoft.Xna.Framework.Graphics.RenderTarget2D@,System.Int32,System.Int32)"/> or <see cref="M:StardewUI.Graphics.PropagatedSpriteBatch.SetRenderTarget(Microsoft.Xna.Framework.Graphics.RenderTarget2D,System.Nullable{Microsoft.Xna.Framework.Color})"/>) get
            automatically pooled.</param>
        </member>
        <member name="M:StardewUI.Graphics.PropagatedSpriteBatch.#ctor(Microsoft.Xna.Framework.Graphics.SpriteBatch,StardewUI.Graphics.Transform)">
            <summary>
            Initializes a new <see cref="T:StardewUI.Graphics.PropagatedSpriteBatch"/> using a local transform interpreted as global.
            </summary>
            <remarks>
            Provided for legacy compatibility; assumes that the local transform is the outermost transform and converts it
            directly to a global transform.
            </remarks>
            <param name="spriteBatch">The XNA/MonoGame sprite batch.</param>
            <param name="transform">Transformation to apply.</param>
        </member>
        <member name="M:StardewUI.Graphics.PropagatedSpriteBatch.Blend(Microsoft.Xna.Framework.Graphics.BlendState)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Graphics.PropagatedSpriteBatch.Clip(Microsoft.Xna.Framework.Rectangle)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Graphics.PropagatedSpriteBatch.DelegateDraw(System.Action{Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2})">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Graphics.PropagatedSpriteBatch.Dispose">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Graphics.PropagatedSpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Nullable{Microsoft.Xna.Framework.Color},System.Single,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Graphics.PropagatedSpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Nullable{Microsoft.Xna.Framework.Color},System.Single,System.Nullable{Microsoft.Xna.Framework.Vector2},Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Graphics.PropagatedSpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Nullable{Microsoft.Xna.Framework.Color},System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Graphics.PropagatedSpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Graphics.PropagatedSpriteBatch.InitializeRenderTarget(Microsoft.Xna.Framework.Graphics.RenderTarget2D@,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Graphics.PropagatedSpriteBatch.SaveTransform">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Graphics.PropagatedSpriteBatch.SetRenderTarget(Microsoft.Xna.Framework.Graphics.RenderTarget2D,System.Nullable{Microsoft.Xna.Framework.Color})">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Graphics.PropagatedSpriteBatch.Transform(StardewUI.Graphics.Transform,StardewUI.Graphics.TransformOrigin)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Graphics.RenderTargetPool">
            <summary>
            Pools <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/> instances so they can be reused across multiple frames.
            </summary>
            <remarks>
            <para>
            Targets are pooled by their size, since render targets have a fixed size and changing the size requires recreating
            the target. The pooled targets are considered to be managed by the pool, and are disposed along with the pool
            itself; typically a pool is associated with some long-lived UI object such as a menu, and then assigned to a
            transient instance like <see cref="T:StardewUI.Graphics.PropagatedSpriteBatch"/>.
            </para>
            <para>
            Pools can be configured with a <paramref name="slack"/> in order to increase long-term reuse at the expense of
            higher transient memory and/or VRAM usage due to the extra targets; these may be several megabytes if the areas to
            be captured are large. Slack can help accommodate dynamic views, e.g. different tabs with different scroll sizes,
            but should be used conservatively to avoid keeping long-dead targets.
            </para>
            <para>
            The pool is effectively unbounded in the number of instances it can create, but once slack is exceeded, it will
            dispose an old instance before creating a new one, starting with the instance having the largest pixel size (i.e.
            taking up the most memory).
            </para>
            </remarks>
            <param name="graphicsDevice">The graphics device used for rendering.</param>
            <param name="slack">Specifies the maximum number of unused pooled render targets to keep, when requesting a new
            target whose size is not in the pool, before disposing an older target.</param>
        </member>
        <member name="M:StardewUI.Graphics.RenderTargetPool.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
            <summary>
            Pools <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/> instances so they can be reused across multiple frames.
            </summary>
            <remarks>
            <para>
            Targets are pooled by their size, since render targets have a fixed size and changing the size requires recreating
            the target. The pooled targets are considered to be managed by the pool, and are disposed along with the pool
            itself; typically a pool is associated with some long-lived UI object such as a menu, and then assigned to a
            transient instance like <see cref="T:StardewUI.Graphics.PropagatedSpriteBatch"/>.
            </para>
            <para>
            Pools can be configured with a <paramref name="slack"/> in order to increase long-term reuse at the expense of
            higher transient memory and/or VRAM usage due to the extra targets; these may be several megabytes if the areas to
            be captured are large. Slack can help accommodate dynamic views, e.g. different tabs with different scroll sizes,
            but should be used conservatively to avoid keeping long-dead targets.
            </para>
            <para>
            The pool is effectively unbounded in the number of instances it can create, but once slack is exceeded, it will
            dispose an old instance before creating a new one, starting with the instance having the largest pixel size (i.e.
            taking up the most memory).
            </para>
            </remarks>
            <param name="graphicsDevice">The graphics device used for rendering.</param>
            <param name="slack">Specifies the maximum number of unused pooled render targets to keep, when requesting a new
            target whose size is not in the pool, before disposing an older target.</param>
        </member>
        <member name="M:StardewUI.Graphics.RenderTargetPool.Acquire(System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.RenderTarget2D@)">
            <summary>
            Obtains a pooled target with the specified dimensions, or creates a new target if there is no usable pooled
            instance.
            </summary>
            <param name="width">The target's pixel width.</param>
            <param name="height">The target's pixel height.</param>
            <param name="target">Receives the pooled or created <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/> which has the specified
            <paramref name="width"/> and <paramref name="height"/>.</param>
            <returns>An <see cref="T:System.IDisposable"/> instance which, when disposed, will release the <paramref name="target"/>
            back to the pool, without disposing the target itself.</returns>
        </member>
        <member name="M:StardewUI.Graphics.RenderTargetPool.Dispose">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Graphics.SimpleRotation">
            <summary>
            Types of rotations that are considered to be "simple", i.e. those that only transpose pixels and are therefore fast
            and non-deforming.
            </summary>
        </member>
        <member name="F:StardewUI.Graphics.SimpleRotation.QuarterClockwise">
            <summary>
            Rotate 90° in the clockwise direction.
            </summary>
        </member>
        <member name="F:StardewUI.Graphics.SimpleRotation.QuarterCounterclockwise">
            <summary>
            Rotate 90° in the counterclockwise direction.
            </summary>
        </member>
        <member name="F:StardewUI.Graphics.SimpleRotation.Half">
            <summary>
            Rotate 180°.
            </summary>
        </member>
        <member name="T:StardewUI.Graphics.SimpleRotationExtensions">
            <summary>
            Helper extensions for the <see cref="T:StardewUI.Graphics.SimpleRotation"/> type.
            </summary>
        </member>
        <member name="M:StardewUI.Graphics.SimpleRotationExtensions.Angle(StardewUI.Graphics.SimpleRotation)">
            <summary>
            Gets the angle of a rotation, in radians.
            </summary>
            <param name="rotation">The rotation type.</param>
            <returns>The angle of the rotation, in radians.</returns>
        </member>
        <member name="M:StardewUI.Graphics.SimpleRotationExtensions.IsQuarter(StardewUI.Graphics.SimpleRotation)">
            <summary>
            Gets whether a rotation is a quarter turn.
            </summary>
            <remarks>
            Often used to check whether to invert X/Y values in measurements.
            </remarks>
            <param name="rotation">The rotation type.</param>
            <returns><c>true</c> if the current instance is one of <see cref="F:StardewUI.Graphics.SimpleRotation.QuarterClockwise"/> or
            <see cref="F:StardewUI.Graphics.SimpleRotation.QuarterCounterclockwise"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:StardewUI.Graphics.Sprite">
            <summary>
            Definition for a scalable sprite.
            </summary>
            <param name="Texture">The texture containing the sprite's pixel data.</param>
            <param name="SourceRect">The inner area of the <paramref name="Texture"/> in which the specific image is located, or
            <c>null</c> to draw the entire texture.</param>
            <param name="FixedEdges">The thickness of each "fixed" edge to use with 9-patch/9-slice scaling. Specifying these
            values can prevent corner distortion for images that have been designed for such scaling. See
            <see href="https://en.wikipedia.org/wiki/9-slice_scaling">Nine-Slice Scaling</see> for a detailed
            explanation.</param>
            <param name="SliceSettings">Additional settings for the scaling and slicing behavior.</param>
        </member>
        <member name="M:StardewUI.Graphics.Sprite.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Rectangle},StardewUI.Layout.Edges,StardewUI.Graphics.SliceSettings)">
            <summary>
            Definition for a scalable sprite.
            </summary>
            <param name="Texture">The texture containing the sprite's pixel data.</param>
            <param name="SourceRect">The inner area of the <paramref name="Texture"/> in which the specific image is located, or
            <c>null</c> to draw the entire texture.</param>
            <param name="FixedEdges">The thickness of each "fixed" edge to use with 9-patch/9-slice scaling. Specifying these
            values can prevent corner distortion for images that have been designed for such scaling. See
            <see href="https://en.wikipedia.org/wiki/9-slice_scaling">Nine-Slice Scaling</see> for a detailed
            explanation.</param>
            <param name="SliceSettings">Additional settings for the scaling and slicing behavior.</param>
        </member>
        <member name="P:StardewUI.Graphics.Sprite.Texture">
            <summary>The texture containing the sprite's pixel data.</summary>
        </member>
        <member name="P:StardewUI.Graphics.Sprite.SourceRect">
            <summary>The inner area of the <paramref name="Texture"/> in which the specific image is located, or
            <c>null</c> to draw the entire texture.</summary>
        </member>
        <member name="P:StardewUI.Graphics.Sprite.FixedEdges">
            <summary>The thickness of each "fixed" edge to use with 9-patch/9-slice scaling. Specifying these
            values can prevent corner distortion for images that have been designed for such scaling. See
            <see href="https://en.wikipedia.org/wiki/9-slice_scaling">Nine-Slice Scaling</see> for a detailed
            explanation.</summary>
        </member>
        <member name="P:StardewUI.Graphics.Sprite.SliceSettings">
            <summary>Additional settings for the scaling and slicing behavior.</summary>
        </member>
        <member name="P:StardewUI.Graphics.Sprite.Size">
            <summary>
            The size (width/height) of the sprite, in pixels.
            </summary>
        </member>
        <member name="T:StardewUI.Graphics.SliceSettings">
            <summary>
            Additional nine-slice settings for dealing with certain "unique" structures.
            </summary>
            <param name="CenterX">The X position to use for the horizontal center slices, or <c>null</c> to start where the left
            fixed edge ends.</param>
            <param name="CenterXPosition">Specifies whether the <see cref="P:StardewUI.Graphics.SliceSettings.CenterX"/> should be understood as the start position
            or the end position of the horizontal center slice.</param>
            <param name="CenterY">The Y position to use for the vertical center slices, or <c>null</c> to start where the top
            fixed edge ends.</param>
            <param name="CenterYPosition">Specifies whether the <see cref="P:StardewUI.Graphics.SliceSettings.CenterY"/> should be understood as the start position
            or the end position of the vertical center slice.</param>
            <param name="Scale">Scale to apply to the slices themselves; for example, if a 16x16 source draws to a 64x64 target,
            and a scale of 2 is used, then a 2x3 border slice would draw as 16x24 (normal 8x16, multiplied by 2).</param>
            <param name="EdgesOnly">If <c>true</c>, then only the outer 8 edge segments should be drawn, and the 9th
            (horizontal and vertical middle, i.e. "background") segment will be ignored.</param>
        </member>
        <member name="M:StardewUI.Graphics.SliceSettings.#ctor(System.Nullable{System.Int32},StardewUI.Graphics.SliceCenterPosition,System.Nullable{System.Int32},StardewUI.Graphics.SliceCenterPosition,System.Single,System.Boolean)">
            <summary>
            Additional nine-slice settings for dealing with certain "unique" structures.
            </summary>
            <param name="CenterX">The X position to use for the horizontal center slices, or <c>null</c> to start where the left
            fixed edge ends.</param>
            <param name="CenterXPosition">Specifies whether the <see cref="P:StardewUI.Graphics.SliceSettings.CenterX"/> should be understood as the start position
            or the end position of the horizontal center slice.</param>
            <param name="CenterY">The Y position to use for the vertical center slices, or <c>null</c> to start where the top
            fixed edge ends.</param>
            <param name="CenterYPosition">Specifies whether the <see cref="P:StardewUI.Graphics.SliceSettings.CenterY"/> should be understood as the start position
            or the end position of the vertical center slice.</param>
            <param name="Scale">Scale to apply to the slices themselves; for example, if a 16x16 source draws to a 64x64 target,
            and a scale of 2 is used, then a 2x3 border slice would draw as 16x24 (normal 8x16, multiplied by 2).</param>
            <param name="EdgesOnly">If <c>true</c>, then only the outer 8 edge segments should be drawn, and the 9th
            (horizontal and vertical middle, i.e. "background") segment will be ignored.</param>
        </member>
        <member name="P:StardewUI.Graphics.SliceSettings.CenterX">
            <summary>The X position to use for the horizontal center slices, or <c>null</c> to start where the left
            fixed edge ends.</summary>
        </member>
        <member name="P:StardewUI.Graphics.SliceSettings.CenterXPosition">
            <summary>Specifies whether the <see cref="P:StardewUI.Graphics.SliceSettings.CenterX"/> should be understood as the start position
            or the end position of the horizontal center slice.</summary>
        </member>
        <member name="P:StardewUI.Graphics.SliceSettings.CenterY">
            <summary>The Y position to use for the vertical center slices, or <c>null</c> to start where the top
            fixed edge ends.</summary>
        </member>
        <member name="P:StardewUI.Graphics.SliceSettings.CenterYPosition">
            <summary>Specifies whether the <see cref="P:StardewUI.Graphics.SliceSettings.CenterY"/> should be understood as the start position
            or the end position of the vertical center slice.</summary>
        </member>
        <member name="P:StardewUI.Graphics.SliceSettings.Scale">
            <summary>Scale to apply to the slices themselves; for example, if a 16x16 source draws to a 64x64 target,
            and a scale of 2 is used, then a 2x3 border slice would draw as 16x24 (normal 8x16, multiplied by 2).</summary>
        </member>
        <member name="P:StardewUI.Graphics.SliceSettings.EdgesOnly">
            <summary>If <c>true</c>, then only the outer 8 edge segments should be drawn, and the 9th
            (horizontal and vertical middle, i.e. "background") segment will be ignored.</summary>
        </member>
        <member name="M:StardewUI.Graphics.SliceSettings.WithScale(System.Single)">
            <summary>
            Creates a copy of this <see cref="T:StardewUI.Graphics.SliceSettings"/> with a different scale.
            </summary>
            <param name="newScale">The scale to use.</param>
            <returns>A copy of this <see cref="T:StardewUI.Graphics.SliceSettings"/> with its <see cref="P:StardewUI.Graphics.SliceSettings.Scale"/> set to
            <paramref name="newScale"/>.</returns>
        </member>
        <member name="T:StardewUI.Graphics.SliceCenterPosition">
            <summary>
            Specifies which side the center position of a <see cref="T:StardewUI.Graphics.SliceSettings"/> instance is on.
            </summary>
        </member>
        <member name="F:StardewUI.Graphics.SliceCenterPosition.Start">
            <summary>
            The specified center position is the start of the center segment.
            </summary>
            <remarks>
            <para>
            The center segment is adjacent to the end segment, and there is a gap between the right/top of the start segment
            and the left/bottom of the center segment.
            </para>
            <example>
            Example of a horizontal center position using this setting:
            <code>
            +---------------------------------------------+
            | [Top Left] XXXXXXX [Top Center] [Top Right] |
            | [Mid Left] XXXXXXX [Mid Center] [Mid Right] |
            | [Bot Left] XXXXXXX [Bot Center] [Bot Right] |
            +---------------------------------------------+
            </code>
            </example>
            </remarks>
        </member>
        <member name="F:StardewUI.Graphics.SliceCenterPosition.End">
            <summary>
            The specified center position is the end of the center segment.
            </summary>
            <remarks>
            <para>
            The center segment is adjacent to the start segment, and there is a gap between the right/top of the center
            segment and the left/bottom of the end segment.
            </para>
            <example>
            Example of a horizontal center position using this setting:
            <code>
            +---------------------------------------------+
            | [Top Left] [Top Center] XXXXXXX [Top Right] |
            | [Mid Left] [Mid Center] XXXXXXX [Mid Right] |
            | [Bot Left] [Bot Center] XXXXXXX [Bot Right] |
            +---------------------------------------------+
            </code>
            </example>
            </remarks>
        </member>
        <member name="T:StardewUI.Graphics.SpriteMap`1">
            <summary>
            General implementation of an <see cref="T:StardewUI.Graphics.ISpriteMap`1"/> that can be prepared in a variety of ways.
            </summary>
            <remarks>
            Can be constructed directly, but it is normally recommended to use <see cref="T:StardewUI.Graphics.SpriteMapBuilder`1"/>. Applies basic
            placeholder logic that considers only the <paramref name="defaultSprite"/> to be a placeholder.
            </remarks>
            <typeparam name="T">Type of key for which to obtain sprites.</typeparam>
            <param name="sprites">Map of keys to sprites.</param>
            <param name="defaultSprite">Default sprite to show when looking up a key without a corresponding sprite.</param>
        </member>
        <member name="M:StardewUI.Graphics.SpriteMap`1.#ctor(System.Collections.Generic.IReadOnlyDictionary{`0,StardewUI.Graphics.Sprite},StardewUI.Graphics.Sprite)">
            <summary>
            General implementation of an <see cref="T:StardewUI.Graphics.ISpriteMap`1"/> that can be prepared in a variety of ways.
            </summary>
            <remarks>
            Can be constructed directly, but it is normally recommended to use <see cref="T:StardewUI.Graphics.SpriteMapBuilder`1"/>. Applies basic
            placeholder logic that considers only the <paramref name="defaultSprite"/> to be a placeholder.
            </remarks>
            <typeparam name="T">Type of key for which to obtain sprites.</typeparam>
            <param name="sprites">Map of keys to sprites.</param>
            <param name="defaultSprite">Default sprite to show when looking up a key without a corresponding sprite.</param>
        </member>
        <member name="M:StardewUI.Graphics.SpriteMap`1.Get(`0,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Graphics.SpriteMapBuilder`1">
            <summary>
            Builder interface for a <see cref="T:StardewUI.Graphics.SpriteMap`1"/> using a single texture source.
            </summary>
            <remarks>
            Works by maintaining a virtual "cursor" which can be moved to capture the next sprite, and adding either one sprite
            at a time with a specific size, or several with the same size, wrapping around when necessary.
            </remarks>
            <typeparam name="T">Type of key for which to obtain sprites.</typeparam>
        </member>
        <member name="M:StardewUI.Graphics.SpriteMapBuilder`1.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Builder interface for a <see cref="T:StardewUI.Graphics.SpriteMap`1"/> using a single texture source.
            </summary>
            <remarks>
            Works by maintaining a virtual "cursor" which can be moved to capture the next sprite, and adding either one sprite
            at a time with a specific size, or several with the same size, wrapping around when necessary.
            </remarks>
            <typeparam name="T">Type of key for which to obtain sprites.</typeparam>
        </member>
        <member name="M:StardewUI.Graphics.SpriteMapBuilder`1.Add(`0,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Adds a single sprite.
            </summary>
            <param name="key">The key for the sprite.</param>
            <param name="width">Optional override width, otherwise the most recent <see cref="M:StardewUI.Graphics.SpriteMapBuilder`1.Size(System.Int32,System.Int32)"/> will be used. Custom
            widths only apply to this sprite and will <b>not</b> affect the size of any subsequent additions.</param>
            <param name="height">Optional override height, otherwise the most recent <see cref="M:StardewUI.Graphics.SpriteMapBuilder`1.Size(System.Int32,System.Int32)"/> will be used. Custom
            heights only apply to this sprite and will <b>not</b> affect the size of any subsequent additions.</param>
            <returns>The current builder instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the combination of current position and current or overridden
            width and height would place the sprite outside the texture bounds.</exception>
        </member>
        <member name="M:StardewUI.Graphics.SpriteMapBuilder`1.Add(`0,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Adds a sprite using its specific position and size in the texture.
            </summary>
            <remarks>
            After adding, moves the cursor to the top-right of the <paramref name="sourceRect"/>, unless it would be
            horizontally out of bounds, in which case it wraps to the beginning (X = 0) of the next row.
            </remarks>
            <param name="key">The key for the sprite.</param>
            <param name="sourceRect">The exact position and size of the sprite.</param>
            <returns>The current builder instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="sourceRect"/> is not fully within the boundaries
            of the source texture.</exception>
        </member>
        <member name="M:StardewUI.Graphics.SpriteMapBuilder`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a sequence of sprites, starting from the current cursor position and using the most recently configured
            <see cref="M:StardewUI.Graphics.SpriteMapBuilder`1.Size(System.Int32,System.Int32)"/> and <see cref="M:StardewUI.Graphics.SpriteMapBuilder`1.Padding(System.Int32,System.Int32)"/> to advance the cursor after each element.
            </summary>
            <remarks>
            Wraps to the beginning of the next row (X = 0) when the end of a row is reached.
            </remarks>
            <param name="keys">The keys for the sprites to add, in the same left-to-right order that they appear in the
            source texture.</param>
            <returns>The current builder instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the bottom-right boundary of the source texture is reached and
            there are still elements remaining to be added.</exception>
        </member>
        <member name="M:StardewUI.Graphics.SpriteMapBuilder`1.Add(`0[])">
            <summary>
            Adds a sequence of sprites, starting from the current cursor position and using the most recently configured
            <see cref="M:StardewUI.Graphics.SpriteMapBuilder`1.Size(System.Int32,System.Int32)"/> and <see cref="M:StardewUI.Graphics.SpriteMapBuilder`1.Padding(System.Int32,System.Int32)"/> to advance the cursor after each element.
            </summary>
            <remarks>
            Wraps to the beginning of the next row (X = 0) when the end of a row is reached.
            </remarks>
            <param name="keys">The keys for the sprites to add, in the same left-to-right order that they appear in the
            source texture.</param>
            <returns>The current builder instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the bottom-right boundary of the source texture is reached and
            there are still elements remaining to be added.</exception>
        </member>
        <member name="M:StardewUI.Graphics.SpriteMapBuilder`1.Build">
            <summary>
            Builds a new <see cref="T:StardewUI.Graphics.SpriteMap`1"/> from the registered sprites.
            </summary>
        </member>
        <member name="M:StardewUI.Graphics.SpriteMapBuilder`1.Default(`0)">
            <summary>
            Configures the default sprite for unknown keys to use an existing sprite that has already been registered.
            </summary>
            <param name="key">Key of the previously-added sprite to use as default.</param>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:StardewUI.Graphics.SpriteMapBuilder`1.Default(StardewUI.Graphics.Sprite)">
            <summary>
            Configures the default sprite for unknown keys to use a custom sprite.
            </summary>
            <param name="sprite">The sprite to use as default.</param>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:StardewUI.Graphics.SpriteMapBuilder`1.MoveBy(System.Int32,System.Int32)">
            <summary>
            Moves the current cursor position by a specified offset.
            </summary>
            <param name="x">Horizontal offset from current position.</param>
            <param name="y">Vertical offset from current position.</param>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:StardewUI.Graphics.SpriteMapBuilder`1.MoveBy(Microsoft.Xna.Framework.Point)">
            <summary>
            Moves the current cursor position by a specified offset.
            </summary>
            <param name="p">The horizontal (X) and vertical (Y) offsets from the current position.</param>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:StardewUI.Graphics.SpriteMapBuilder`1.MoveTo(System.Int32,System.Int32)">
            <summary>
            Moves the cursor to a specific coordinate.
            </summary>
            <remarks>
            Generally used when dealing with semi-regular spritesheets having distinct areas that are individually uniform
            but different from each other, e.g. a row of 10x10 placed in an empty area of a 32x32 sheet.
            </remarks>
            <param name="x">The new X coordinate of the cursor.</param>
            <param name="y">The new Y coordinate of the cursor.</param>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:StardewUI.Graphics.SpriteMapBuilder`1.MoveTo(Microsoft.Xna.Framework.Point)">
            <summary>
            Moves the cursor to a specific coordinate.
            </summary>
            <remarks>
            Generally used when dealing with semi-regular spritesheets having distinct areas that are individually uniform
            but different from each other, e.g. a row of 10x10 placed in an empty area of a 32x32 sheet.
            </remarks>
            <param name="p">The horizontal (X) and vertical (Y) coordinates for the cursor.</param>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:StardewUI.Graphics.SpriteMapBuilder`1.Padding(System.Int32,System.Int32)">
            <summary>
            Configures the padding between sprites.
            </summary>
            <remarks>
            Applies only to new sprites added afterward; will not affect sprites previously added.
            </remarks>
            <param name="x">Horizontal padding from the right edge of one sprite to the left edge of the next. Added
            whenever advancing from left to right.</param>
            <param name="y">Vertical padding from the bottom edge of one sprite to the top edge of the next. Added whenever
            wrapping from the end of a row to the beginning of the next row.</param>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:StardewUI.Graphics.SpriteMapBuilder`1.Padding(Microsoft.Xna.Framework.Point)">
            <summary>
            Configures the padding between sprites.
            </summary>
            <remarks>
            Applies only to new sprites added afterward; will not affect sprites previously added.
            </remarks>
            <param name="p">A point containing the horizontal (X) and vertical (Y) padding values. See
            <see cref="M:StardewUI.Graphics.SpriteMapBuilder`1.Padding(System.Int32,System.Int32)"/>.</param>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:StardewUI.Graphics.SpriteMapBuilder`1.Size(System.Int32,System.Int32)">
            <summary>
            Configures the pixel size per sprite.
            </summary>
            <remarks>
            Applies only to new sprites added afterward; will not affect sprites previously added.
            </remarks>
            <param name="width">The pixel width for newly-added sprites.</param>
            <param name="height">The pixel height for newly-added sprites.</param>
            <returns>The current builder instance.</returns>
        </member>
        <member name="M:StardewUI.Graphics.SpriteMapBuilder`1.Size(Microsoft.Xna.Framework.Point)">
            <summary>
            Configures the pixel size per sprite.
            </summary>
            <remarks>
            Applies only to new sprites added afterward; will not affect sprites previously added.
            </remarks>
            <param name="p">A point containing the width (X) and height (Y) for newly-added sprites.</param>
            <returns>The current builder instance.</returns>
        </member>
        <member name="T:StardewUI.Graphics.Transform">
            <summary>
            Global transform applied to an <see cref="T:StardewUI.Graphics.ISpriteBatch"/>.
            </summary>
            <remarks>
            <para>
            The order of the different translation parameters reflects the actual order in which the transformations will be
            applied in a <see cref="T:StardewUI.Graphics.GlobalTransform"/>. Scaling before rotation prevents unexpected skewing, and rotating before
            translation keeps the coordinate system intact.
            </para>
            <para>
            To deliberately apply the individual operations in a different order, use separate <see cref="T:StardewUI.Graphics.Transform"/>
            instances applied in sequence, or simply compute the <see cref="T:Microsoft.Xna.Framework.Matrix"/> directly.
            </para>
            </remarks>
            <param name="Scale">The scale at which to draw. <see cref="P:Microsoft.Xna.Framework.Vector2.One"/> is unity scale (i.e. no scaling).</param>
            <param name="Rotation">2D rotation (always along Z axis) to apply, in radians.</param>
            <param name="Translation">Translation offset for drawn content.</param>
        </member>
        <member name="M:StardewUI.Graphics.Transform.#ctor(Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Global transform applied to an <see cref="T:StardewUI.Graphics.ISpriteBatch"/>.
            </summary>
            <remarks>
            <para>
            The order of the different translation parameters reflects the actual order in which the transformations will be
            applied in a <see cref="T:StardewUI.Graphics.GlobalTransform"/>. Scaling before rotation prevents unexpected skewing, and rotating before
            translation keeps the coordinate system intact.
            </para>
            <para>
            To deliberately apply the individual operations in a different order, use separate <see cref="T:StardewUI.Graphics.Transform"/>
            instances applied in sequence, or simply compute the <see cref="T:Microsoft.Xna.Framework.Matrix"/> directly.
            </para>
            </remarks>
            <param name="Scale">The scale at which to draw. <see cref="P:Microsoft.Xna.Framework.Vector2.One"/> is unity scale (i.e. no scaling).</param>
            <param name="Rotation">2D rotation (always along Z axis) to apply, in radians.</param>
            <param name="Translation">Translation offset for drawn content.</param>
        </member>
        <member name="P:StardewUI.Graphics.Transform.Scale">
            <summary>The scale at which to draw. <see cref="P:Microsoft.Xna.Framework.Vector2.One"/> is unity scale (i.e. no scaling).</summary>
        </member>
        <member name="P:StardewUI.Graphics.Transform.Rotation">
            <summary>2D rotation (always along Z axis) to apply, in radians.</summary>
        </member>
        <member name="P:StardewUI.Graphics.Transform.Translation">
            <summary>Translation offset for drawn content.</summary>
        </member>
        <member name="F:StardewUI.Graphics.Transform.Default">
            <summary>
            Default instance with no transformations applied.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.Transform.HasNonUniformScale">
            <summary>
            Whether the current instance has a non-uniform <see cref="P:StardewUI.Graphics.Transform.Scale"/>.
            </summary>
            <remarks>
            Non-uniform scale sometimes needs to be treated differently from uniform scale because the former is not
            commutative with rotation.
            </remarks>
        </member>
        <member name="P:StardewUI.Graphics.Transform.HasRotation">
            <summary>
            Whether the current instance has a non-zero <see cref="P:StardewUI.Graphics.Transform.Rotation"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.Transform.HasScale">
            <summary>
            Whether the current instance has non-unity <see cref="P:StardewUI.Graphics.Transform.Scale"/>, regardless of uniformity.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.Transform.HasTranslation">
            <summary>
            Whether the current instance has a non-zero <see cref="P:StardewUI.Graphics.Transform.Translation"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.Transform.IsOriginRelative">
            <summary>
            Whether the current transform is affected by transform origin.
            </summary>
            <remarks>
            Some types of transformations, specifically translation, have outcomes independent of the transformation origin
            and should therefore not attempt to use it or pass it on to global transforms.
            </remarks>
        </member>
        <member name="M:StardewUI.Graphics.Transform.FromRotation(System.Single)">
            <summary>
            Creates a new <see cref="T:StardewUI.Graphics.Transform"/> that applies a specific 2D rotation.
            </summary>
            <param name="angle">The rotation angle, in radians.</param>
            <returns>A <see cref="T:StardewUI.Graphics.Transform"/> whose <see cref="P:StardewUI.Graphics.Transform.Rotation"/> is equal to the specified
            <paramref name="angle"/>.</returns>
        </member>
        <member name="M:StardewUI.Graphics.Transform.FromScale(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a <see cref="T:StardewUI.Graphics.Transform"/> using a specified scale.
            </summary>
            <param name="scale">The scale to apply.</param>
            <returns>A <see cref="T:StardewUI.Graphics.Transform"/> whose <see cref="P:StardewUI.Graphics.Transform.Scale"/> is equal to the specified
            <paramref name="scale"/>.</returns>
        </member>
        <member name="M:StardewUI.Graphics.Transform.FromTranslation(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a <see cref="T:StardewUI.Graphics.Transform"/> using a specified translation offset.
            </summary>
            <param name="translation">The translation offset.</param>
            <returns>A <see cref="T:StardewUI.Graphics.Transform"/> whose <see cref="P:StardewUI.Graphics.Transform.Translation"/> is equal to the specified
            <paramref name="translation"/>.</returns>
        </member>
        <member name="M:StardewUI.Graphics.Transform.#ctor(System.Nullable{Microsoft.Xna.Framework.Vector2},System.Single,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Initializes a new <see cref="T:StardewUI.Graphics.Transform"/> instance.
            </summary>
            <remarks>
            This overload supports optional parameters, particularly for use in duck typing.
            </remarks>
            <param name="Scale">The scale at which to draw. <see cref="P:Microsoft.Xna.Framework.Vector2.One"/> is unity scale (i.e. no
            scaling).</param>
            <param name="Rotation">2D rotation (always along Z axis) to apply, in radians.</param>
            <param name="Translation">Translation offset for drawn content.</param>
        </member>
        <member name="M:StardewUI.Graphics.Transform.CanMergeLocally(StardewUI.Graphics.Transform)">
            <summary>
            Checks if a subsequent transform can be merged into this one while preserving the result as a simple local
            transform, i.e. not requiring the use of a transformation matrix.
            </summary>
            <remarks>
            Local transforms can be merged if they are either:
            <list type="bullet">
            <item>
            Mathematically commutative with the existing properties, such as uniform scaling, or additional translation on a
            local transform that is <em>only</em> translation; or
            </item>
            <item>
            Following the same transformation order that applies during the various <see cref="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)"/> and
            <see cref="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)"/> methods, i.e. <see cref="P:StardewUI.Graphics.Transform.Scale"/> followed by <see cref="P:StardewUI.Graphics.Transform.Rotation"/>
            followed by <see cref="P:StardewUI.Graphics.Transform.Translation"/>. For example, if the current instance has <see cref="P:StardewUI.Graphics.Transform.Scale"/> and
            <see cref="P:StardewUI.Graphics.Transform.Rotation"/>, and the <paramref name="next"/> transform has <c>Rotation</c> only, then the rotations
            can be trivially summed.
            </item>
            </list>
            </remarks>
            <param name="next">The local transformation to apply after the current instance.</param>
            <returns><c>true</c> if the cumulative sequence of transformations can continue to be represented as a simple
            local <see cref="T:StardewUI.Graphics.Transform"/>; <c>false</c> if the combination requires converting <see cref="M:StardewUI.Graphics.Transform.ToMatrix"/> and
            subsequent inclusion into a new <see cref="T:StardewUI.Graphics.GlobalTransform"/>.</returns>
        </member>
        <member name="M:StardewUI.Graphics.Transform.CanMergeLocally(Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Vector2)">
            <inheritdoc cref="M:StardewUI.Graphics.Transform.CanMergeLocally(StardewUI.Graphics.Transform)" path="//*[self::remarks|self::returns]"/>
            <summary>
            Checks if a subsequent transform, represented by its individual components, can be merged into this one while
            preserving the result as a simple local transform, i.e. not requiring the use of a transformation matrix.
            </summary>
            <param name="scale">The <see cref="P:StardewUI.Graphics.Transform.Scale"/> component of the next transform.</param>
            <param name="rotation">The <see cref="P:StardewUI.Graphics.Transform.Rotation"/> component of the next transform.</param>
            <param name="translation">The <see cref="P:StardewUI.Graphics.Transform.Translation"/> component of the next transform.</param>
        </member>
        <member name="M:StardewUI.Graphics.Transform.IsRectangular">
            <summary>
            Checks if this transform represents a single rectangular area of the parent, i.e. not rotated or skewed.
            </summary>
        </member>
        <member name="M:StardewUI.Graphics.Transform.ToMatrix">
            <summary>
            Creates a transformation matrix from the properties of this transform.
            </summary>
            <remarks>
            The created matrix, when used with <see cref="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Begin(Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect,System.Nullable{Microsoft.Xna.Framework.Matrix})"/>, will have the same effect as if the current
            <see cref="P:StardewUI.Graphics.Transform.Scale"/>, <see cref="P:StardewUI.Graphics.Transform.Rotation"/> and <see cref="P:StardewUI.Graphics.Transform.Translation"/> were to be provided directly as
            arguments to the sprite or text drawing method(s).
            </remarks>
            <returns>A transformation matrix equivalent to this transform.</returns>
        </member>
        <member name="T:StardewUI.Graphics.TransformOrigin">
            <summary>
            Describes the origin point to use for a local <see cref="T:StardewUI.Graphics.Transform"/>.
            </summary>
            <remarks>
            <para>
            Origin data needs to track two vectors; the relative or percentage position with <see cref="F:Microsoft.Xna.Framework.Vector2.X"/> and
            <see cref="F:Microsoft.Xna.Framework.Vector2.Y"/> between <c>0</c> and <c>1</c> (e.g. the center of the layout would be <c>(0.5, 0.5)</c>)
            as well as the absolute or pixel position.
            </para>
            <para>
            The relative position is used for individual drawing operations; when drawing a single sprite or text string, the
            XNA drawing APIs use this exact origin vector. The absolute position, on the other hand, is required for transform
            propagation in the <see cref="T:StardewUI.Graphics.GlobalTransform"/>, i.e. if the custom-origin transform is applied to a layout view,
            because it must be converted into a translation matrix.
            </para>
            </remarks>
            <param name="Relative">The relative position with <see cref="F:Microsoft.Xna.Framework.Vector2.X"/> and <see cref="F:Microsoft.Xna.Framework.Vector2.Y"/> values between
            <c>0</c> and <c>1</c>, where <c>(0, 0)</c> is the top-left, <c>(0.5, 0.5)</c> is the middle, and <c>(1, 1)</c> is
            the bottom right.</param>
            <param name="Absolute">The pixel position of the exact origin point, relative to the transformed view's top-left
            corner.</param>
        </member>
        <member name="M:StardewUI.Graphics.TransformOrigin.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Describes the origin point to use for a local <see cref="T:StardewUI.Graphics.Transform"/>.
            </summary>
            <remarks>
            <para>
            Origin data needs to track two vectors; the relative or percentage position with <see cref="F:Microsoft.Xna.Framework.Vector2.X"/> and
            <see cref="F:Microsoft.Xna.Framework.Vector2.Y"/> between <c>0</c> and <c>1</c> (e.g. the center of the layout would be <c>(0.5, 0.5)</c>)
            as well as the absolute or pixel position.
            </para>
            <para>
            The relative position is used for individual drawing operations; when drawing a single sprite or text string, the
            XNA drawing APIs use this exact origin vector. The absolute position, on the other hand, is required for transform
            propagation in the <see cref="T:StardewUI.Graphics.GlobalTransform"/>, i.e. if the custom-origin transform is applied to a layout view,
            because it must be converted into a translation matrix.
            </para>
            </remarks>
            <param name="Relative">The relative position with <see cref="F:Microsoft.Xna.Framework.Vector2.X"/> and <see cref="F:Microsoft.Xna.Framework.Vector2.Y"/> values between
            <c>0</c> and <c>1</c>, where <c>(0, 0)</c> is the top-left, <c>(0.5, 0.5)</c> is the middle, and <c>(1, 1)</c> is
            the bottom right.</param>
            <param name="Absolute">The pixel position of the exact origin point, relative to the transformed view's top-left
            corner.</param>
        </member>
        <member name="P:StardewUI.Graphics.TransformOrigin.Relative">
            <summary>The relative position with <see cref="F:Microsoft.Xna.Framework.Vector2.X"/> and <see cref="F:Microsoft.Xna.Framework.Vector2.Y"/> values between
            <c>0</c> and <c>1</c>, where <c>(0, 0)</c> is the top-left, <c>(0.5, 0.5)</c> is the middle, and <c>(1, 1)</c> is
            the bottom right.</summary>
        </member>
        <member name="P:StardewUI.Graphics.TransformOrigin.Absolute">
            <summary>The pixel position of the exact origin point, relative to the transformed view's top-left
            corner.</summary>
        </member>
        <member name="F:StardewUI.Graphics.TransformOrigin.Default">
            <summary>
            Default origin, with both <see cref="P:StardewUI.Graphics.TransformOrigin.Relative"/> and <see cref="P:StardewUI.Graphics.TransformOrigin.Absolute"/> set to <see cref="P:Microsoft.Xna.Framework.Vector2.Zero"/>.
            </summary>
        </member>
        <member name="T:StardewUI.Graphics.UiSprites">
            <summary>
            Included game sprites that are required for many UI/menu widgets.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.BannerBackground">
            <summary>
            Background for the a banner or "scroll" style text, often used for menu/dialogue titles.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.ButtonDark">
            <summary>
            Button with a darker background, usually the neutral state.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.ButtonLight">
            <summary>
            Button with a lighter background, usually used to show hover state.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.CaretLeft">
            <summary>
            A caret-style directional arrow pointing left.
            </summary>
            <remarks>
            Can be used to show expanded/collapsed state, or illustrate a movement direction.
            </remarks>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.CaretRight">
            <summary>
            A caret-style directional arrow pointing right.
            </summary>
            <remarks>
            Can be used to show expanded/collapsed state, or illustrate a movement direction.
            </remarks>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.CheckboxChecked">
            <summary>
            Checkbox with a green "X" through it.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.CheckboxUnchecked">
            <summary>
            Unchecked checkbox, i.e. only the border.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.CloseButton">
            <summary>
            Red X with border/background, generally used as upper-right close button for menus.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.ControlBorder">
            <summary>
            Border/background sprite for an individual control, such as a button. Less prominent than
            <see cref="P:StardewUI.Graphics.UiSprites.MenuBorder"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.ControlBorderUncolored">
            <summary>
            Colorless border/background sprite for an individual control, such as a button. Less prominent than
            <see cref="P:StardewUI.Graphics.UiSprites.MenuBorderUncolored"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.Digits">
            <summary>
            List of sprites for the outlined "tiny digits" 0-9, in that order.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.DropDownBackground">
            <summary>
            Background of a drop-down menu.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.DropDownButton">
            <summary>
            Button to pull down a drop-down menu.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.GenericHorizontalDivider">
            <summary>
            Simpler, lighter horizontal divider than the <see cref="P:StardewUI.Graphics.UiSprites.MenuHorizontalDivider"/>, used as a horizontal rule to
            separate content areas without sectioning the entire menu.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.GenericHorizontalDividerUncolored">
            <summary>
            Colorless horizontal divider that is simpler and lighter the <see cref="P:StardewUI.Graphics.UiSprites.MenuHorizontalDividerUncolored"/>, used
            as a horizontal rule to separate content areas without sectioning the entire menu.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.LargeDownArrow">
            <summary>
            Large down arrow, used for macro navigation.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.LargeLeftArrow">
            <summary>
            Large left arrow, used for macro navigation.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.LargeRightArrow">
            <summary>
            Large right arrow, used for macro navigation.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.LargeUpArrow">
            <summary>
            Large up arrow, used for macro navigation.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.MenuBackground">
            <summary>
            Background used for the in-game menu, not including borders.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.MenuBackgroundUncolored">
            <summary>
            Colorless background used for the in-game menu, not including borders.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.MenuBorder">
            <summary>
            Modified 9-slice sprite used for the menu border, based on menu "tiles". Used for drawing the outer border of an
            entire menu UI.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.MenuBorderUncolored">
            <summary>
            Colorless version of the modified 9-slice sprite used for the menu border, based on menu "tiles". Used for
            drawing the outer border of an entire menu UI.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.MenuBorderThickness">
            <summary>
            The actual distance from the outer edges of the <see cref="P:StardewUI.Graphics.UiSprites.MenuBorder"/> sprite to where the actual "border"
            really ends, in terms of pixels. The border tiles are quite large, so this tends to be needed in order to
            determine where the content should go without adding a ton of extra padding.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.MenuHorizontalDivider">
            <summary>
            Modified 9-slice sprite used for the menu's horizontal divider, meant to be drawn over top of the
            <see cref="P:StardewUI.Graphics.UiSprites.MenuBorder"/> to denote separate "sub-panels" or "sections" of the menu to group logically very
            different menu functions (as opposed to lines on a grid).
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.MenuHorizontalDividerUncolored">
            <summary>
            Colorless version of the modified 9-slice sprite used for the menu's horizontal divider, meant to be drawn over
            top of the <see cref="P:StardewUI.Graphics.UiSprites.MenuBorderUncolored"/> to denote separate "sub-panels" or "sections" of the menu to group
            logically very different menu functions (as opposed to lines on a grid).
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.MenuHorizontalDividerMargin">
            <summary>
            Margin adjustment to apply to content adjacent to a <see cref="P:StardewUI.Graphics.UiSprites.MenuHorizontalDivider"/> to make content flush
            with the border; adjusts for internal sprite padding.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.MenuSlotInset">
            <summary>
            Inset-style background and border, often used to hold an item or represent a slot.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.MenuSlotInsetUncolored">
            <summary>
            Colorless inset-style background and border, often used to hold an item or represent a slot.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.MenuSlotOutset">
            <summary>
            Outset-style background and border, often used to hold an item or represent a slot.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.MenuSlotTransparent">
            <summary>
            Single-line rectangular border with a slight inset look.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.MenuSlotTransparentUncolored">
            <summary>
            Colorless single-line rectangular border with a slight inset look.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.MenuVerticalDivider">
            <summary>
            Modified 9-slice sprite used for the menu's vertical divider, meant to be drawn over top of the
            <see cref="P:StardewUI.Graphics.UiSprites.MenuBorder"/> to denote separate "sub-panels" or "sections" of the menu to group logically very
            different menu functions (as opposed to lines on a grid).
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.MenuVerticalDividerUncolored">
            <summary>
            Colorless version of the modified 9-slice sprite used for the menu's vertical divider, meant to be drawn over
            top of the <see cref="P:StardewUI.Graphics.UiSprites.MenuBorderUncolored"/> to denote separate "sub-panels" or "sections" of the menu to group
            logically very different menu functions (as opposed to lines on a grid).
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.MenuVerticalDividerMargin">
            <summary>
            Margin adjustment to apply to content adjacent to a <see cref="P:StardewUI.Graphics.UiSprites.MenuVerticalDivider"/> to make content flush
            with the border; adjusts for internal sprite padding.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.ScrollBarTrack">
            <summary>
            Background for the scroll bar track (which the thumb is inside).
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.SliderBackground">
            <summary>
            Background of a slider control.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.SliderButton">
            <summary>
            The movable part of a slider control ("button").
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.SmallDownArrow">
            <summary>
            Small down arrow, typically used for scroll bars.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.SmallLeftArrow">
            <summary>
            Small left arrow, typically used for top-level list navigation.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.SmallRightArrow">
            <summary>
            Small right arrow, typically used for top-level list navigation.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.SmallUpArrow">
            <summary>
            Small up arrow, typically used for scroll bars.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.SmallGreenPlus">
            <summary>
            A small green "+" icon.
            </summary>
            <remarks>
            Technically used to represent energy buffs, can sometimes be tinted to communicate a concept like "add to list".
            </remarks>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.SmallTrashCan">
            <summary>
            Small and tall trash can, larger than the <see cref="P:StardewUI.Graphics.UiSprites.TinyTrashCan"/> and more suitable for tall rows.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.TabTopEmpty">
            <summary>
            Top-facing tab with no inner content, used for tab controls.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.TextBox">
            <summary>
            Border/background for a text input box.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.ThinHorizontalDivider">
            <summary>
            Simple horizontal divider, typically used to divide sections of uniform content, e.g. grid rows.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.ThinHorizontalDividerUncolored">
            <summary>
            Simple, colorless horizontal divider, typically used to divide sections of uniform content, e.g. grid rows.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.ThinVerticalDivider">
            <summary>
            Simple vertical divider, typically used to divide sections of uniform content, e.g. grid columns.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.ThinVerticalDividerUncolored">
            <summary>
            Simple, colorless vertical divider, typically used to divide sections of uniform content, e.g. grid columns.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.TinyTrashCan">
            <summary>
            Very small trash can, e.g. to be used in lists/subforms as "remove" button.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.VerticalScrollThumb">
            <summary>
            Thumb sprite used for vertical scroll bars.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.White">
            <summary>
            A single white pixel.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.UiSprites.WhiteBorder">
            <summary>
            Nine-slice sprite consisting of 8 white edge pixels and a transparent center. Used for simple borders.
            </summary>
        </member>
        <member name="T:StardewUI.Graphics.XeluButtonSpriteMap">
            <summary>
            Controller/keyboard sprite map based on <see href="https://thoseawesomeguys.com/prompts/">Xelu's CC0 pack</see>.
            </summary>
            <remarks>
            Uses specific sprites (Xbox-based) per gamepad button, with a fallback for unknown buttons. All keyboard keys use
            the same placeholder border/background sprite with the expectation of having the key name drawn inside, in order to
            at least be consistent with Stardew's fonts.
            </remarks>
            <param name="gamepad">Gamepad texture atlas, loaded from the mod's copy of <c>GamepadButtons.png</c>.</param>
            <param name="keyboard">Keyboard texture atlas, loaded from the mod's copy of <c>KeyboardKeys.png</c>.</param>
            <param name="mouse">Mouse texture atlas, loaded from the mod's copy of <c>MouseButtons.png</c>.</param>
        </member>
        <member name="M:StardewUI.Graphics.XeluButtonSpriteMap.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Controller/keyboard sprite map based on <see href="https://thoseawesomeguys.com/prompts/">Xelu's CC0 pack</see>.
            </summary>
            <remarks>
            Uses specific sprites (Xbox-based) per gamepad button, with a fallback for unknown buttons. All keyboard keys use
            the same placeholder border/background sprite with the expectation of having the key name drawn inside, in order to
            at least be consistent with Stardew's fonts.
            </remarks>
            <param name="gamepad">Gamepad texture atlas, loaded from the mod's copy of <c>GamepadButtons.png</c>.</param>
            <param name="keyboard">Keyboard texture atlas, loaded from the mod's copy of <c>KeyboardKeys.png</c>.</param>
            <param name="mouse">Mouse texture atlas, loaded from the mod's copy of <c>MouseButtons.png</c>.</param>
        </member>
        <member name="T:StardewUI.Graphics.XeluButtonSpriteMap.SpriteTheme">
            <summary>
            Available theme variants for certain sprites.
            </summary>
            <remarks>
            Applies to the keyboard and mouse sprites, but not controller (Xbox style) sprites.
            </remarks>
        </member>
        <member name="F:StardewUI.Graphics.XeluButtonSpriteMap.SpriteTheme.Dark">
            <summary>
            Black and dark gray, with white highlights (e.g. for pressed mouse button).
            </summary>
        </member>
        <member name="F:StardewUI.Graphics.XeluButtonSpriteMap.SpriteTheme.Light">
            <summary>
            White and light gray, with red highlights (e.g. for pressed mouse button).
            </summary>
        </member>
        <member name="F:StardewUI.Graphics.XeluButtonSpriteMap.SpriteTheme.Stardew">
            <summary>
            Custom theme mimicking the Stardew yellow-orange palette; falls back to <see cref="F:StardewUI.Graphics.XeluButtonSpriteMap.SpriteTheme.Light"/> for
            non-customized sprites.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.XeluButtonSpriteMap.KeyboardTheme">
            <summary>
            The active theme for keyboard sprites.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.XeluButtonSpriteMap.MouseTheme">
            <summary>
            The active theme for mouse sprites.
            </summary>
        </member>
        <member name="P:StardewUI.Graphics.XeluButtonSpriteMap.SliceScale">
            <summary>
            Scale to apply to nine-slice sprites, specifically keyboard blanks.
            </summary>
            <remarks>
            <para>
            This setting exists because the sprite assets are much larger than the space available for
            a typical keybind image in a menu, which - very unusually for Stardew - means they need to
            be scaled down, not up. However, some UIs (e.g. some overlays) may want to display these
            sprites at their normal size or larger, and in these cases, should not scale the slices
            because the borders would look strange or hard to see.
            </para>
            <para>
            In general, considering the base dimensions of 100x100, a comfortable size for menus
            targeting roughly 48px button height should use roughly 1/3 scale (0.3). Overlays and other
            UIs intending to render the sprite at full size (or larger) can leave the default of 1.
            </para>
            </remarks>
        </member>
        <member name="P:StardewUI.Graphics.XeluButtonSpriteMap.ControllerBlank">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Graphics.XeluButtonSpriteMap.KeyboardBlank">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Graphics.XeluButtonSpriteMap.MouseLeft">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Graphics.XeluButtonSpriteMap.MouseMiddle">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Graphics.XeluButtonSpriteMap.MouseRight">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Graphics.XeluButtonSpriteMap.Get(StardewModdingAPI.SButton)">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Input.ActionRepeat">
            <summary>
            Configures the repeat rate of an action used in an <see cref="T:StardewUI.Input.ActionState`1"/>.
            </summary>
            <param name="RepeatInterval">The interval between repetitions of the action, while the key is held.</param>
            <param name="InitialDelay">Initial delay after the first press, before any repetitions are allowed.</param>
        </member>
        <member name="M:StardewUI.Input.ActionRepeat.#ctor(System.TimeSpan,System.Nullable{System.TimeSpan})">
            <summary>
            Configures the repeat rate of an action used in an <see cref="T:StardewUI.Input.ActionState`1"/>.
            </summary>
            <param name="RepeatInterval">The interval between repetitions of the action, while the key is held.</param>
            <param name="InitialDelay">Initial delay after the first press, before any repetitions are allowed.</param>
        </member>
        <member name="P:StardewUI.Input.ActionRepeat.RepeatInterval">
            <summary>The interval between repetitions of the action, while the key is held.</summary>
        </member>
        <member name="P:StardewUI.Input.ActionRepeat.InitialDelay">
            <summary>Initial delay after the first press, before any repetitions are allowed.</summary>
        </member>
        <member name="F:StardewUI.Input.ActionRepeat.Continuous">
            <summary>
            Configures an action to repeat continuously, i.e. to run again on every frame as long as the trigger keys are
            still held.
            </summary>
        </member>
        <member name="F:StardewUI.Input.ActionRepeat.Default">
            <summary>
            Default repetition setting suitable for most UI scenarios.
            </summary>
            <remarks>
            Not perfectly consistent (nor intended to be consistent) with vanilla game settings, which are all over the
            place depending on which key/button is being considered.
            </remarks>
        </member>
        <member name="F:StardewUI.Input.ActionRepeat.None">
            <summary>
            Configures an action to never repeat, no matter how long the trigger keys are held.
            </summary>
        </member>
        <member name="T:StardewUI.Input.ActionState`1">
            <summary>
            Translates raw input to semantic actions.
            </summary>
            <typeparam name="T">The semantic action type.</typeparam>
            <param name="defaultRepeat">Default repetition settings for registered actions that do not specify one.</param>
            <param name="defaultSuppress">Whether registered actions should, by default, suppress the normal game behavior for
            any buttons in their active keybinds. Individual registrations can override this setting.</param>
        </member>
        <member name="M:StardewUI.Input.ActionState`1.#ctor(StardewUI.Input.ActionRepeat,System.Boolean)">
            <summary>
            Translates raw input to semantic actions.
            </summary>
            <typeparam name="T">The semantic action type.</typeparam>
            <param name="defaultRepeat">Default repetition settings for registered actions that do not specify one.</param>
            <param name="defaultSuppress">Whether registered actions should, by default, suppress the normal game behavior for
            any buttons in their active keybinds. Individual registrations can override this setting.</param>
        </member>
        <member name="M:StardewUI.Input.ActionState`1.Bind(StardewModdingAPI.SButton,`0,StardewUI.Input.ActionRepeat,System.Nullable{System.Boolean})">
            <summary>
            Binds an action to a single button.
            </summary>
            <param name="button">The bound button.</param>
            <param name="action">The action to activate.</param>
            <param name="repeat">Repeat behavior for this binding, if not using the default setting.</param>
            <param name="suppress">Input suppression behavior for this binding, if not using the default setting.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:StardewUI.Input.ActionState`1.Bind(System.Collections.Generic.IReadOnlyList{StardewModdingAPI.SButton},`0,StardewUI.Input.ActionRepeat,System.Boolean)">
            <summary>
            Binds an action to several individual buttons.
            </summary>
            <remarks>
            The <paramref name="buttons"/> are not treated as a single keybind; each individual <see cref="T:StardewModdingAPI.SButton"/> will
            independently trigger the <paramref name="action"/>.
            </remarks>
            <param name="buttons">List of buttons which will each trigger the associated <paramref name="action"/>.</param>
            <param name="action">The action to activate.</param>
            <param name="repeat">Repeat behavior for this binding, if not using the default setting.</param>
            <param name="suppress">Input suppression behavior for this binding, if not using the default setting.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:StardewUI.Input.ActionState`1.Bind(StardewModdingAPI.Utilities.Keybind,`0,StardewUI.Input.ActionRepeat,System.Nullable{System.Boolean})">
            <summary>
            Binds an action to a button combination.
            </summary>
            <param name="keybind">Keybind containing buttons that must be simultaneously pressed.</param>
            <param name="action">The action to activate.</param>
            <param name="repeat">Repeat behavior for this binding, if not using the default setting.</param>
            <param name="suppress">Input suppression behavior for this binding, if not using the default setting.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:StardewUI.Input.ActionState`1.Bind(System.Collections.Generic.IReadOnlyList{StardewModdingAPI.Utilities.Keybind},`0,StardewUI.Input.ActionRepeat,System.Nullable{System.Boolean})">
            <summary>
            Binds an action to several button combinations.
            </summary>
            <param name="keybinds">List of keybinds each of whose button combinations will trigger the associated
            <paramref name="action"/>.</param>
            <param name="action">The action to activate.</param>
            <param name="repeat">Repeat behavior for this binding, if not using the default setting.</param>
            <param name="suppress">Input suppression behavior for this binding, if not using the default setting.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:StardewUI.Input.ActionState`1.Bind(StardewModdingAPI.Utilities.KeybindList,`0,StardewUI.Input.ActionRepeat,System.Nullable{System.Boolean})">
            <summary>
            Binds an action to all keybinds in a <see cref="T:StardewModdingAPI.Utilities.KeybindList"/>.
            </summary>
            <param name="keybindList">List of all keybinds that should trigger the <paramref name="action"/>.</param>
            <param name="action">The action to activate.</param>
            <param name="repeat">Repeat behavior for this binding, if not using the default setting.</param>
            <param name="suppress">Input suppression behavior for this binding, if not using the default setting.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:StardewUI.Input.ActionState`1.GetControllerBindings(`0)">
            <summary>
            Gets all controller bindings associated with a given action.
            </summary>
            <param name="action">The action to look up.</param>
            <returns>A sequence of <see cref="T:StardewModdingAPI.Utilities.Keybind"/> elements that perform the specified <paramref name="action"/> and
            use at least one controller button.</returns>
        </member>
        <member name="M:StardewUI.Input.ActionState`1.GetCurrentActions">
            <summary>
            Gets the actions that should be run right now, either because one of the triggering buttons/combinations was
            just pressed, or because it was held and is due to repeat.
            </summary>
            <remarks>
            Current actions reset on every frame regardless of whether the actions were "handled". Code that reads from
            <c>GetCurrentActions</c> should generally do so at the end of an update tick, e.g. in SMAPI's
            <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.UpdateTicked"/> event.
            </remarks>
            <returns>Sequence of actions that should be handled this frame.</returns>
        </member>
        <member name="M:StardewUI.Input.ActionState`1.GetKeyboardBindings(`0)">
            <summary>
            Gets all keyboard bindings associated with a given action.
            </summary>
            <param name="action">The action to look up.</param>
            <returns>A sequence of <see cref="T:StardewModdingAPI.Utilities.Keybind"/> elements that perform the specified <paramref name="action"/> and
            use at least one keyboard key.</returns>
        </member>
        <member name="M:StardewUI.Input.ActionState`1.Tick(System.TimeSpan)">
            <summary>
            Runs on game ticks; updates the state of each binding/action combination.
            </summary>
            <param name="elapsed">Time elapsed since last game tick.</param>
        </member>
        <member name="T:StardewUI.Input.ButtonName">
            <summary>
            A simple utility classes to get a printable name for a button or key.
            </summary>
            <remarks>
            Mostly used for keyboard prompts and fallback prompts for gamepad buttons without a dedicated sprite.
            </remarks>
        </member>
        <member name="M:StardewUI.Input.ButtonName.ForButton(StardewModdingAPI.SButton)">
            <summary>
            Gets the (non-localized) display name for a button.
            </summary>
            <param name="button">The button to label.</param>
            <returns>The name of the <paramref name="button"/> if known; otherwise, the enum name.</returns>
        </member>
        <member name="T:StardewUI.Input.ButtonAction">
            <summary>
            The actions that a given button can trigger in a UI context. For details see <see cref="T:StardewUI.Input.ButtonResolver"/>.
            </summary>
        </member>
        <member name="F:StardewUI.Input.ButtonAction.None">
            <summary>
            The button has no standard UI behavior.
            </summary>
        </member>
        <member name="F:StardewUI.Input.ButtonAction.Primary">
            <summary>
            Used for primary interaction, or "left click".
            </summary>
        </member>
        <member name="F:StardewUI.Input.ButtonAction.Secondary">
            <summary>
            Used for secondary interaction, or "right click".
            </summary>
        </member>
        <member name="F:StardewUI.Input.ButtonAction.Cancel">
            <summary>
            Cancels out of the current menu, overlay, etc.
            </summary>
        </member>
        <member name="T:StardewUI.Input.ButtonResolver">
            <summary>
            Helper for resolving button state reported by vanilla menu code.
            </summary>
            <remarks>
            <para>
            Stardew's menu system is quite obnoxious about trying to "simplify" button handling and doesn't provide a lot of
            escape hatches. In addition, the buttons it considers to be the same are not equivalent to the way normal gameplay
            operates; for example, gamepad controls use A as the action button which is the same as a right-click when
            interacting with the game world; however, in menus A is the same as a left-click while X is right click.
            </para>
            <para>
            Going through this class can help identify the correct "function" of a button in a UI context as well as identify
            which real button was actually pressed, the better to work with input suppressions and similar concerns.
            </para>
            </remarks>
        </member>
        <member name="M:StardewUI.Input.ButtonResolver.GetActionButtons(StardewUI.Input.ButtonAction)">
            <summary>
            Gets all buttons that can be resolved to a specific action.
            </summary>
            <param name="action">The UI action.</param>
            <returns>A sequence of <see cref="T:StardewModdingAPI.SButton"/> elements each of which is considered to perform the specified
            <paramref name="action"/>.</returns>
        </member>
        <member name="M:StardewUI.Input.ButtonResolver.GetButtonAction(StardewModdingAPI.SButton)">
            <summary>
            Determines the action that should be performed by a button.
            </summary>
            <param name="button">The action button.</param>
            <returns>The action for the specified <paramref name="button"/>.</returns>
        </member>
        <member name="M:StardewUI.Input.ButtonResolver.GetPressedButton(StardewModdingAPI.SButton)">
            <summary>
            Attempts to determine the actual physically pressed key for a "representative" or logical button reported by the
            underlying menu system that may not actually be down.
            </summary>
            <param name="logicalButton">The button that was reported.</param>
            <returns>A button that performs the same action as <paramref name="logicalButton"/> and is currently pressed; or
            the original <paramref name="logicalButton"/> if no match can be found.</returns>
        </member>
        <member name="T:StardewUI.Input.FocusSearchResult">
            <summary>
            The result of a <see cref="M:StardewUI.IView.FocusSearch(Microsoft.Xna.Framework.Vector2,StardewUI.Direction)"/>. Identifies the specific view/position found, as well as the path
            to that view from the search root.
            </summary>
            <param name="Target">The specific view that can/will be focused, with a <see cref="P:StardewUI.ViewChild.Position"/> relative to
            the search root.</param>
            <param name="Path">The path from root to <see cref="P:StardewUI.Input.FocusSearchResult.Target"/>, in top-down order; each element's
            <see cref="P:StardewUI.ViewChild.Position"/> is relative to the parent, <b>not</b> the search root as <paramref name="Target"/>
            is.</param>
        </member>
        <member name="M:StardewUI.Input.FocusSearchResult.#ctor(StardewUI.ViewChild,System.Collections.Generic.IReadOnlyList{StardewUI.ViewChild})">
            <summary>
            The result of a <see cref="M:StardewUI.IView.FocusSearch(Microsoft.Xna.Framework.Vector2,StardewUI.Direction)"/>. Identifies the specific view/position found, as well as the path
            to that view from the search root.
            </summary>
            <param name="Target">The specific view that can/will be focused, with a <see cref="P:StardewUI.ViewChild.Position"/> relative to
            the search root.</param>
            <param name="Path">The path from root to <see cref="P:StardewUI.Input.FocusSearchResult.Target"/>, in top-down order; each element's
            <see cref="P:StardewUI.ViewChild.Position"/> is relative to the parent, <b>not</b> the search root as <paramref name="Target"/>
            is.</param>
        </member>
        <member name="P:StardewUI.Input.FocusSearchResult.Target">
            <summary>The specific view that can/will be focused, with a <see cref="P:StardewUI.ViewChild.Position"/> relative to
            the search root.</summary>
        </member>
        <member name="P:StardewUI.Input.FocusSearchResult.Path">
            <summary>The path from root to <see cref="P:StardewUI.Input.FocusSearchResult.Target"/>, in top-down order; each element's
            <see cref="P:StardewUI.ViewChild.Position"/> is relative to the parent, <b>not</b> the search root as <paramref name="Target"/>
            is.</summary>
        </member>
        <member name="M:StardewUI.Input.FocusSearchResult.AbsoluteTarget">
            <summary>
            Gets the <see cref="P:StardewUI.Input.FocusSearchResult.Target"/> in coordinates relative to the root of the <see cref="P:StardewUI.Input.FocusSearchResult.Path"/>.
            </summary>
            <remarks>
            These are not necessarily "global" coordinates because the <see cref="P:StardewUI.Input.FocusSearchResult.Path"/> may itself be relative.
            </remarks>
            <returns>A new <see cref="T:StardewUI.ViewChild"/> pointing to the same <see cref="P:StardewUI.ViewChild.View"/> as the
            <see cref="P:StardewUI.Input.FocusSearchResult.Target"/> and having its <see cref="P:StardewUI.ViewChild.Position"/> adjusted to the offsets in the
            <see cref="P:StardewUI.Input.FocusSearchResult.Path"/>.</returns>
        </member>
        <member name="M:StardewUI.Input.FocusSearchResult.AsChild(StardewUI.IView,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Returns a transformed <see cref="T:StardewUI.Input.FocusSearchResult"/> that adds a view (generally the caller) to the beginning
            of the <see cref="P:StardewUI.Input.FocusSearchResult.Path"/>, and applies its content offset to either the first element of the current
            <see cref="P:StardewUI.Input.FocusSearchResult.Path"/> (if non-empty) or the <see cref="P:StardewUI.Input.FocusSearchResult.Target"/> (if the path is empty).
            </summary>
            <remarks>
            Used to propagate results correctly up the view hierarchy in a focus search. This is called by
            <see cref="M:StardewUI.View.FocusSearch(Microsoft.Xna.Framework.Vector2,StardewUI.Direction)"/> and should not be called in overrides of
            <see cref="M:StardewUI.View.FindFocusableDescendant(Microsoft.Xna.Framework.Vector2,StardewUI.Direction)"/>.
            </remarks>
            <param name="parent">The parent that contains the current result.</param>
            <param name="position">The content offset relative to the <paramref name="parent"/>.</param>
        </member>
        <member name="M:StardewUI.Input.FocusSearchResult.Offset(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Applies a local offset to a search result.
            </summary>
            <remarks>
            Used to propagate the child position into a search result produced by that child. For example, view A is a
            layout with positioned child view C, which yields a search result targeting view Z in terms of its (C's) local
            coordinates. Applying the offset will adjust either the first element of the <see cref="P:StardewUI.Input.FocusSearchResult.Path"/>, if non-empty,
            or the <see cref="P:StardewUI.Input.FocusSearchResult.Target"/> itself if <see cref="P:StardewUI.Input.FocusSearchResult.Path"/> is empty. No other elements of the <see cref="P:StardewUI.Input.FocusSearchResult.Path"/>
            will be modified, as each element is already positioned relative to its parent preceding it in the list.
            </remarks>
            <param name="distance">The distance to offset the <see cref="P:StardewUI.Input.FocusSearchResult.Target"/> and first element of
            <see cref="P:StardewUI.Input.FocusSearchResult.Path"/>.</param>
            <returns>A new <see cref="T:StardewUI.Input.FocusSearchResult"/> with the <paramref name="distance"/> offset applied.</returns>
        </member>
        <member name="T:StardewUI.Input.ICaptureTarget">
            <summary>
            Denotes a view or other UI element that can be the active <see cref="T:StardewValley.IKeyboardSubscriber"/>. Allows
            view hosts to provide deterministic release, e.g. when the mouse is clicked outside the target.
            </summary>
            <remarks>
            This is primarily intended to work by checking if the <see cref="P:StardewValley.KeyboardDispatcher.Subscriber"/>
            implements this interface, and if it's <see cref="P:StardewUI.Input.ICaptureTarget.CapturingView"/> belongs to the current click/focus tree. To work
            correctly, both of these conditions must be met.
            </remarks>
        </member>
        <member name="P:StardewUI.Input.ICaptureTarget.CapturingView">
            <summary>
            The view that initiated the capturing. May be the same object as the <see cref="T:StardewUI.Input.ICaptureTarget"/>, or may be the
            "owner" of a hidden <see cref="T:StardewValley.Menus.TextBox"/> or other
            <see cref="T:StardewValley.IKeyboardSubscriber"/>.
            </summary>
        </member>
        <member name="M:StardewUI.Input.ICaptureTarget.ReleaseCapture">
            <summary>
            Stops input capturing from this target.
            </summary>
        </member>
        <member name="M:StardewUI.Input.ICaptureTarget.Update(System.TimeSpan)">
            <summary>
            Runs on every game update tick while capturing.
            </summary>
            <param name="elapsed">The amount of real time elapsed since the last tick.</param>
        </member>
        <member name="T:StardewUI.Input.PointerStyle">
            <summary>
            The vanilla pointer styles that can be drawn as a mouse cursor.
            </summary>
            <remarks>
            These are the values supported and expected in vanilla menus via
            <see cref="M:StardewValley.Menus.IClickableMenu.drawMouse(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Boolean,System.Int32)"/>. Unlike <see cref="T:StardewUI.Graphics.Cursor"/>, the available
            options are limited to standard 16x16 rectangles on the main Cursors tilesheet.
            </remarks>
        </member>
        <member name="F:StardewUI.Input.PointerStyle.Default">
            <summary>
            The default pointer for the given input device. Automatically switches between <see cref="F:StardewUI.Input.PointerStyle.Arrow"/> and
            <see cref="F:StardewUI.Input.PointerStyle.Finger"/> depending on whether gamepad controls are active.
            </summary>
        </member>
        <member name="F:StardewUI.Input.PointerStyle.Arrow">
            <summary>
            The default arrow cursor, used for mouse input when no special circumstances are present.
            </summary>
        </member>
        <member name="F:StardewUI.Input.PointerStyle.Hourglass">
            <summary>
            Wait cursor, used e.g. when loading a save game.
            </summary>
        </member>
        <member name="F:StardewUI.Input.PointerStyle.Hand">
            <summary>
            An open hand. Often used to indicate picking up items, opening doors or chests, petting animals, etc. In a UI,
            can also be used to indicate panning or dragging.
            </summary>
        </member>
        <member name="F:StardewUI.Input.PointerStyle.Gift">
            <summary>
            Arrow tip with a wrapped gift box. Used to indicate gifting an NPC.
            </summary>
        </member>
        <member name="F:StardewUI.Input.PointerStyle.Dialogue">
            <summary>
            Arrow tip with a speech bubble. Used to indicate the initiation of dialogue with an NPC.
            </summary>
        </member>
        <member name="F:StardewUI.Input.PointerStyle.Search">
            <summary>
            Small magnifying glass denoting some type of search function.
            </summary>
        </member>
        <member name="F:StardewUI.Input.PointerStyle.Harvest">
            <summary>
            Standard arrow pointer next to a plus, used for harvesting. The same icon is also used for stamina.
            </summary>
        </member>
        <member name="F:StardewUI.Input.PointerStyle.Health">
            <summary>
            Standard arrow pointer next to a heart.
            </summary>
        </member>
        <member name="F:StardewUI.Input.PointerStyle.Finger">
            <summary>
            Closed hand with pointed index finger, used for gamepad focus.
            </summary>
        </member>
        <member name="F:StardewUI.Input.PointerStyle.ControllerA">
            <summary>
            The "A" button on a gamepad controller, without an explicit pointer.
            </summary>
        </member>
        <member name="F:StardewUI.Input.PointerStyle.ControllerX">
            <summary>
            The "X" button on a gamepad controller, without an explicit pointer.
            </summary>
        </member>
        <member name="F:StardewUI.Input.PointerStyle.ControllerB">
            <summary>
            The "B" button on a gamepad controller, without an explicit pointer.
            </summary>
        </member>
        <member name="F:StardewUI.Input.PointerStyle.ControllerY">
            <summary>
            The "Y" button on a gamepad controller, without an explicit pointer.
            </summary>
        </member>
        <member name="T:StardewUI.IView">
            <summary>
            Represents some arbitrary UI element or layout.
            </summary>
        </member>
        <member name="E:StardewUI.IView.ButtonPress">
            <summary>
            Event raised when any button on any input device is pressed.
            </summary>
            <remarks>
            Only the views in the current focus path should receive these events.
            </remarks>
        </member>
        <member name="E:StardewUI.IView.ButtonRepeat">
            <summary>
            Event raised when a button is being held while the view is in focus, and has been held long enough since the
            initial <see cref="E:StardewUI.IView.ButtonPress"/> or the previous <c>ButtonRepeat</c> to trigger a repeated press.
            </summary>
            <remarks>
            <para>
            Because the game has its own logic to repeat key presses, which would cause <see cref="E:StardewUI.IView.ButtonPress"/> to fire
            repeatedly, this event generally applies only to the controller; that is, it exists to allow callers to decide
            whether they want the handler to repeat while the button is held or to only fire when first pressed, providing
            slightly more control than keyboard events whose repetition is up to the whims of the vanilla game.
            </para>
            <para>
            Only the views in the current focus path should receive these events.
            </para>
            </remarks>
        </member>
        <member name="E:StardewUI.IView.Click">
            <summary>
            Event raised when the view receives a click initiated from any button.
            </summary>
        </member>
        <member name="E:StardewUI.IView.Drag">
            <summary>
            Event raised when the view is being dragged using the mouse.
            </summary>
        </member>
        <member name="E:StardewUI.IView.DragEnd">
            <summary>
            Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last
            <see cref="E:StardewUI.IView.Drag"/>, and only once per drag operation.
            </summary>
        </member>
        <member name="E:StardewUI.IView.DragStart">
            <summary>
            Event raised when mouse dragging is first activated. Always raised before the first <see cref="E:StardewUI.IView.Drag"/>, and only
            once per drag operation.
            </summary>
        </member>
        <member name="E:StardewUI.IView.LeftClick">
            <summary>
            Event raised when the view receives a click initiated from the left mouse button, or the controller's action
            button (A).
            </summary>
            <remarks>
            Using this event is a shortcut for handling <see cref="E:StardewUI.IView.Click"/> and checking for
            <see cref="M:StardewUI.Events.ClickEventArgs.IsPrimaryButton"/>.
            </remarks>
        </member>
        <member name="E:StardewUI.IView.PointerEnter">
            <summary>
            Event raised when the pointer enters the view.
            </summary>
        </member>
        <member name="E:StardewUI.IView.PointerLeave">
            <summary>
            Event raised when the pointer exits the view.
            </summary>
        </member>
        <member name="E:StardewUI.IView.PointerMove">
            <summary>
            Event raised when the pointer moves within the view.
            </summary>
        </member>
        <member name="E:StardewUI.IView.RightClick">
            <summary>
            Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use
            button (X).
            </summary>
            <remarks>
            Using this event is a shortcut for handling <see cref="E:StardewUI.IView.Click"/> and checking for
            <see cref="M:StardewUI.Events.ClickEventArgs.IsSecondaryButton"/>.
            </remarks>
        </member>
        <member name="E:StardewUI.IView.Wheel">
            <summary>
            Event raised when the scroll wheel moves.
            </summary>
        </member>
        <member name="P:StardewUI.IView.ActualBounds">
            <summary>
            The bounds of this view relative to the origin (0, 0).
            </summary>
            <remarks>
            <para>
            Typically, a view's bounds is the rectangle from (0, 0) having size of <see cref="P:StardewUI.IView.OuterSize"/>, but there may be
            a difference especially in the case of negative margins. The various sizes affect layout flow and can even be
            negative - for example, in a left-to-right layout, a view with left margin -100, right margin 20 and inner width
            30 (no padding) has an X size of -50, indicating that it actually (correctly) causes adjacent views to be pulled
            left along with it. However, <c>ActualBounds</c> always has a positive <see cref="P:StardewUI.Layout.Bounds.Size"/>, and if an
            implicit content offset is being applied (e.g. because of negative margins) then it will be reflected in
            <see cref="P:StardewUI.Layout.Bounds.Position"/> and not affect the <see cref="P:StardewUI.Layout.Bounds.Size"/>; the previous example would have
            position X = -100 and size X = 50 (30 content + 20 right margin).
            </para>
            <para>
            In terms of usage, <see cref="P:StardewUI.IView.OuterSize"/> is generally used for the layout itself (<see cref="M:StardewUI.IView.Measure(Microsoft.Xna.Framework.Vector2)"/> and
            <see cref="M:StardewUI.View.OnMeasure(Microsoft.Xna.Framework.Vector2)"/> of parent views) whereas <see cref="P:StardewUI.IView.ActualBounds"/> is preferred for click and
            focus targeting.
            </para>
            </remarks>
        </member>
        <member name="P:StardewUI.IView.ClipOrigin">
            <summary>
            Origin position for the <see cref="P:StardewUI.IView.ClipSize"/>.
            </summary>
            <remarks>
            <para>
            If clipping is enabled by specifying a <see cref="P:StardewUI.IView.ClipSize"/>, and the computed size of the clipping rectangle
            is not exactly equal to the view's <see cref="P:StardewUI.IView.OuterSize"/>, then this determines how it will be aligned relative
            to this view's boundaries.
            </para>
            <para>
            The default origin is the view's top-left corner (0, 0). This property has no effect unless the view's
            <see cref="P:StardewUI.IView.ClipSize"/> is also defined.
            </para>
            </remarks>
        </member>
        <member name="P:StardewUI.IView.ClipSize">
            <summary>
            Size of the clipping rectangle, outside which content will not be displayed.
            </summary>
            <remarks>
            <para>
            This is defined as a layout, but unlike the view's <see cref="P:StardewUI.IView.Layout"/>, it is not computed against the
            available size provided by the parent; instead, its reference size is the view's <see cref="P:StardewUI.IView.OuterSize"/>.
            </para>
            <para>
            A common scenario is to set this to <see cref="M:StardewUI.Layout.LayoutParameters.Fill"/> in order to prevent drawing outside the
            view's own boundaries, i.e. as an equivalent to CSS <c>overflow: hidden</c>. Note however that clipping occurs
            during the drawing phase, so a smaller clip region does not result in a smaller layout; the view will still have
            the same size it would have had without any clipping, but only part of it will actually get drawn. This can also
            be used intentionally to create some animated visual effects such as slides and wipes.
            </para>
            </remarks>
        </member>
        <member name="P:StardewUI.IView.ContentBounds">
            <summary>
            The true bounds of this view's content; i.e. <see cref="P:StardewUI.IView.ActualBounds"/> excluding margins.
            </summary>
        </member>
        <member name="P:StardewUI.IView.FloatingBounds">
            <summary>
            Contains the bounds of all floating elements in this view tree, including the current view and all descendants.
            </summary>
        </member>
        <member name="P:StardewUI.IView.IsFocusable">
            <summary>
            Whether or not the view can receive controller focus, i.e. the stick/d-pad controlled cursor can move to this
            view. Not generally applicable for mouse controls.
            </summary>
            <remarks>
            In other game UI code this is more typically referred to as "snap", since there is no true input focus. However,
            focus is the more general term and better explains what is happening with e.g. a text box.
            </remarks>
        </member>
        <member name="P:StardewUI.IView.Layout">
            <summary>
            The current layout parameters, which determine how <see cref="M:StardewUI.IView.Measure(Microsoft.Xna.Framework.Vector2)"/> will behave.
            </summary>
        </member>
        <member name="P:StardewUI.IView.Name">
            <summary>
            Simple name for this view, used in log/debug output; does not affect behavior.
            </summary>
        </member>
        <member name="P:StardewUI.IView.Opacity">
            <summary>
            Opacity (alpha level) of the view.
            </summary>
            <remarks>
            Affects this view and all descendants; used to control opacity of an entire control or layout area.
            </remarks>
        </member>
        <member name="P:StardewUI.IView.OuterSize">
            <summary>
            The true computed layout size resulting from a single <see cref="M:StardewUI.IView.Measure(Microsoft.Xna.Framework.Vector2)"/> pass.
            </summary>
        </member>
        <member name="P:StardewUI.IView.PointerEventsEnabled">
            <summary>
            Whether this view should receive pointer events like <see cref="E:StardewUI.IView.Click"/> or <see cref="E:StardewUI.IView.Drag"/>.
            </summary>
            <remarks>
            By default, all views receive pointer events; this may be disabled for views that intentionally overlap other
            views but shouldn't block their input, such as local non-modal overlays.
            </remarks>
        </member>
        <member name="P:StardewUI.IView.PointerStyle">
            <summary>
            Pointer style to use when this view is hovered.
            </summary>
            <remarks>
            As with <see cref="P:StardewUI.IView.Tooltip"/>, the lowest-level view takes precedence over any higher-level views.
            </remarks>
        </member>
        <member name="P:StardewUI.IView.ScrollWithChildren">
            <summary>
            If set to an axis, specifies that when any child of the view is scrolled into view (using
            <see cref="M:StardewUI.IView.ScrollIntoView(System.Collections.Generic.IEnumerable{StardewUI.ViewChild},Microsoft.Xna.Framework.Vector2@)"/>), then this entire view should be scrolled along with it.
            </summary>
            <remarks>
            <para>
            For example, if the view lays out children horizontally, and some children may occupy only a very small amount
            of space near the top while others are much taller vertically or positioned near the bottom, it might be
            desirable to configure this with <see cref="F:StardewUI.Layout.Orientation.Vertical"/>, so that the entire "row" is positioned
            within the scrollable viewport.
            </para>
            <para>
            In other words, "if any part of me is made visible via scrolling, then all of me should be visible".
            </para>
            </remarks>
        </member>
        <member name="P:StardewUI.IView.Tags">
            <summary>
            The user-defined tags for this view.
            </summary>
        </member>
        <member name="P:StardewUI.IView.Tooltip">
            <summary>
            Tooltip data to display on hover, if any.
            </summary>
        </member>
        <member name="P:StardewUI.IView.Transform">
            <summary>
            Local transformation to apply to this view, including any children and floating elements.
            </summary>
        </member>
        <member name="P:StardewUI.IView.TransformOrigin">
            <summary>
            Relative origin position for any <see cref="P:StardewUI.IView.Transform"/> on this view.
            </summary>
            <remarks>
            <para>
            Expects a value that represents the fraction of the view's computed layout size. For example, <c>(0, 0)</c> is
            the top left, <c>(0.5, 0.5)</c> is the center, and <c>1, 1</c> is the bottom right. <c>null</c> values are
            equivalent to <see cref="P:Microsoft.Xna.Framework.Vector2.Zero"/>.
            </para>
            <para>
            Origins are not inherited; each view defines its own origin for its specific transform.
            </para>
            </remarks>
        </member>
        <member name="P:StardewUI.IView.Visibility">
            <summary>
            Drawing visibility for this view.
            </summary>
        </member>
        <member name="P:StardewUI.IView.ZIndex">
            <summary>
            Z order for this view within its direct parent. Higher indices draw later (on top).
            </summary>
        </member>
        <member name="M:StardewUI.IView.ContainsPoint(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Checks if a given point, relative to the view's origin, is within its bounds.
            </summary>
            <param name="point">The point to test.</param>
            <returns><c>true</c> if <paramref name="point"/> is within the view bounds; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:StardewUI.IView.Draw(StardewUI.Graphics.ISpriteBatch)">
            <summary>
            Draws the content for this view.
            </summary>
            <remarks>
            No positional argument is included because <see cref="T:StardewUI.Graphics.ISpriteBatch"/> handles its own transformations; the
            top-left coordinates of this view are always (0, 0).
            </remarks>
            <param name="b">Sprite batch to hold the drawing output.</param>
        </member>
        <member name="M:StardewUI.IView.FocusSearch(Microsoft.Xna.Framework.Vector2,StardewUI.Direction)">
            <summary>
            Finds the next focusable component in a given direction that does <i>not</i> overlap with a current position.
            </summary>
            <remarks>
            If <paramref name="position"/> is out of bounds, it does not necessarily mean that the view should return
            <c>null</c>; the expected result depends on the <paramref name="direction"/> also. The base case is when the
            focus position is already in bounds, and in this case a view should return whichever view can be reached by
            moving from the edge of that view along a straight line in the specified <c>direction</c>. However, focus search
            is recursive and the result should reflect the "best" candidate for focus if the cursor were to move <i>into</i>
            this view's bounds. For example, in a 1D horizontal layout the rules might be:
            <list type="bullet">
            <item>If the <paramref name="direction"/> is <see cref="F:StardewUI.Direction.East"/>, and the position's X value is
            negative, then the result should the leftmost focusable child, regardless of Y value.</item>
            <item>If the direction is <see cref="F:StardewUI.Direction.South"/>, and the X position is within the view's horizontal
            bounds, and the Y value is negative or greater than the view's height, then result should be whichever child
            intersects with that X position.</item>
            <item>If the direction is <see cref="F:StardewUI.Direction.West"/> and the X position is negative, or the direction is
            <see cref="F:StardewUI.Direction.East"/> and the X position is greater than the view's width, then the result should be
            <c>null</c> as there is literally nothing the view knows about in that direction.</item>
            </list>
            There are no strict rules for how a view performs focus search, but in general it is assumed that a view
            implementation understands its own layout and can accommodate accordingly; for example, a grid would follow
            essentially the same rules as our "list" example above, with additional considerations for navigating rows.
            "Ragged" 2D layouts might have complex rules requiring explicit neighbors, and therefore are typically easier
            to implement as nested lanes.
            </remarks>
            <param name="position">The current cursor position, relative to this view. May have dimensions that are negative
            or outside the view bounds, indicating that the cursor is not currently within the view.</param>
            <param name="direction">The direction of cursor movement.</param>
            <returns>The next focusable view reached by moving in the specified <paramref name="direction"/>, or <c>null</c>
            if there are no focusable descendants that are possible to reach in that direction.</returns>
        </member>
        <member name="M:StardewUI.IView.GetChildAt(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Boolean)">
            <summary>
            Finds the child at a given position.
            </summary>
            <remarks>
            If multiple children overlap the same position, then this returns the topmost child, i.e. with the highest
            <see cref="P:StardewUI.IView.ZIndex"/>.
            </remarks>
            <param name="position">The search position, relative to the view's top-left coordinate.</param>
            <param name="preferFocusable"><c>true</c> to prioritize a focusable child over a non-focusable child with a higher
            z-index in case of overlap; <c>false</c> to always use the topmost child.</param>
            <param name="requirePointerEvents">Whether to exclude views whose <see cref="P:StardewUI.IView.PointerEventsEnabled"/> is
            currently <c>false</c>.</param>
            <returns>The view at <paramref name="position"/>, or <c>null</c> if there is no match.</returns>
        </member>
        <member name="M:StardewUI.IView.GetChildPosition(StardewUI.IView)">
            <summary>
            Computes or retrieves the position of a given direct child.
            </summary>
            <remarks>
            Implementation of this may be O(N) and therefore it should not be called every frame; it is intended for use in
            directional movement and other user-initiated events.
            </remarks>
            <param name="childView">The child of this view.</param>
            <returns>The local coordinates of the <paramref name="childView"/>, or <c>null</c> if the
            <paramref name="childView"/> is not a current or direct child.</returns>
        </member>
        <member name="M:StardewUI.IView.GetChildren(System.Boolean)">
            <summary>
            Gets the current children of this view.
            </summary>
            <param name="includeFloatingElements">Whether to include views that are not direct children, but instead
            members of the floating elements collection of an <see cref="T:StardewUI.Layout.IFloatContainer"/> implementation.</param>
        </member>
        <member name="M:StardewUI.IView.GetChildrenAt(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Finds all children at a given position.
            </summary>
            <param name="position">The search position, relative to the view's top-left coordinate.</param>
            <returns>A sequence of views at the specified <paramref name="position"/>, in front-to-back (reverse
            <see cref="P:StardewUI.IView.ZIndex"/>) order.</returns>
        </member>
        <member name="M:StardewUI.IView.GetDefaultFocusChild">
            <summary>
            Gets the direct child that should contain cursor focus when a menu or overlay containing this view is first
            opened.
            </summary>
            <returns>The child view and position where initial focus should be, either directly or indirectly as a result of
            a descendant receiving focus. If this <see cref="T:StardewUI.IView"/> is itself <see cref="P:StardewUI.IView.IsFocusable"/>, then the result
            may be a <see cref="T:StardewUI.ViewChild"/> referencing this view.</returns>
        </member>
        <member name="M:StardewUI.IView.HasOutOfBoundsContent">
            <summary>
            Checks if the view has content or elements that are all or partially outside the <see cref="P:StardewUI.IView.ActualBounds"/>.
            </summary>
            <remarks>
            This may be the case for e.g. floating elements, and covers not only the view's immediate content/children but
            also that of any descendants.
            </remarks>
        </member>
        <member name="M:StardewUI.IView.IsDirty">
            <summary>
            Checks whether or not the view is dirty - i.e. requires a new layout with a full <see cref="M:StardewUI.IView.Measure(Microsoft.Xna.Framework.Vector2)"/>.
            </summary>
            <remarks>
            Typically, a view will be considered dirty if and only if one of the following are true:
            <list type="bullet">
            <item>The <see cref="P:StardewUI.IView.Layout"/> has changed</item>
            <item>The content has changed in a way that could affect layout, e.g. the text has changed in a
            <see cref="F:StardewUI.Layout.LengthType.Content"/> configuration</item>
            <item>The <c>availableSize</c> is not the same as the previously-seen value (see remarks in
            <see cref="M:StardewUI.IView.Measure(Microsoft.Xna.Framework.Vector2)"/>)</item>
            </list>
            A correct implementation is important for performance, as full layout can be very expensive to run on every
            frame.
            </remarks>
            <returns><c>true</c> if the view must be measured again; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:StardewUI.IView.IsVisible(System.Nullable{Microsoft.Xna.Framework.Vector2})">
            <summary>
            Checks if the view is effectively visible, i.e. if it has anything to draw.
            </summary>
            <remarks>
            While <see cref="P:StardewUI.IView.Visibility"/> acts as a master on/off switch, there may be many other reasons for a view not
            to have any visible content, such as views with zero <see cref="P:StardewUI.IView.Opacity"/>, layout views with no visible
            children, or labels or images with no current text or sprite.
            </remarks>
            <param name="position">Optional position at which to test for visibility. If not specified, the result indicates
            whether any part of the view is visible.</param>
        </member>
        <member name="M:StardewUI.IView.Measure(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Performs layout on this view, updating its <see cref="P:StardewUI.IView.OuterSize"/>, <see cref="P:StardewUI.IView.ActualBounds"/> and
            <see cref="P:StardewUI.IView.ContentBounds"/>, and arranging any children in their respective positions.
            </summary>
            <remarks>
            Most views should save the value of <paramref name="availableSize"/> for use in <see cref="M:StardewUI.IView.IsDirty"/> checks.
            </remarks>
            <param name="availableSize">The width/height that is still available in the container/parent.</param>
            <returns>Whether or not any layout was performed as a result of this pass. Callers may use this to propagate
            layout back up the tree, or perform expensive follow-up actions.</returns>
        </member>
        <member name="M:StardewUI.IView.OnButtonPress(StardewUI.Events.ButtonEventArgs)">
            <summary>
            Called when a button press is received while this view is in the focus path.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:StardewUI.IView.OnButtonRepeat(StardewUI.Events.ButtonEventArgs)">
            <summary>
            Called when a button press is first received, and at recurring intervals thereafter, for as long as the button
            is held and this view remains in the focus path.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:StardewUI.IView.OnClick(StardewUI.Events.ClickEventArgs)">
            <summary>
            Called when a click is received within this view's bounds.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:StardewUI.IView.OnDrag(StardewUI.Events.PointerEventArgs)">
            <summary>
            Called when the view is being dragged (mouse moved while left button held).
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:StardewUI.IView.OnDrop(StardewUI.Events.PointerEventArgs)">
            <summary>
            Called when the mouse button is released after at least one <see cref="M:StardewUI.IView.OnDrag(StardewUI.Events.PointerEventArgs)"/>.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:StardewUI.IView.OnPointerMove(StardewUI.Events.PointerMoveEventArgs)">
            <summary>
            Called when a pointer movement related to this view occurs.
            </summary>
            <remarks>
            This can either be the pointer entering the view, leaving the view, or moving within the view. The method is
            used to trigger events such as <see cref="E:StardewUI.View.PointerEnter"/> and <see cref="E:StardewUI.View.PointerLeave"/>.
            </remarks>
            <param name="e">The event data.</param>
        </member>
        <member name="M:StardewUI.IView.OnUpdate(System.TimeSpan)">
            <summary>
            Runs on every update tick.
            </summary>
            <remarks>
            <para>
            Provided as an escape hatch for very unusual scenarios like responding to flips in the game's
            <see cref="F:StardewValley.Options.gamepadControls"/> state.
            </para>
            <para>
            <b>Override this at your own extreme peril.</b> Frequently performing any layout-affecting logic in this
            function can negate the performance benefits of a retained-mode UI and cause the UI to become sluggish or even
            completely unresponsive.  Do not use it for animation; use <see cref="T:StardewUI.Animation.Animator"/> instead.
            </para>
            </remarks>
            <param name="elapsed">Time elapsed since last game tick.</param>
        </member>
        <member name="M:StardewUI.IView.OnWheel(StardewUI.Events.WheelEventArgs)">
            <summary>
            Called when a wheel event is received within this view's bounds.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:StardewUI.IView.ScrollIntoView(System.Collections.Generic.IEnumerable{StardewUI.ViewChild},Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Attempts to scroll the specified target into view, including all of its ancestors, if not fully in view.
            </summary>
            <param name="path">The path to the view that should be visible, starting from (and not including) this view;
            each element has the local position within its own parent, so the algorithm can run recursively. This is a slice
            of the same path returned in a <see cref="T:StardewUI.Input.FocusSearchResult"/>.</param>
            <param name="distance">The total distance that was scrolled, including distance scrolled by descendants.</param>
            <returns>Whether or not the scroll was successful; <c>false</c> prevents the request from bubbling.</returns>
        </member>
        <member name="T:StardewUI.Layout.Alignment">
            <summary>
            Specifies an alignment (horizontal or vertical) for text or other layout.
            </summary>
        </member>
        <member name="F:StardewUI.Layout.Alignment.Start">
            <summary>
            Align to the start of the available space - horizontal left or vertical top.
            </summary>
        </member>
        <member name="F:StardewUI.Layout.Alignment.Middle">
            <summary>
            Align to the middle of the available space.
            </summary>
        </member>
        <member name="F:StardewUI.Layout.Alignment.End">
            <summary>
            Align to the end of the available space - horizontal right or vertical bottom.
            </summary>
        </member>
        <member name="T:StardewUI.Layout.AlignmentExtensions">
            <summary>
            Common helpers for <see cref="T:StardewUI.Layout.Alignment"/>.
            </summary>
        </member>
        <member name="M:StardewUI.Layout.AlignmentExtensions.Align(StardewUI.Layout.Alignment,System.Single,System.Single)">
            <summary>
            Applies an alignment to an axis starting at position 0.
            </summary>
            <param name="alignment">The alignment type.</param>
            <param name="contentLength">The length (width or height) of the content to align.</param>
            <param name="axisLength">The total space (width or height) available for the content.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:StardewUI.Layout.Bounds">
            <summary>
            A bounding rectangle using floating-point dimensions.
            </summary>
            <param name="Position">The top-left position.</param>
            <param name="Size">The width and height.</param>
        </member>
        <member name="M:StardewUI.Layout.Bounds.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            A bounding rectangle using floating-point dimensions.
            </summary>
            <param name="Position">The top-left position.</param>
            <param name="Size">The width and height.</param>
        </member>
        <member name="P:StardewUI.Layout.Bounds.Position">
            <summary>The top-left position.</summary>
        </member>
        <member name="P:StardewUI.Layout.Bounds.Size">
            <summary>The width and height.</summary>
        </member>
        <member name="F:StardewUI.Layout.Bounds.Empty">
            <summary>
            Empty bounds, used for invalid results.
            </summary>
        </member>
        <member name="P:StardewUI.Layout.Bounds.Bottom">
            <summary>
            The Y value at the bottom edge of the bounding rectangle.
            </summary>
        </member>
        <member name="P:StardewUI.Layout.Bounds.Left">
            <summary>
            The X value at the left edge of the bounding rectangle.
            </summary>
        </member>
        <member name="P:StardewUI.Layout.Bounds.Right">
            <summary>
            The X value at the right edge of the bounding rectangle.
            </summary>
        </member>
        <member name="P:StardewUI.Layout.Bounds.Top">
            <summary>
            The Y value at the top edge of the bounding rectangle.
            </summary>
        </member>
        <member name="M:StardewUI.Layout.Bounds.Center">
            <summary>
            Gets the point at the center of the bounding rectangle.
            </summary>
        </member>
        <member name="M:StardewUI.Layout.Bounds.ContainsBounds(StardewUI.Layout.Bounds)">
            <summary>
            Checks if an entire bounding rectangle is fully within these bounds.
            </summary>
            <param name="bounds">The other bounds.</param>
            <returns><c>true</c> if <paramref name="bounds"/> are a subset of the current instance; <c>false</c> if the two
            bounds do not overlap or only overlap partially.</returns>
        </member>
        <member name="M:StardewUI.Layout.Bounds.ContainsPoint(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Checks if a given point is within the bounds.
            </summary>
            <param name="point">The point to check.</param>
            <returns><c>true</c> if <paramref name="point"/> is inside these bounds; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:StardewUI.Layout.Bounds.Intersection(StardewUI.Layout.Bounds)">
            <summary>
            Computes the intersection of this <see cref="T:StardewUI.Layout.Bounds"/> with another instance.
            </summary>
            <param name="other">The other bounds to intersect with.</param>
            <returns>A new <see cref="T:StardewUI.Layout.Bounds"/> whose area is the intersection of this instance and
            <paramref name="other"/>, or <see cref="F:StardewUI.Layout.Bounds.Empty"/> if they do not overlap.</returns>
        </member>
        <member name="M:StardewUI.Layout.Bounds.IntersectsWith(StardewUI.Layout.Bounds)">
            <summary>
            Checks if this <see cref="T:StardewUI.Layout.Bounds"/> intersects with another instance, without computing the intersection.
            </summary>
            <param name="other">The other bounds to check for intersection.</param>
            <returns>True if this <see cref="T:StardewUI.Layout.Bounds"/> and the <paramref name="other"/> bounds have any intersecting area,
            otherwise <c>false</c>.</returns>
        </member>
        <member name="M:StardewUI.Layout.Bounds.Offset(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Offsets a <see cref="T:StardewUI.Layout.Bounds"/> by a given distance.
            </summary>
            <param name="distance">The offset distance.</param>
            <returns>A new <see cref="T:StardewUI.Layout.Bounds"/> with the same size as this instance and a <see cref="P:StardewUI.Layout.Bounds.Position"/> offset by
            the specified <paramref name="distance"/>.</returns>
        </member>
        <member name="M:StardewUI.Layout.Bounds.Truncate">
            <summary>
            Converts the bounds to an integer <see cref="T:Microsoft.Xna.Framework.Rectangle"/>, truncating any fractional values.
            </summary>
            <remarks>
            Truncating is the same behavior used in <see cref="M:Microsoft.Xna.Framework.Vector2.ToPoint"/>, making this consistent with the
            equivalent component-by-component translation to XNA.
            </remarks>
        </member>
        <member name="M:StardewUI.Layout.Bounds.Union(StardewUI.Layout.Bounds)">
            <summary>
            Computes the union of this <see cref="T:StardewUI.Layout.Bounds"/> with another instance.
            </summary>
            <param name="other">The other bounds to add to the union.</param>
            <returns>A new <see cref="T:StardewUI.Layout.Bounds"/> whose set is the union of this instance and <paramref name="other"/>; i.e.
            is exactly large enough to contain both bounds.</returns>
        </member>
        <member name="T:StardewUI.Layout.DirtyTracker`1">
            <summary>
            Convenience class for tracking properties that have changed, i.e. for layout dirty checking.
            </summary>
            <remarks>
            Will not flag changes as dirty unless the changed value is different from previous. Requires a correct
            <see cref="M:System.Object.Equals(System.Object)"/> implementation for this to work, typically meaning strings, primitives and records.
            </remarks>
            <typeparam name="T">Type of value held by the tracker.</typeparam>
            <param name="initialValue">Value to initialize with.</param>
        </member>
        <member name="M:StardewUI.Layout.DirtyTracker`1.#ctor(`0)">
            <summary>
            Convenience class for tracking properties that have changed, i.e. for layout dirty checking.
            </summary>
            <remarks>
            Will not flag changes as dirty unless the changed value is different from previous. Requires a correct
            <see cref="M:System.Object.Equals(System.Object)"/> implementation for this to work, typically meaning strings, primitives and records.
            </remarks>
            <typeparam name="T">Type of value held by the tracker.</typeparam>
            <param name="initialValue">Value to initialize with.</param>
        </member>
        <member name="P:StardewUI.Layout.DirtyTracker`1.IsDirty">
            <summary>
            Whether or not the value is dirty, i.e. has changed since the last call to <see cref="M:StardewUI.Layout.DirtyTracker`1.ResetDirty"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Layout.DirtyTracker`1.Value">
            <summary>
            The currently-held value.
            </summary>
        </member>
        <member name="M:StardewUI.Layout.DirtyTracker`1.ResetDirty">
            <summary>
            Resets the dirty flag, so that <see cref="P:StardewUI.Layout.DirtyTracker`1.IsDirty"/> returns <c>false</c> until the <see cref="P:StardewUI.Layout.DirtyTracker`1.Value"/> is
            changed again.
            </summary>
        </member>
        <member name="M:StardewUI.Layout.DirtyTracker`1.SetIfChanged(`0)">
            <summary>
            Updates the tracker with a new value, if it has changed since the last seen value.
            </summary>
            <remarks>
            If this method returns <c>true</c>, then <see cref="P:StardewUI.Layout.DirtyTracker`1.IsDirty"/> will always also be <c>true</c> afterward.
            However, if it returns <c>false</c> then the dirty state simply remains unchanged, and will only be <c>false</c>
            if the value was not already dirty from a previous change.
            </remarks>
            <param name="value">The new value.</param>
            <returns><c>true</c> if the <paramref name="value"/> was different from the previous <see cref="P:StardewUI.Layout.DirtyTracker`1.Value"/>,
            otherwise <c>false</c>.</returns>
        </member>
        <member name="T:StardewUI.Layout.DirtyTrackingList`1">
            <summary>
            List wrapper that tracks whether changes have been made.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
        </member>
        <member name="P:StardewUI.Layout.DirtyTrackingList`1.IsDirty">
            <summary>
            Whether changes have been made since the last call to <see cref="M:StardewUI.Layout.DirtyTrackingList`1.ResetDirty"/>.
            </summary>
        </member>
        <member name="P:StardewUI.Layout.DirtyTrackingList`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Layout.DirtyTrackingList`1.Count">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Layout.DirtyTrackingList`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Layout.DirtyTrackingList`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Layout.DirtyTrackingList`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Layout.DirtyTrackingList`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Layout.DirtyTrackingList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Layout.DirtyTrackingList`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Layout.DirtyTrackingList`1.IndexOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Layout.DirtyTrackingList`1.Insert(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Layout.DirtyTrackingList`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Layout.DirtyTrackingList`1.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Layout.DirtyTrackingList`1.ResetDirty">
            <summary>
            Resets the dirty state; <see cref="P:StardewUI.Layout.DirtyTrackingList`1.IsDirty"/> will return <c>false</c> until another mutation occurs.
            </summary>
        </member>
        <member name="M:StardewUI.Layout.DirtyTrackingList`1.SetItems(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Replaces the entire list with the specified sequence.
            </summary>
            <param name="items">The new list items.</param>
        </member>
        <member name="T:StardewUI.Layout.Edges">
            <summary>
            Describes a set of edge dimensions, e.g. for margin or padding.
            </summary>
            <param name="Left">The left edge.</param>
            <param name="Top">The top edge.</param>
            <param name="Right">The right edge.</param>
            <param name="Bottom">The bottom edge.</param>
        </member>
        <member name="M:StardewUI.Layout.Edges.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Describes a set of edge dimensions, e.g. for margin or padding.
            </summary>
            <param name="Left">The left edge.</param>
            <param name="Top">The top edge.</param>
            <param name="Right">The right edge.</param>
            <param name="Bottom">The bottom edge.</param>
        </member>
        <member name="P:StardewUI.Layout.Edges.Left">
            <summary>The left edge.</summary>
        </member>
        <member name="P:StardewUI.Layout.Edges.Top">
            <summary>The top edge.</summary>
        </member>
        <member name="P:StardewUI.Layout.Edges.Right">
            <summary>The right edge.</summary>
        </member>
        <member name="P:StardewUI.Layout.Edges.Bottom">
            <summary>The bottom edge.</summary>
        </member>
        <member name="F:StardewUI.Layout.Edges.NONE">
            <summary>
            An <see cref="T:StardewUI.Layout.Edges"/> instance with all edges set to zero.
            </summary>
        </member>
        <member name="P:StardewUI.Layout.Edges.Horizontal">
            <summary>
            Gets the total value for all horizontal edges (<see cref="P:StardewUI.Layout.Edges.Left"/> + <see cref="P:StardewUI.Layout.Edges.Right"/>).
            </summary>
        </member>
        <member name="P:StardewUI.Layout.Edges.Total">
            <summary>
            The total size occupied by all edges.
            </summary>
        </member>
        <member name="P:StardewUI.Layout.Edges.Vertical">
            <summary>
            Gets the total value for all vertical edges (<see cref="P:StardewUI.Layout.Edges.Top"/> + <see cref="P:StardewUI.Layout.Edges.Bottom"/>).
            </summary>
        </member>
        <member name="M:StardewUI.Layout.Edges.Parse(System.String)">
            <summary>
            Parses an <see cref="T:StardewUI.Layout.Edges"/> value from a comma-separated string representation.
            </summary>
            <remarks>
            The behavior depends on the number of comma-separated tokens in the string, equivalent to the constructor
            overload with that number of parameters:
            <list type="bullet">
            <item>A single value will give all edges the same length</item>
            <item>Two values will set the horizontal (left/right) and vertical (top/bottom) lengths</item>
            <item>Four values will set each length individually</item>
            <item>Any other format will throw <see cref="T:System.FormatException"/>.</item>
            </list>
            </remarks>
            <param name="value">The formatted edges to parse.</param>
            <returns>The parsed <see cref="T:StardewUI.Layout.Edges"/>.</returns>
            <exception cref="T:System.FormatException">Thrown when the <paramref name="value"/> is not a valid string representation
            for <see cref="T:StardewUI.Layout.Edges"/>.</exception>
        </member>
        <member name="M:StardewUI.Layout.Edges.#ctor(System.Int32)">
            <summary>
            Initializes a new <see cref="T:StardewUI.Layout.Edges"/> with all edges set to the same value.
            </summary>
            <param name="all">Common value for all edges.</param>
        </member>
        <member name="M:StardewUI.Layout.Edges.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialies a new <see cref="T:StardewUI.Layout.Edges"/> with symmetrical horizontal and vertical values.
            </summary>
            <param name="horizontal">Common value for the <see cref="P:StardewUI.Layout.Edges.Left"/> and <see cref="P:StardewUI.Layout.Edges.Right"/> edges.</param>
            <param name="vertical">Common value for the <see cref="P:StardewUI.Layout.Edges.Top"/> and <see cref="P:StardewUI.Layout.Edges.Bottom"/> edges.</param>
        </member>
        <member name="M:StardewUI.Layout.Edges.Equals(StardewUI.Layout.Edges)">
            <inheritdoc/>
            <remarks>
            Overrides the default implementation to avoid using reflection on every frame during dirty checks.
            </remarks>
        </member>
        <member name="M:StardewUI.Layout.Edges.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Layout.Edges.HorizontalOnly">
            <summary>
            Gets a copy of this instance with only the horizontal edges set (vertical edges zeroed out).
            </summary>
        </member>
        <member name="M:StardewUI.Layout.Edges.Rotate(StardewUI.Graphics.SimpleRotation)">
            <summary>
            Rotates the edges, transposing the individual edge values.
            </summary>
            <param name="rotation">The rotation type (angle).</param>
            <returns>A rotated copy of this <see cref="T:StardewUI.Layout.Edges"/> instance.</returns>
        </member>
        <member name="M:StardewUI.Layout.Edges.ToString">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Layout.Edges.VerticalOnly">
            <summary>
            Gets a copy of this instance with only the vertical edges set (horizontal edges zeroed out).
            </summary>
        </member>
        <member name="M:StardewUI.Layout.Edges.op_UnaryNegation(StardewUI.Layout.Edges)">
            <summary>
            Negates an <see cref="T:StardewUI.Layout.Edges"/> value.
            </summary>
            <param name="value">The edges.</param>
            <returns>An <see cref="T:StardewUI.Layout.Edges"/> whose individual edge values are each the negation of the corresponding edge in
            <paramref name="value"/>.</returns>
        </member>
        <member name="M:StardewUI.Layout.Edges.op_Addition(StardewUI.Layout.Edges,StardewUI.Layout.Edges)">
            <summary>
            Computes the sum of two <see cref="T:StardewUI.Layout.Edges"/> values.
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>An <see cref="T:StardewUI.Layout.Edges"/> whose individual edge values are the sum of the corresponding edges from
            <paramref name="value1"/> and <paramref name="value2"/>.</returns>
        </member>
        <member name="M:StardewUI.Layout.Edges.op_Subtraction(StardewUI.Layout.Edges,StardewUI.Layout.Edges)">
            <summary>
            Computes the difference of two <see cref="T:StardewUI.Layout.Edges"/> values.
            </summary>
            <param name="value1">The first value, to subtract from.</param>
            <param name="value2">The second value, to be subtracted.</param>
            <returns>An <see cref="T:StardewUI.Layout.Edges"/> whose individual edge values are the difference of the corresponding edges
            between <paramref name="value1"/> and <paramref name="value2"/>.</returns>
        </member>
        <member name="M:StardewUI.Layout.Edges.op_Multiply(StardewUI.Layout.Edges,System.Int32)">
            <summary>
            Scales an <see cref="T:StardewUI.Layout.Edges"/> value uniformly.
            </summary>
            <param name="value">The value to scale.</param>
            <param name="scale">The scale amount (multiplier).</param>
            <returns>An <see cref="T:StardewUI.Layout.Edges"/> whose individual edge values are the corresponding edges from
            <paramref name="value"/>, each multiplied by the <paramref name="scale"/>.</returns>
        </member>
        <member name="M:StardewUI.Layout.Edges.op_Multiply(StardewUI.Layout.Edges,System.Single)">
            <summary>
            Scales an <see cref="T:StardewUI.Layout.Edges"/> value uniformly.
            </summary>
            <param name="value">The value to scale.</param>
            <param name="scale">The scale amount (multiplier).</param>
            <returns>An <see cref="T:StardewUI.Layout.Edges"/> whose individual edge values are the corresponding edges from
            <paramref name="value"/>, each multiplied by the <paramref name="scale"/>.</returns>
        </member>
        <member name="T:StardewUI.Layout.FloatingElement">
            <summary>
            Provides independent layout for an <see cref="T:StardewUI.IView"/> relative to its parent.
            </summary>
            <remarks>
            <para>
            Floating elements do not participate in the normal layout (<see cref="M:StardewUI.IView.Measure(Microsoft.Xna.Framework.Vector2)"/>) of the view that owns them;
            they are excluded entirely from the flow, and then provided with their own measurement and position using the final
            bounds of the parent (i.e. those that result from its non-floating elements).
            </para>
            <para>
            This is primarily useful for annotations, callouts, or elements that are intentionally drawn outside their logical
            container such as scrollbars or sidebars. Floating views <b>can</b> receive focus and clicks, but do not actually
            capture the cursor like an <see cref="T:StardewUI.Overlays.Overlay"/> would, and therefore shouldn't be used for modal UI.
            </para>
            <para>
            In general it is preferred to use standard layout controls like <see cref="T:StardewUI.Widgets.Lane"/> over floating elements,
            but there are specific cases that justify floats, such as the aforementioned scrollbar which should display
            "outside" the container regardless of how nested the container itself is - i.e. the float must "break out" of the
            normal flow.
            </para>
            </remarks>
            <param name="view">The floating view to display/interact with.</param>
            <param name="position">Specifies how to position the <paramref name="view"/> relative to the parent and its own
            measured size.</param>
        </member>
        <member name="M:StardewUI.Layout.FloatingElement.#ctor(StardewUI.IView,StardewUI.Layout.FloatingPosition)">
            <summary>
            Provides independent layout for an <see cref="T:StardewUI.IView"/> relative to its parent.
            </summary>
            <remarks>
            <para>
            Floating elements do not participate in the normal layout (<see cref="M:StardewUI.IView.Measure(Microsoft.Xna.Framework.Vector2)"/>) of the view that owns them;
            they are excluded entirely from the flow, and then provided with their own measurement and position using the final
            bounds of the parent (i.e. those that result from its non-floating elements).
            </para>
            <para>
            This is primarily useful for annotations, callouts, or elements that are intentionally drawn outside their logical
            container such as scrollbars or sidebars. Floating views <b>can</b> receive focus and clicks, but do not actually
            capture the cursor like an <see cref="T:StardewUI.Overlays.Overlay"/> would, and therefore shouldn't be used for modal UI.
            </para>
            <para>
            In general it is preferred to use standard layout controls like <see cref="T:StardewUI.Widgets.Lane"/> over floating elements,
            but there are specific cases that justify floats, such as the aforementioned scrollbar which should display
            "outside" the container regardless of how nested the container itself is - i.e. the float must "break out" of the
            normal flow.
            </para>
            </remarks>
            <param name="view">The floating view to display/interact with.</param>
            <param name="position">Specifies how to position the <paramref name="view"/> relative to the parent and its own
            measured size.</param>
        </member>
        <member name="P:StardewUI.Layout.FloatingElement.Position">
            <summary>
            The element's defined position.
            </summary>
        </member>
        <member name="P:StardewUI.Layout.FloatingElement.View">
            <summary>
            The view to display within this element.
            </summary>
        </member>
        <member name="M:StardewUI.Layout.FloatingElement.AsViewChild">
            <summary>
            Creates a <see cref="T:StardewUI.ViewChild"/> with the floating element's view and current position.
            </summary>
            <remarks>
            The result can generally be used as if it were any other non-floating element, e.g. for dispatching clicks,
            focus searches and other events.
            </remarks>
            <returns>The current element represented as a <see cref="T:StardewUI.ViewChild"/>.</returns>
        </member>
        <member name="M:StardewUI.Layout.FloatingElement.Draw(StardewUI.Graphics.ISpriteBatch)">
            <summary>
            Draws the element at its current position.
            </summary>
            <param name="spriteBatch">Sprite batch to hold the drawing output.</param>
        </member>
        <member name="M:StardewUI.Layout.FloatingElement.Equals(StardewUI.Layout.FloatingElement)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Layout.FloatingElement.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Layout.FloatingElement.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Layout.FloatingElement.MeasureAndPosition(StardewUI.IView,System.Boolean)">
            <summary>
            Measures the view's content and repositions the entire floating element if necessary.
            </summary>
            <param name="parentView">The view whose <see cref="P:StardewUI.View.FloatingElements"/> this element belongs to. Required
            for repositioning when the layout has changed.</param>
            <param name="wasParentDirty">Whether this measurement is being done because the parent's layout already changed
            and therefore a reposition is always required (<c>true</c>), or whether to reposition only if the floating
            element's internal layout has changed (<c>false</c>).</param>
        </member>
        <member name="T:StardewUI.Layout.FloatingPosition">
            <summary>
            Describes the position of a <see cref="T:StardewUI.Layout.FloatingElement"/>.
            </summary>
            <param name="offsetSelector">Calculates the position offset (relative to the parent) of the floating view. Takes the
            measured floating view size, and then the parent size, as arguments.</param>
        </member>
        <member name="M:StardewUI.Layout.FloatingPosition.#ctor(System.Func{Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2})">
            <summary>
            Describes the position of a <see cref="T:StardewUI.Layout.FloatingElement"/>.
            </summary>
            <param name="offsetSelector">Calculates the position offset (relative to the parent) of the floating view. Takes the
            measured floating view size, and then the parent size, as arguments.</param>
        </member>
        <member name="F:StardewUI.Layout.FloatingPosition.AboveParent">
            <summary>
            Positions the floating element immediately above the parent view, so that its bottom edge is flush with the
            parent's top edge.
            </summary>
        </member>
        <member name="F:StardewUI.Layout.FloatingPosition.AfterParent">
            <summary>
            Positions the floating element immediately to the right of (after) the parent view, so that its left edge is
            flush with the parent's right edge.
            </summary>
        </member>
        <member name="F:StardewUI.Layout.FloatingPosition.BeforeParent">
            <summary>
            Positions the floating element immediately to the left of (before) the parent view, so that its right edge is
            flush with the parent's left edge.
            </summary>
        </member>
        <member name="F:StardewUI.Layout.FloatingPosition.BelowParent">
            <summary>
            Positions the floating element immediately below the parent view, so that its top edge is flush with the
            parent's bottom edge.
            </summary>
        </member>
        <member name="M:StardewUI.Layout.FloatingPosition.Parse(System.String)">
            <summary>
            Parses a <see cref="T:StardewUI.Layout.FloatingPosition"/> from its string representation.
            </summary>
            <param name="text">The string value to parse.</param>
            <returns>The parsed position.</returns>
            <exception cref="T:System.FormatException">Thrown when the <paramref name="text"/> is not in a valid format.</exception>
        </member>
        <member name="M:StardewUI.Layout.FloatingPosition.TryParse(System.String,StardewUI.Layout.FloatingPosition@)">
            <summary>
            Attempts to parse a <see cref="T:StardewUI.Layout.FloatingPosition"/> from its string representation.
            </summary>
            <param name="text">The string value to parse.</param>
            <param name="result">If the method returns <c>true</c>, holds the parsed position; otherwise
            <c>null</c>.</param>
            <returns><c>true</c> if the <paramref name="text"/> was successfully parsed into a position; <c>false</c> if the
            input was not in a valid format.</returns>
        </member>
        <member name="M:StardewUI.Layout.FloatingPosition.GetOffset(StardewUI.IView,StardewUI.IView)">
            <summary>
            Calculates the final position of the floating view.
            </summary>
            <param name="view">The floating view to position.</param>
            <param name="parentView">The parent relative to which the floating view is being positioned.</param>
            <returns>The final position where the <paramref name="view"/> should be drawn.</returns>
        </member>
        <member name="M:StardewUI.Layout.FloatingPosition.GetOffset(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Calculates the relative origin position of a floating view based on its size and the size of its parent.
            </summary>
            <param name="viewSize">The size of the floating view.</param>
            <param name="parentViewSize">The size of the parent against which the floating element is positioned.</param>
            <returns>The final position where the floating element should be drawn.</returns>
        </member>
        <member name="T:StardewUI.Layout.IFloatContainer">
            <summary>
            Provides access to a UI element's floating elements.
            </summary>
            <remarks>
            Every subclass of <see cref="T:StardewUI.View"/> has built-in behavior to hold, track, layout and display floating elements, but
            some custom <see cref="T:StardewUI.IView"/> implementations (including <see cref="T:StardewUI.Widgets.DecoratorView"/> subclasses) may not,
            and must implement the interface themselves if they wish to support floats.
            </remarks>
        </member>
        <member name="P:StardewUI.Layout.IFloatContainer.FloatingElements">
            <summary>
            The floating elements to display relative to this view.
            </summary>
        </member>
        <member name="T:StardewUI.Layout.IOffsettable`1">
            <summary>
            Provides a method to clone the current instance with an offset applied.
            </summary>
            <typeparam name="T">The output type; should be the same as the implementing class.</typeparam>
        </member>
        <member name="M:StardewUI.Layout.IOffsettable`1.Offset(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a clone of this instance with an offset applied to its position.
            </summary>
            <param name="distance">The offset distance.</param>
        </member>
        <member name="T:StardewUI.Layout.OffsettableExtensions">
            <summary>
            Extensions for the <see cref="T:StardewUI.Layout.IOffsettable`1"/> interface.
            </summary>
        </member>
        <member name="M:StardewUI.Layout.OffsettableExtensions.Clone``1(``0)">
            <summary>
            Clones an <see cref="T:StardewUI.Layout.IOffsettable`1"/>.
            </summary>
            <remarks>
            Since every <see cref="M:StardewUI.Layout.IOffsettable`1.Offset(Microsoft.Xna.Framework.Vector2)"/> is implicitly a clone, we can perform an "explicit" clone by
            providing a zero offset.
            </remarks>
            <typeparam name="T">The source/output type.</typeparam>
            <param name="instance">The instance to clone.</param>
            <returns>A copy of the <paramref name="instance"/>.</returns>
        </member>
        <member name="T:StardewUI.Layout.IPageable">
            <summary>
            Signals that an <see cref="T:StardewUI.IView"/> implements paging controls.
            </summary>
            <remarks>
            Paging controls are a gamepad function. While next/previous arrows are usually clickable and have their own
            navigation logic, controller users generally should be able to use the shoulder buttons to navigate pages, which
            this interface enables.
            </remarks>
        </member>
        <member name="M:StardewUI.Layout.IPageable.NextPage">
            <summary>
            Advance to the next page, within the current tab.
            </summary>
            <returns><c>true</c> if any navigation was performed; <c>false</c> if there are no more pages.</returns>
        </member>
        <member name="M:StardewUI.Layout.IPageable.PreviousPage">
            <summary>
            Advance to the previous page, within the current tab.
            </summary>
            <returns><c>true</c> if any navigation was performed; <c>false</c> if there are no more pages.</returns>
        </member>
        <member name="T:StardewUI.Layout.ITabbable">
            <summary>
            Signals that an <see cref="T:StardewUI.IView"/> implements tab controls.
            </summary>
            <remarks>
            Tab controls are a gamepad function. While tabs are usually clickable and have their own navigation logic,
            controller users should be able to use the trigger buttons to navigate tabs, which this interface enables.
            </remarks>
        </member>
        <member name="M:StardewUI.Layout.ITabbable.NextTab">
            <summary>
            Advance to the next top-level tab.
            </summary>
            <returns><c>true</c> if any navigation was performed; <c>false</c> if there are no more tabs.</returns>
        </member>
        <member name="M:StardewUI.Layout.ITabbable.PreviousTab">
            <summary>
            Advance to the previous top-level tab.
            </summary>
            <returns><c>true</c> if any navigation was performed; <c>false</c> if there are no more tabs.</returns>
        </member>
        <member name="T:StardewUI.Layout.LayoutParameters">
            <summary>
            Layout parameters for an <see cref="T:StardewUI.IView"/>.
            </summary>
        </member>
        <member name="M:StardewUI.Layout.LayoutParameters.AutoRow">
            <summary>
            Creates a <see cref="T:StardewUI.Layout.LayoutParameters"/> that stretches to the available horizontal width, fits the content
            height, and has no other constraints. Typically used for rows in a vertical layout.
            </summary>
            <returns></returns>
        </member>
        <member name="M:StardewUI.Layout.LayoutParameters.Fill">
            <summary>
            Creates a <see cref="T:StardewUI.Layout.LayoutParameters"/> that stretches to the full available width and height.
            </summary>
            <returns></returns>
        </member>
        <member name="M:StardewUI.Layout.LayoutParameters.FitContent">
            <summary>
            Creates a <see cref="T:StardewUI.Layout.LayoutParameters"/> that tracks content width and height, and has no other constraints.
            </summary>
        </member>
        <member name="M:StardewUI.Layout.LayoutParameters.FixedSize(Microsoft.Xna.Framework.Point)">
            <summary>
            Creates a <see cref="T:StardewUI.Layout.LayoutParameters"/> with fixed dimensions, and no other constraints.
            </summary>
            <param name="size">The layout size, in pixels.</param>
        </member>
        <member name="M:StardewUI.Layout.LayoutParameters.FixedSize(System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:StardewUI.Layout.LayoutParameters"/> with fixed dimensions, and no other constraints.
            </summary>
            <param name="width">The layout width, in pixels.</param>
            <param name="height">The layout height, in pixels.</param>
        </member>
        <member name="M:StardewUI.Layout.LayoutParameters.#ctor">
            <summary>
            Initializes a new <see cref="T:StardewUI.Layout.LayoutParameters"/> with default layout settings.
            </summary>
        </member>
        <member name="P:StardewUI.Layout.LayoutParameters.Width">
            <summary>
            The horizontal width/layout method.
            </summary>
        </member>
        <member name="P:StardewUI.Layout.LayoutParameters.Height">
            <summary>
            The vertical height/layout method.
            </summary>
        </member>
        <member name="P:StardewUI.Layout.LayoutParameters.MaxWidth">
            <summary>
            Maximum width allowed.
            </summary>
            <remarks>
            If specified, the <see cref="F:Microsoft.Xna.Framework.Vector2.X"/> component of a view's content size should never exceed this value,
            regardless of how the <see cref="P:StardewUI.Layout.LayoutParameters.Width"/> is configured.
            </remarks>
        </member>
        <member name="P:StardewUI.Layout.LayoutParameters.MaxHeight">
            <summary>
            Maximum height allowed.
            </summary>
            <remarks>
            If specified, the <see cref="F:Microsoft.Xna.Framework.Vector2.Y"/> component of a view's content size should never exceed this value,
            regardless of how the <see cref="P:StardewUI.Layout.LayoutParameters.Height"/> is configured.
            </remarks>
        </member>
        <member name="P:StardewUI.Layout.LayoutParameters.MinWidth">
            <summary>
            Minimum width to occupy.
            </summary>
            <remarks>
            If specified, the <see cref="F:Microsoft.Xna.Framework.Vector2.X"/> component of a view's content size will always be at least this value,
            regardless of how the <see cref="P:StardewUI.Layout.LayoutParameters.Width"/> is configured. Typically, minimum sizes are only used with
            <see cref="F:StardewUI.Layout.LengthType.Content"/> if there might be very little content. If a <see cref="P:StardewUI.Layout.LayoutParameters.MaxWidth"/> is also
            specified and is smaller than the <c>MinWidth</c>, then <c>MaxWidth</c> takes precedence.
            </remarks>
        </member>
        <member name="P:StardewUI.Layout.LayoutParameters.MinHeight">
            <summary>
            Minimum height to occupy.
            </summary>
            <remarks>
            If specified, the <see cref="F:Microsoft.Xna.Framework.Vector2.Y"/> component of a view's content size will always be at least this value,
            regardless of how the <see cref="P:StardewUI.Layout.LayoutParameters.Height"/> is configured. Typically, minimum sizes are only used with
            <see cref="F:StardewUI.Layout.LengthType.Content"/> if there might be very little content. If a <see cref="P:StardewUI.Layout.LayoutParameters.MaxHeight"/> is also
            specified and is smaller than the <c>MinHeight</c>, then <c>MaxHeight</c> takes precedence.
            </remarks>
        </member>
        <member name="M:StardewUI.Layout.LayoutParameters.Equals(System.Object)">
            <inheritdoc/>
            <remarks>
            Overrides the default implementation to avoid using reflection on every frame during dirty checks.
            </remarks>
        </member>
        <member name="M:StardewUI.Layout.LayoutParameters.Equals(StardewUI.Layout.LayoutParameters)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Layout.LayoutParameters.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Layout.LayoutParameters.GetLimits(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Determines the effective content size limits.
            </summary>
            <remarks>
            <para>
            Limits are not the same as the actual size coming from a <see cref="M:StardewUI.Layout.LayoutParameters.Resolve(Microsoft.Xna.Framework.Vector2,System.Func{Microsoft.Xna.Framework.Vector2})"/>; they provide a maximum width
            and/or height in the event that one or both dimensions are set to <see cref="F:StardewUI.Layout.LengthType.Content"/>. In these
            cases, the caller usually wants the "constraints" - e.g. a text block with fixed width but variable height needs
            to know that width before it can determine the actual height.
            </para>
            <para>
            Implementations of <see cref="T:StardewUI.View"/> will typically obtain the limits in their <see cref="M:StardewUI.View.OnMeasure(Microsoft.Xna.Framework.Vector2)"/>
             method in order to perform internal/child layout, and determine the content size for <see cref="M:StardewUI.Layout.LayoutParameters.Resolve(Microsoft.Xna.Framework.Vector2,System.Func{Microsoft.Xna.Framework.Vector2})"/>.
            </para>
            </remarks>
            <param name="availableSize">The available size in the container/parent.</param>
            <returns>The size (equal to or smaller than <paramref name="availableSize"/>) that can be allocated to
            content.</returns>
        </member>
        <member name="M:StardewUI.Layout.LayoutParameters.Resolve(Microsoft.Xna.Framework.Vector2,System.Func{Microsoft.Xna.Framework.Vector2})">
            <summary>
            Resolves the actual size for the current <see cref="T:StardewUI.Layout.LayoutParameters"/>.
            </summary>
            <param name="availableSize">The available size in the container/parent.</param>
            <param name="getContentSize">Function to compute the inner content size based on limits obtained from
            <see cref="M:StardewUI.Layout.LayoutParameters.GetLimits(Microsoft.Xna.Framework.Vector2)"/>; will only be invoked if it is required for the current layout configuration, i.e. if
            one or both dimensions are set to fit content.</param>
            <returns></returns>
        </member>
        <member name="M:StardewUI.Layout.LayoutParameters.ToString">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Layout.LayoutParameters.op_Equality(StardewUI.Layout.LayoutParameters,StardewUI.Layout.LayoutParameters)">
            <summary>
            Compares two <see cref="T:StardewUI.Layout.LayoutParameters"/> values for equality.
            </summary>
            <param name="left">The first value.</param>
            <param name="right">The second value.</param>
            <returns><c>true</c> if <paramref name="left"/> and <paramref name="right"/> are the same layout, otherwise
            <c>false</c>.</returns>
        </member>
        <member name="M:StardewUI.Layout.LayoutParameters.op_Inequality(StardewUI.Layout.LayoutParameters,StardewUI.Layout.LayoutParameters)">
            <summary>
            Compares two <see cref="T:StardewUI.Layout.LayoutParameters"/> values for inequality.
            </summary>
            <param name="left">The first value.</param>
            <param name="right">The second value.</param>
            <returns><c>true</c> if <paramref name="left"/> and <paramref name="right"/> are different layouts, otherwise
            <c>false</c>.</returns>
        </member>
        <member name="T:StardewUI.Layout.Length">
            <summary>
            Specifies how to calculate the length of a single dimension (width or height).
            </summary>
            <param name="Type">Specifies how to interpret the <see cref="P:StardewUI.Layout.Length.Value"/>.</param>
            <param name="Value">The dimension value, with behavior determined by <see cref="P:StardewUI.Layout.Length.Type"/>.</param>
        </member>
        <member name="M:StardewUI.Layout.Length.#ctor(StardewUI.Layout.LengthType,System.Single)">
            <summary>
            Specifies how to calculate the length of a single dimension (width or height).
            </summary>
            <param name="Type">Specifies how to interpret the <see cref="P:StardewUI.Layout.Length.Value"/>.</param>
            <param name="Value">The dimension value, with behavior determined by <see cref="P:StardewUI.Layout.Length.Type"/>.</param>
        </member>
        <member name="P:StardewUI.Layout.Length.Type">
            <summary>Specifies how to interpret the <see cref="P:StardewUI.Layout.Length.Value"/>.</summary>
        </member>
        <member name="P:StardewUI.Layout.Length.Value">
            <summary>The dimension value, with behavior determined by <see cref="P:StardewUI.Layout.Length.Type"/>.</summary>
        </member>
        <member name="M:StardewUI.Layout.Length.Content">
            <summary>
            Creates a new <see cref="T:StardewUI.Layout.Length"/> having <see cref="F:StardewUI.Layout.LengthType.Content"/>.
            </summary>
        </member>
        <member name="M:StardewUI.Layout.Length.Parse(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a <see cref="T:StardewUI.Layout.Length"/> from its string representation.
            </summary>
            <param name="value">The string representation of the <see cref="T:StardewUI.Layout.Length"/>.</param>
            <returns>The parsed <see cref="T:StardewUI.Layout.Length"/>.</returns>
            <exception cref="T:System.FormatException">Thrown when <paramref name="value"/> is not in a recognized
            format.</exception>
        </member>
        <member name="M:StardewUI.Layout.Length.Parse(System.String)">
            <inheritdoc cref="M:StardewUI.Layout.Length.Parse(System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:StardewUI.Layout.Length.Percent(System.Single)">
            <summary>
            Creates a new <see cref="T:StardewUI.Layout.Length"/> having <see cref="F:StardewUI.Layout.LengthType.Percent"/> and the specified percent size.
            </summary>
            <param name="value">The length in 100-based percent units (e.g. <c>50.0</c> is 50%).</param>
        </member>
        <member name="M:StardewUI.Layout.Length.Px(System.Single)">
            <summary>
            Creates a new <see cref="T:StardewUI.Layout.Length"/> having <see cref="F:StardewUI.Layout.LengthType.Px"/> and the specified pixel size.
            </summary>
            <param name="value">The length in pixels.</param>
        </member>
        <member name="M:StardewUI.Layout.Length.Stretch">
            <summary>
            Creates a new <see cref="T:StardewUI.Layout.Length"/> having <see cref="F:StardewUI.Layout.LengthType.Stretch"/>.
            </summary>
        </member>
        <member name="M:StardewUI.Layout.Length.Resolve(System.Single,System.Func{System.Single})">
            <summary>
            Resolves an actual (pixel) length.
            </summary>
            <remarks>
            <para>
            This is a convenience method for common layout scenarios, where content length is relatively simple to compute.
            Its use is optional; complex widgets can use any means they prefer to compute <see cref="P:StardewUI.View.ContentSize"/>.
            </para>
            <para>
            The result is intentionally not constrained to <paramref name="availableLength"/>, which is only used for the
            <see cref="F:StardewUI.Layout.LengthType.Stretch"/> method. This allows callers to check if the bounds were exceeded (e.g. to
            render a scroll bar, ellipsis, etc.) before clamping it.
            </para>
            </remarks>
            <param name="availableLength">The remaining space available.</param>
            <param name="getContentLength">A function to get the length of inner content. Will not be called unless the
            <see cref="T:StardewUI.Layout.LengthType"/> requires it.</param>
            <returns></returns>
        </member>
        <member name="M:StardewUI.Layout.Length.ToString">
            <inheritdoc />
        </member>
        <member name="T:StardewUI.Layout.LengthType">
            <summary>
            Types of length calculation available for a <see cref="T:StardewUI.Layout.Length"/>.
            </summary>
            <remarks>
            For all types, content may overflow or be clipped if the available size is not large enough.
            </remarks>
        </member>
        <member name="F:StardewUI.Layout.LengthType.Content">
            <summary>
            Ignore the specified <see cref="P:StardewUI.Layout.Length.Value"/> and use a value just high enough to fit all content.
            </summary>
        </member>
        <member name="F:StardewUI.Layout.LengthType.Px">
            <summary>
            Use the exact <see cref="P:StardewUI.Layout.Length.Value"/> specified, in pixels.
            </summary>
        </member>
        <member name="F:StardewUI.Layout.LengthType.Percent">
            <summary>
            Use the specified <see cref="P:StardewUI.Layout.Length.Value"/> as a percentage of the available width/height.
            </summary>
        </member>
        <member name="F:StardewUI.Layout.LengthType.Stretch">
            <summary>
            Ignore the specified <see cref="P:StardewUI.Layout.Length.Value"/> and stretch to the full available width/height.
            </summary>
        </member>
        <member name="T:StardewUI.Layout.NineGridPlacement">
            <summary>
            Model for content placement along a nine-segment grid, i.e. all possible combinations of horizontal and vertical
            <see cref="T:StardewUI.Layout.Alignment"/>.
            </summary>
            <param name="HorizontalAlignment">Content alignment along the horizontal axis.</param>
            <param name="VerticalAlignment">Content alignment along the vertical axis.</param>
            <param name="Offset">Absolute axis-independent pixel offset.</param>
        </member>
        <member name="M:StardewUI.Layout.NineGridPlacement.#ctor(StardewUI.Layout.Alignment,StardewUI.Layout.Alignment,Microsoft.Xna.Framework.Point)">
            <summary>
            Model for content placement along a nine-segment grid, i.e. all possible combinations of horizontal and vertical
            <see cref="T:StardewUI.Layout.Alignment"/>.
            </summary>
            <param name="HorizontalAlignment">Content alignment along the horizontal axis.</param>
            <param name="VerticalAlignment">Content alignment along the vertical axis.</param>
            <param name="Offset">Absolute axis-independent pixel offset.</param>
        </member>
        <member name="P:StardewUI.Layout.NineGridPlacement.HorizontalAlignment">
            <summary>Content alignment along the horizontal axis.</summary>
        </member>
        <member name="P:StardewUI.Layout.NineGridPlacement.VerticalAlignment">
            <summary>Content alignment along the vertical axis.</summary>
        </member>
        <member name="P:StardewUI.Layout.NineGridPlacement.Offset">
            <summary>Absolute axis-independent pixel offset.</summary>
        </member>
        <member name="T:StardewUI.Layout.NineGridPlacement.Neighbor">
            <summary>
            Represents an adjacent placement; the result of <see cref="M:StardewUI.Layout.NineGridPlacement.GetNeighbors(System.Boolean)"/>.
            </summary>
            <param name="Direction">The direction of traversal for this neighbor.</param>
            <param name="Placement">The neighboring placement.</param>
        </member>
        <member name="M:StardewUI.Layout.NineGridPlacement.Neighbor.#ctor(StardewUI.Direction,StardewUI.Layout.NineGridPlacement)">
            <summary>
            Represents an adjacent placement; the result of <see cref="M:StardewUI.Layout.NineGridPlacement.GetNeighbors(System.Boolean)"/>.
            </summary>
            <param name="Direction">The direction of traversal for this neighbor.</param>
            <param name="Placement">The neighboring placement.</param>
        </member>
        <member name="P:StardewUI.Layout.NineGridPlacement.Neighbor.Direction">
            <summary>The direction of traversal for this neighbor.</summary>
        </member>
        <member name="P:StardewUI.Layout.NineGridPlacement.Neighbor.Placement">
            <summary>The neighboring placement.</summary>
        </member>
        <member name="F:StardewUI.Layout.NineGridPlacement.StandardPlacements">
            <summary>
            All the standard placements with no <see cref="P:StardewUI.Layout.NineGridPlacement.Offset"/>, arranged from bottom-left to top-right.
            </summary>
        </member>
        <member name="M:StardewUI.Layout.NineGridPlacement.AtPosition(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,StardewUI.Layout.Alignment,StardewUI.Layout.Alignment)">
            <summary>
            Gets the <see cref="T:StardewUI.Layout.NineGridPlacement"/> for an alignment pair that resolves to a specified exact position.
            </summary>
            <param name="position">The target position on screen or within the container.</param>
            <param name="size">The size of the viewport or container.</param>
            <param name="horizontalAlignment">The desired horizontal alignment.</param>
            <param name="verticalAlignment">The desired vertical alignment.</param>
            <returns>A <see cref="T:StardewUI.Layout.NineGridPlacement"/> whose <see cref="P:StardewUI.Layout.NineGridPlacement.HorizontalAlignment"/> and
            <see cref="P:StardewUI.Layout.NineGridPlacement.VerticalAlignment"/> match the <paramref name="horizontalAlignment"/> and
            <paramref name="verticalAlignment"/>, respectively, and whose <see cref="M:StardewUI.Layout.NineGridPlacement.GetPosition(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)"/> will resolve to exactly
            the specified <paramref name="position"/>.</returns>
        </member>
        <member name="M:StardewUI.Layout.NineGridPlacement.Parse(System.String)">
            <summary>
            Parses a <see cref="T:StardewUI.Layout.NineGridPlacement"/> from its string representation.
            </summary>
            <param name="value">The string value to parse.</param>
            <returns>The parsed placement.</returns>
            <exception cref="T:System.FormatException">Thrown when the <paramref name="value"/> is not in a valid format.</exception>
        </member>
        <member name="M:StardewUI.Layout.NineGridPlacement.TryParse(System.String,StardewUI.Layout.NineGridPlacement@)">
            <summary>
            Attempts to parse a <see cref="T:StardewUI.Layout.NineGridPlacement"/> from its string representation.
            </summary>
            <param name="value">The string value to parse.</param>
            <param name="result">If the method returns <c>true</c>, holds the parsed placement; otherwise
            <c>null</c>.</param>
            <returns><c>true</c> if the <paramref name="value"/> was successfully parsed; <c>false</c> if the input was not
            in a valid format.</returns>
        </member>
        <member name="M:StardewUI.Layout.NineGridPlacement.EqualsIgnoringOffset(StardewUI.Layout.NineGridPlacement)">
            <summary>
            Checks if another <see cref="T:StardewUI.Layout.NineGridPlacement"/> has the same alignments as this one, regardless of offset.
            </summary>
            <param name="other">The instance to compare.</param>
            <returns><c>true</c> if the <paramref name="other"/> instance has the same alignments, otherwise
            <c>false</c>.</returns>
        </member>
        <member name="M:StardewUI.Layout.NineGridPlacement.GetMargin">
            <summary>
            Calculates what margin should be applied to the content container in order to achieve the <see cref="P:StardewUI.Layout.NineGridPlacement.Offset"/>.
            </summary>
            <remarks>
            <para>
            Based on the model of a <see cref="T:StardewUI.Widgets.Panel"/> or <see cref="T:StardewUI.Widgets.Frame"/> whose layout is set to
            <see cref="M:StardewUI.Layout.LayoutParameters.Fill"/> its container and who will adopt the <see cref="P:StardewUI.Layout.NineGridPlacement.HorizontalAlignment"/> and
            <see cref="P:StardewUI.Layout.NineGridPlacement.VerticalAlignment"/> of this placement as its own
            <see cref="P:StardewUI.Widgets.Panel.HorizontalContentAlignment"/> and <see cref="P:StardewUI.Widgets.Panel.VerticalContentAlignment"/>
            (or equivalent for other view types).
            </para>
            <para>
            Depending on the particular alignments, this can apply either positive or negative margin to either the start
            or end axis (or both).
            </para>
            </remarks>
            <returns>The margin required to apply the current <see cref="P:StardewUI.Layout.NineGridPlacement.Offset"/> to a layout container whose content
            alignment matches the current <see cref="P:StardewUI.Layout.NineGridPlacement.HorizontalAlignment"/> and <see cref="P:StardewUI.Layout.NineGridPlacement.VerticalAlignment"/>.</returns>
        </member>
        <member name="M:StardewUI.Layout.NineGridPlacement.GetNeighbors(System.Boolean)">
            <summary>
            Gets the <see cref="T:StardewUI.Layout.NineGridPlacement"/>s that neighbor the current placement, i.e. are reachable in a single
            <see cref="M:StardewUI.Layout.NineGridPlacement.Snap(StardewUI.Direction,System.Boolean)"/>.
            </summary>
            <param name="avoidMiddle">Whether to avoid the exact center, i.e. having both <see cref="P:StardewUI.Layout.NineGridPlacement.HorizontalAlignment"/>
            and <see cref="P:StardewUI.Layout.NineGridPlacement.VerticalAlignment"/> be <see cref="F:StardewUI.Layout.Alignment.Middle"/>. This is often used for positioning HUD
            elements which typically are not useful to show in the middle of the screen, and the positioning UI may want to
            use that space for button prompts instead.</param>
        </member>
        <member name="M:StardewUI.Layout.NineGridPlacement.GetPosition(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Computes the position of some content within its container bounds.
            </summary>
            <param name="contentSize">Size of the content to be positioned.</param>
            <param name="containerSize">Size of the container in which the content will be positioned.</param>
            <returns>The aligned content position, relative to the container.</returns>
        </member>
        <member name="M:StardewUI.Layout.NineGridPlacement.IsMiddle">
            <summary>
            Checks if this placement is aligned to the exact center of the container, not counting <see cref="P:StardewUI.Layout.NineGridPlacement.Offset"/>.
            </summary>
        </member>
        <member name="M:StardewUI.Layout.NineGridPlacement.Nudge(StardewUI.Direction,System.Int32)">
            <summary>
            Keeps the same alignments, but pushes the content farther in a specific direction.
            </summary>
            <param name="direction">Direction of the additional offset.</param>
            <param name="distance">Pixel distance to offset in the specified <paramref name="direction"/>.</param>
            <returns>A new <see cref="T:StardewUI.Layout.NineGridPlacement"/> whose alignments are the same as the current instance and whose
            <see cref="P:StardewUI.Layout.NineGridPlacement.Offset"/> represents a move from the current offset in the specified <paramref name="direction"/>
            with the specified <paramref name="distance"/>.</returns>
        </member>
        <member name="M:StardewUI.Layout.NineGridPlacement.Snap(StardewUI.Direction,System.Boolean)">
            <summary>
            Snaps to an adjacent grid cell.
            </summary>
            <remarks>
            Causes the <see cref="P:StardewUI.Layout.NineGridPlacement.Offset"/> to be reset for the newly-created placement.
            </remarks>
            <param name="direction">Direction in which to move.</param>
            <param name="avoidMiddle">Whether to avoid the exact center, i.e. having both <see cref="P:StardewUI.Layout.NineGridPlacement.HorizontalAlignment"/>
            and <see cref="P:StardewUI.Layout.NineGridPlacement.VerticalAlignment"/> be <see cref="F:StardewUI.Layout.Alignment.Middle"/>. This is often used for positioning HUD
            elements which typically are not useful to show in the middle of the screen, and the positioning UI may want to
            use that space for button prompts instead.</param>
            <returns>A new <see cref="T:StardewUI.Layout.NineGridPlacement"/> representing the adjacent cell in the specified
            <paramref name="direction"/>, or <c>null</c> if there is no adjacent cell (e.g. trying to snap
            <see cref="F:StardewUI.Direction.West"/> from a placement that is already at the horizontal <see cref="F:StardewUI.Layout.Alignment.Start"/>).
            </returns>
        </member>
        <member name="T:StardewUI.Layout.Orientation">
            <summary>
            Available orientation directions for views such as <see cref="T:StardewUI.Widgets.Lane"/>.
            </summary>
        </member>
        <member name="F:StardewUI.Layout.Orientation.Horizontal">
            <summary>
            Content flows in the horizontal direction (generally, left to right).
            </summary>
        </member>
        <member name="F:StardewUI.Layout.Orientation.Vertical">
            <summary>
            Content flows in the vertical direction (generally, top to bottom).
            </summary>
        </member>
        <member name="T:StardewUI.Layout.OrientationExtensions">
            <summary>
            Helpers for working with <see cref="T:StardewUI.Layout.Orientation"/>.
            </summary>
        </member>
        <member name="M:StardewUI.Layout.OrientationExtensions.CreateVector(StardewUI.Layout.Orientation,System.Single)">
            <summary>
            Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> with the oriented dimension set to a specified length and the other
            dimension set to zero.
            </summary>
            <param name="orientation">The orientation.</param>
            <param name="length">The length along the orientation axis.</param>
            <returns>A new <see cref="T:Microsoft.Xna.Framework.Vector2"/> whose length along the <paramref name="orientation"/> axis is
            <paramref name="length"/>.</returns>
        </member>
        <member name="M:StardewUI.Layout.OrientationExtensions.Get(StardewUI.Layout.Orientation,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Gets the component of a vector along the orientation's axis.
            </summary>
            <param name="orientation">The orientation.</param>
            <param name="vec">Any vector value.</param>
            <returns>The vector's <see cref="F:Microsoft.Xna.Framework.Vector2.X"/> component if <see cref="F:StardewUI.Layout.Orientation.Horizontal"/>, or
            <see cref="F:Microsoft.Xna.Framework.Vector2.Y"/> if <see cref="F:StardewUI.Layout.Orientation.Vertical"/>.</returns>
        </member>
        <member name="M:StardewUI.Layout.OrientationExtensions.Length(StardewUI.Layout.Orientation,StardewUI.Layout.LayoutParameters)">
            <summary>
            Gets the dimension setting of a layout along the orientation's axis.
            </summary>
            <param name="orientation">The orientation.</param>
            <param name="layout">Layout parameters to extract from.</param>
            <returns>The <see cref="P:StardewUI.Layout.LayoutParameters.Width"/> of the specified <paramref name="layout"/> if the orientation
            is <see cref="F:StardewUI.Layout.Orientation.Horizontal"/>; <see cref="P:StardewUI.Layout.LayoutParameters.Height"/> if
            <see cref="F:StardewUI.Layout.Orientation.Vertical"/>.</returns>
        </member>
        <member name="M:StardewUI.Layout.OrientationExtensions.Set(StardewUI.Layout.Orientation,Microsoft.Xna.Framework.Vector2@,System.Single)">
            <summary>
            Sets the component of a vector corresponding to the orientation's axis.
            </summary>
            <param name="orientation">The orientation.</param>
            <param name="vec">Any vector value.</param>
            <param name="value">The new value for the specified axis.</param>
        </member>
        <member name="M:StardewUI.Layout.OrientationExtensions.Swap(StardewUI.Layout.Orientation)">
            <summary>
            Gets the opposite/perpendicular orientation to a given orientation.
            </summary>
            <param name="orientation">The orientation.</param>
        </member>
        <member name="M:StardewUI.Layout.OrientationExtensions.Update(StardewUI.Layout.Orientation,Microsoft.Xna.Framework.Vector2@,System.Func{System.Single,System.Single})">
             <summary>
            
             </summary>
             <param name="orientation">The orientation.</param>
             <param name="vec">Any vector value.</param>
             <param name="select">A function that takes the previous value and returns the updated value.</param>
             <returns>The value after update.</returns>
        </member>
        <member name="T:StardewUI.Layout.Visibility">
            <summary>
            Controls the visibility of an <see cref="T:StardewUI.IView"/>.
            </summary>
        </member>
        <member name="F:StardewUI.Layout.Visibility.Visible">
            <summary>
            The view is visible.
            </summary>
        </member>
        <member name="F:StardewUI.Layout.Visibility.Hidden">
            <summary>
            The view is hidden.
            </summary>
            <remarks>
            Hidden views still participate in layout, but are not actually drawn. In a lane, grid, etc., there will be an
            empty space where the view would otherwise appear.
            </remarks>
        </member>
        <member name="M:StardewUI.Logger.Log(System.String,StardewModdingAPI.LogLevel)">
            <inheritdoc cref="M:StardewModdingAPI.IMonitor.Log(System.String,StardewModdingAPI.LogLevel)"/>
        </member>
        <member name="M:StardewUI.Logger.LogOnce(System.String,StardewModdingAPI.LogLevel)">
            <inheritdoc cref="M:StardewModdingAPI.IMonitor.LogOnce(System.String,StardewModdingAPI.LogLevel)"/>
        </member>
        <member name="T:StardewUI.MenuActivationMode">
            <summary>
            Available behaviors for opening a <see cref="T:StardewUI.ViewMenu"/>.
            </summary>
        </member>
        <member name="F:StardewUI.MenuActivationMode.Standalone">
            <summary>
            Opens the menu as standalone, replacing any previously-open menu and all of its descendants.
            </summary>
        </member>
        <member name="F:StardewUI.MenuActivationMode.Child">
            <summary>
            Opens the menu as a child of the frontmost game menu that is already active.
            </summary>
            <remarks>
            If no other menu is active, has the same behavior as <see cref="F:StardewUI.MenuActivationMode.Standalone"/>.
            </remarks>
        </member>
        <member name="F:StardewUI.MenuActivationMode.Sibling">
            <summary>
            Replaces the frontmost game menu that is already active, but keeps all of its ancestors.
            </summary>
            <remarks>
            If no other menu is active, or if the active menu is also the only menu (has no parent), then this has the
            same behavior as <see cref="F:StardewUI.MenuActivationMode.Standalone"/>.
            </remarks>
        </member>
        <member name="T:StardewUI.MenuCloseBehavior">
            <summary>
            Available behaviors for closing a <see cref="T:StardewUI.ViewMenu"/>.
            </summary>
        </member>
        <member name="F:StardewUI.MenuCloseBehavior.Default">
            <summary>
            Use the game's default closing logic.
            </summary>
            <remarks>
            Menu button presses (default: E, ESC, and gamepad B) on regular standalone or child menus will close the menu
            implicitly, via the game's update loop, using <see cref="M:StardewValley.Menus.IClickableMenu.exitThisMenu(System.Boolean)"/>. Submenus of the
            <see cref="T:StardewValley.Menus.TitleMenu"/> will close the menu explicitly, using the same method, when the equivalent button press
            is directly handled.
            </remarks>
        </member>
        <member name="F:StardewUI.MenuCloseBehavior.Custom">
            <summary>
            Block the game's default closing logic, but allow the menu to be closed explicitly via its
            <see cref="M:StardewUI.ViewMenu.Close"/> method.
            </summary>
            <remarks>
            Causes <see cref="M:StardewValley.Menus.IClickableMenu.readyToClose"/> to return <c>false</c> at all times so that the game's own
            update loop will never close the menu; instead, the menu's <see cref="M:StardewUI.ViewMenu.CustomClose"/> method will be
            called whenever a menu button is pressed, which becomes fully responsible for the menu's removal.
            </remarks>
        </member>
        <member name="F:StardewUI.MenuCloseBehavior.Disabled">
            <summary>
            Do not allow the menu to be closed by any means.
            </summary>
            <remarks>
            Causes <see cref="M:StardewValley.Menus.IClickableMenu.readyToClose"/> to return <c>false</c> at all times, and ignores requests to
            close the menu via the menu buttons. If the menu is configured with a clickable close button (X image), it will
            be hidden when the menu is in this state.
            </remarks>
        </member>
        <member name="T:StardewUI.Overlays.FullScreenOverlay">
            <summary>
            Base class for an overlay meant to take up the full screen.
            </summary>
        </member>
        <member name="P:StardewUI.Overlays.FullScreenOverlay.Parent">
            <inheritdoc />
            <remarks>
            Full-screen overlays always have a <c>null</c> parent.
            </remarks>
        </member>
        <member name="P:StardewUI.Overlays.FullScreenOverlay.HorizontalAlignment">
            <inheritdoc />
            <remarks>
            Full-screen overlays should generally stretch to the entire viewport dimensions, but are middle-aligned in case
            of a discrepancy.
            </remarks>
        </member>
        <member name="P:StardewUI.Overlays.FullScreenOverlay.HorizontalParentAlignment">
            <inheritdoc />
            <remarks>
            Full-screen overlays should generally stretch to the entire viewport dimensions, but are middle-aligned in case
            of a discrepancy.
            </remarks>
        </member>
        <member name="P:StardewUI.Overlays.FullScreenOverlay.VerticalAlignment">
            <inheritdoc />
            <remarks>
            Full-screen overlays should generally stretch to the entire viewport dimensions, but are middle-aligned in case
            of a discrepancy.
            </remarks>
        </member>
        <member name="P:StardewUI.Overlays.FullScreenOverlay.VerticalParentAlignment">
            <inheritdoc />
            <remarks>
            Full-screen overlays should generally stretch to the entire viewport dimensions, but are middle-aligned in case
            of a discrepancy.
            </remarks>
        </member>
        <member name="P:StardewUI.Overlays.FullScreenOverlay.ParentOffset">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Overlays.FullScreenOverlay.CapturingInput">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Overlays.FullScreenOverlay.DimmingAmount">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.Overlays.FullScreenOverlay.View">
            <inheritdoc />
            <remarks>
            The view provided in a full-screen overlay is a dimming frame with the content view inside.
            </remarks>
        </member>
        <member name="E:StardewUI.Overlays.FullScreenOverlay.Close">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Overlays.FullScreenOverlay.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:StardewUI.Overlays.FullScreenOverlay"/>.
            </summary>
        </member>
        <member name="M:StardewUI.Overlays.FullScreenOverlay.OnClose">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Overlays.FullScreenOverlay.Update(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Overlays.FullScreenOverlay.CreateView">
            <summary>
            Creates the content view that will be displayed as an overlay.
            </summary>
        </member>
        <member name="M:StardewUI.Overlays.FullScreenOverlay.RequireView``1(System.Func{``0})">
            <summary>
            Ensures that the overlay view is created before attempting to access a child view.
            </summary>
            <remarks>
            This is syntactic sugar over accessing <see cref="P:StardewUI.Overlays.FullScreenOverlay.View"/> first to force lazy loading.
            </remarks>
            <typeparam name="TChild">Type of child view to access.</typeparam>
            <param name="viewSelector">Function to retrieve the inner view.</param>
            <returns>The inner view.</returns>
        </member>
        <member name="T:StardewUI.Overlays.IOverlay">
            <summary>
            Definition of an overlay - i.e. a UI element that displays over all other UI.
            </summary>
        </member>
        <member name="E:StardewUI.Overlays.IOverlay.Close">
            <summary>
            Event raised when the overlay is closed - i.e. removed from the current context stack.
            </summary>
        </member>
        <member name="P:StardewUI.Overlays.IOverlay.Parent">
            <summary>
            The parent of this overlay, used for positioning. If not specified, then the overlay will be positioned
            relative to the entire UI viewport.
            </summary>
        </member>
        <member name="P:StardewUI.Overlays.IOverlay.HorizontalAlignment">
            <summary>
            Horizontal alignment of the overlay relative to the <see cref="P:StardewUI.Overlays.IOverlay.Parent"/> edge.
            </summary>
            <remarks>
            Specifies which edge of the overlay is used for positioning, regardless of which parent edge it is aligning to.
            For example, a <see cref="P:StardewUI.Overlays.IOverlay.HorizontalAlignment"/> of <see cref="F:StardewUI.Layout.Alignment.Start"/> and a
            <see cref="P:StardewUI.Overlays.IOverlay.HorizontalParentAlignment"/> of <see cref="F:StardewUI.Layout.Alignment.End"/> means that the overlay's left edge will
            be aligned to the parent's right edge; similarly, if both are set to <see cref="F:StardewUI.Layout.Alignment.Start"/>, then the
            overlay's left edge is aligned to the parent's <em>left</em> edge.
            </remarks>
        </member>
        <member name="P:StardewUI.Overlays.IOverlay.HorizontalParentAlignment">
            <summary>
            Specifies which edge of the <see cref="P:StardewUI.Overlays.IOverlay.Parent"/> (or screen, if no parent is specified) will be used to align
            the overlay edge denoted by its <see cref="P:StardewUI.Overlays.IOverlay.HorizontalAlignment"/>.
            </summary>
            <remarks>
            For example, a <see cref="P:StardewUI.Overlays.IOverlay.HorizontalAlignment"/> of <see cref="F:StardewUI.Layout.Alignment.Start"/> and a
            <see cref="P:StardewUI.Overlays.IOverlay.HorizontalParentAlignment"/> of <see cref="F:StardewUI.Layout.Alignment.End"/> means that the overlay's left edge will
            be aligned to the parent's right edge; similarly, if both are set to <see cref="F:StardewUI.Layout.Alignment.Start"/>, then the
            overlay's left edge is aligned to the parent's <em>left</em> edge.
            </remarks>
        </member>
        <member name="P:StardewUI.Overlays.IOverlay.VerticalAlignment">
            <summary>
            Vertical alignment of the overlay relative to the <see cref="P:StardewUI.Overlays.IOverlay.Parent"/> edge.
            </summary>
            <remarks>
            Specifies which edge of the overlay is used for positioning, regardless of which parent edge it is aligning to.
            For example, a <see cref="P:StardewUI.Overlays.IOverlay.VerticalAlignment"/> of <see cref="F:StardewUI.Layout.Alignment.Start"/> and a
            <see cref="P:StardewUI.Overlays.IOverlay.VerticalParentAlignment"/> of <see cref="F:StardewUI.Layout.Alignment.End"/> means that the overlay's top edge will
            be aligned to the parent's bottom edge; similarly, if both are set to <see cref="F:StardewUI.Layout.Alignment.Start"/>, then the
            overlay's top edge is aligned to the parent's <em>top</em> edge.
            </remarks>
        </member>
        <member name="P:StardewUI.Overlays.IOverlay.VerticalParentAlignment">
            <summary>
            Specifies which edge of the <see cref="P:StardewUI.Overlays.IOverlay.Parent"/> (or screen, if no parent is specified) will be used to align
            the overlay edge denoted by its <see cref="P:StardewUI.Overlays.IOverlay.VerticalAlignment"/>.
            </summary>
            <remarks>
            For example, a <see cref="P:StardewUI.Overlays.IOverlay.VerticalAlignment"/> of <see cref="F:StardewUI.Layout.Alignment.Start"/> and a
            <see cref="P:StardewUI.Overlays.IOverlay.VerticalParentAlignment"/> of <see cref="F:StardewUI.Layout.Alignment.End"/> means that the overlay's top edge will
            be aligned to the parent's bottom edge; similarly, if both are set to <see cref="F:StardewUI.Layout.Alignment.Start"/>, then the
            overlay's top edge is aligned to the parent's <em>top</em> edge.
            </remarks>
        </member>
        <member name="P:StardewUI.Overlays.IOverlay.ParentOffset">
            <summary>
            Additional pixel offset to apply to the overlay's position, after alignments.
            </summary>
        </member>
        <member name="P:StardewUI.Overlays.IOverlay.CapturingInput">
            <summary>
            Whether the overlay wants to capture all keyboard and gamepad inputs, i.e. prevent them from being dispatched
            to the parent menu.
            </summary>
            <remarks>
            This is not necessary to trap focus, which happens automatically; only to capture buttons/keys that would
            normally have a navigation function, like triggers/shoulders for paging, E/Esc/GamepadB for cancellation, etc.
            Overlays that enable capturing should provide their own way for the user to escape using keyboard/gamepad,
            although it is always possible to click the mouse outside the overlay to dismiss it (and implicitly stop the
            capturing).
            </remarks>
        </member>
        <member name="P:StardewUI.Overlays.IOverlay.DimmingAmount">
            <summary>
            Amount to dim whatever is underneath the overlay.
            </summary>
            <remarks>
            This is an alpha value for a black overlay, so the higher value (between 0 and 1) the darker the content
            underneath the overlay. These apply individually to each overlay, so multiple stacked overlays will dim not only
            the underlying main view but also any previous overlays.
            </remarks>
        </member>
        <member name="P:StardewUI.Overlays.IOverlay.View">
            <summary>
            The view to be displayed/interacted with as an overlay.
            </summary>
        </member>
        <member name="M:StardewUI.Overlays.IOverlay.OnClose">
            <summary>
            Runs when the overlay is removed from the active stack.
            </summary>
        </member>
        <member name="M:StardewUI.Overlays.IOverlay.Update(System.TimeSpan)">
            <summary>
            Runs on every game update tick.
            </summary>
            <param name="elapsed">The amount of real time elapsed since the last tick.</param>
        </member>
        <member name="T:StardewUI.Overlays.Overlay">
            <summary>
            A basic overlay with immutable properties.
            </summary>
            <param name="view">The <see cref="P:StardewUI.Overlays.IOverlay.View"/>.</param>
            <param name="parent">The <see cref="P:StardewUI.Overlays.IOverlay.Parent"/>.</param>
            <param name="horizontalAlignment">The <see cref="P:StardewUI.Overlays.IOverlay.HorizontalAlignment"/>.</param>
            <param name="horizontalParentAlignment">The <see cref="P:StardewUI.Overlays.IOverlay.HorizontalParentAlignment"/>.</param>
            <param name="verticalAlignment">The <see cref="P:StardewUI.Overlays.IOverlay.VerticalAlignment"/>.</param>
            <param name="verticalParentAlignment">The <see cref="P:StardewUI.Overlays.IOverlay.VerticalParentAlignment"/>.</param>
            <param name="parentOffset">The <see cref="P:StardewUI.Overlays.IOverlay.ParentOffset"/>.</param>
        </member>
        <member name="M:StardewUI.Overlays.Overlay.#ctor(StardewUI.IView,StardewUI.IView,StardewUI.Layout.Alignment,StardewUI.Layout.Alignment,StardewUI.Layout.Alignment,StardewUI.Layout.Alignment,Microsoft.Xna.Framework.Vector2)">
            <summary>
            A basic overlay with immutable properties.
            </summary>
            <param name="view">The <see cref="P:StardewUI.Overlays.IOverlay.View"/>.</param>
            <param name="parent">The <see cref="P:StardewUI.Overlays.IOverlay.Parent"/>.</param>
            <param name="horizontalAlignment">The <see cref="P:StardewUI.Overlays.IOverlay.HorizontalAlignment"/>.</param>
            <param name="horizontalParentAlignment">The <see cref="P:StardewUI.Overlays.IOverlay.HorizontalParentAlignment"/>.</param>
            <param name="verticalAlignment">The <see cref="P:StardewUI.Overlays.IOverlay.VerticalAlignment"/>.</param>
            <param name="verticalParentAlignment">The <see cref="P:StardewUI.Overlays.IOverlay.VerticalParentAlignment"/>.</param>
            <param name="parentOffset">The <see cref="P:StardewUI.Overlays.IOverlay.ParentOffset"/>.</param>
        </member>
        <member name="E:StardewUI.Overlays.Overlay.Close">
            <summary>
            Raised when the overlay is removed from the active stack.
            </summary>
        </member>
        <member name="M:StardewUI.Overlays.Overlay.Pop">
            <inheritdoc cref="M:StardewUI.Overlays.OverlayContext.Pop"/>.
            <remarks>
            Applies to the ambient <see cref="T:StardewUI.Overlays.OverlayContext"/>, and is ignored if no context is available.
            </remarks>
        </member>
        <member name="M:StardewUI.Overlays.Overlay.Push(StardewUI.Overlays.IOverlay)">
            <summary>
            Pushes an overlay to the front.
            </summary>
            <remarks>
            <para>
            If the specified <paramref name="overlay"/> is already in the stack, then it will be moved from its previous
            position to the front.
            </para>
            <para>
            Applies to the ambient <see cref="T:StardewUI.Overlays.OverlayContext"/>, and is ignored if no context is available.
            </para>
            </remarks>
        </member>
        <member name="M:StardewUI.Overlays.Overlay.Remove(StardewUI.Overlays.IOverlay)">
            <summary>
            Removes a specific overlay from the stack, regardless of its position.
            </summary>
            <remarks>
            <para>
            This is most often invoked by an overlay needing to dismiss itself, e.g. an overlay with an "OK" or "Close"
            button.
            </para>
            <para>
            Applies to the ambient <see cref="T:StardewUI.Overlays.OverlayContext"/>, and is ignored if no context is available.
            </para>
            </remarks>
            <param name="overlay">The overlay to remove.</param>
            <returns><c>true</c> if the <paramref name="overlay"/> was removed; <c>false</c> if it was not active.</returns>
        </member>
        <member name="M:StardewUI.Overlays.Overlay.OnClose">
            <inheritdoc/>
        </member>
        <member name="M:StardewUI.Overlays.Overlay.OnClose(System.Action)">
            <summary>
            Registers an action to be run when the overlay is closed.
            </summary>
            <remarks>
            Typically chained to the constructor when creating a new overlay.
            </remarks>
            <param name="onClose">The action to run on close.</param>
            <returns>The current <see cref="T:StardewUI.Overlays.Overlay"/> instance.</returns>
        </member>
        <member name="P:StardewUI.Overlays.Overlay.Parent">
            <inheritdoc/>
        </member>
        <member name="P:StardewUI.Overlays.Overlay.HorizontalAlignment">
            <inheritdoc/>
        </member>
        <member name="P:StardewUI.Overlays.Overlay.HorizontalParentAlignment">
            <inheritdoc/>
        </member>
        <member name="P:StardewUI.Overlays.Overlay.VerticalAlignment">
            <inheritdoc/>
        </member>
        <member name="P:StardewUI.Overlays.Overlay.VerticalParentAlignment">
            <inheritdoc/>
        </member>
        <member name="P:StardewUI.Overlays.Overlay.ParentOffset">
            <inheritdoc/>
        </member>
        <member name="P:StardewUI.Overlays.Overlay.View">
            <inheritdoc/>
        </member>
        <member name="T:StardewUI.Overlays.OverlayContext">
            <summary>
            The context of an overlay, e.g. the active overlays for a particular menu or other non-overlay UI.
            </summary>
        </member>
        <member name="E:StardewUI.Overlays.OverlayContext.Pushed">
            <summary>
            Event raised when an overlay is pushed to the front.
            </summary>
            <remarks>
            This can either be a new overlay, or an overlay that was farther back and brought forward. After this event, the
            affected overlay will always be the <see cref="P:StardewUI.Overlays.OverlayContext.Front"/>.
            </remarks>
        </member>
        <member name="P:StardewUI.Overlays.OverlayContext.Current">
            <summary>
            The ambient context for the UI root that is currently being displayed or handling events.
            </summary>
        </member>
        <member name="P:StardewUI.Overlays.OverlayContext.Front">
            <summary>
            Gets the overlay at the front of the stack.
            </summary>
        </member>
        <member name="M:StardewUI.Overlays.OverlayContext.BackToFront">
            <summary>
            Iterates the stack from the back/bottom/least-recent overlay to the front/top/most-recent.
            </summary>
        </member>
        <member name="M:StardewUI.Overlays.OverlayContext.FrontToBack">
            <summary>
            Iterates the stack from the front/top/most-recent overlay to the back/bottom/least-recent.
            </summary>
        </member>
        <member name="M:StardewUI.Overlays.OverlayContext.PushContext(StardewUI.Overlays.OverlayContext)">
            <summary>
            Switches to a new context for a given scope.
            </summary>
            <param name="context">The new context.</param>
            <returns>An <see cref="T:System.IDisposable"/> which, when disposed, reverts the <see cref="P:StardewUI.Overlays.OverlayContext.Current"/> context to its
            value before <c>PushContext</c> was called.</returns>
        </member>
        <member name="M:StardewUI.Overlays.OverlayContext.Pop">
            <summary>
            Removes the front-most overlay.
            </summary>
            <returns>The overlay previously at the front, or <c>null</c> if no overlays were active.</returns>
        </member>
        <member name="M:StardewUI.Overlays.OverlayContext.Push(StardewUI.Overlays.IOverlay)">
            <summary>
            Pushes an overlay to the front.
            </summary>
            <remarks>
            If the specified <paramref name="overlay"/> is already in the stack, then it will be moved from its previous
            position to the front.
            </remarks>
            <param name="overlay">The overlay to display on top of the current UI and any other overlays.</param>
        </member>
        <member name="M:StardewUI.Overlays.OverlayContext.Remove(StardewUI.Overlays.IOverlay)">
            <summary>
            Removes a specific overlay from the stack, regardless of its position.
            </summary>
            <remarks>
            This is most often invoked by an overlay needing to dismiss itself, e.g. an overlay with an "OK" or "Close"
            button.
            </remarks>
            <param name="overlay">The overlay to remove.</param>
            <returns><c>true</c> if the <paramref name="overlay"/> was removed; <c>false</c> if it was not active.</returns>
        </member>
        <member name="T:StardewUI.Parsers">
            <summary>
            Utilities for parsing third-party types, generally related to MonoGame/XNA.
            </summary>
        </member>
        <member name="M:StardewUI.Parsers.ParseColor(System.String)">
            <summary>
            Parses a named or hex color as a <see cref="T:Microsoft.Xna.Framework.Color"/>.
            </summary>
            <remarks>
            Supports hex strings of the form <c>#rgb</c>, <c>#rrggbb</c>, or <c>#rrggbbaa</c>, as well as any of the
            MonoGame named color strings like <c>LimeGreen</c>.
            </remarks>
            <param name="value">A string containing a named or hex color.a</param>
            <returns>The parsed color.</returns>
        </member>
        <member name="M:StardewUI.Parsers.ParseRectangle(System.String)">
            <summary>
            Parses a <see cref="T:Microsoft.Xna.Framework.Rectangle"/> value from its comma-separated string representation.
            </summary>
            <remarks>
            This is equivalent to <see cref="T:System.Convert"/> but does not require an instance.
            </remarks>
            <param name="value">String representation of a <see cref="T:Microsoft.Xna.Framework.Rectangle"/>, having 4 comma-separated integer
            values.</param>
            <returns>The parsed <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</returns>
            <exception cref="T:System.FormatException">Thrown when <paramref name="value"/> cannot be parsed.</exception>
        </member>
        <member name="M:StardewUI.Parsers.ParseVector2(System.String)">
            <inheritdoc cref="M:StardewUI.Parsers.ParseVector2(System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:StardewUI.Parsers.ParseVector2(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a <see cref="T:Microsoft.Xna.Framework.Vector2"/> from a comma-separated value pair.
            </summary>
            <param name="value">The string value.</param>
            <returns>The parsed <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</returns>
            <exception cref="T:System.FormatException">Thrown when <paramref name="value"/> is not a valid format.</exception>
        </member>
        <member name="M:StardewUI.Parsers.TryParseColor(System.String,Microsoft.Xna.Framework.Color@)">
            <summary>
            Attempts to parse a named or hex color as a <see cref="T:Microsoft.Xna.Framework.Color"/>.
            </summary>
            <remarks>
            Supports hex strings of the form <c>#rgb</c>, <c>#rrggbb</c>, or <c>#rrggbbaa</c>, as well as any of the
            MonoGame named color strings like <c>LimeGreen</c>.
            </remarks>
            <param name="value">A string containing a named or hex color.a</param>
            <param name="color">The result if successful, otherwise a default <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <returns><c>true</c> if the <paramref name="value"/> was successfully parsed into <paramref name="color"/>;
            <c>false</c> if the parsing was unsuccessful.</returns>
        </member>
        <member name="M:StardewUI.Parsers.TryParseVector2(System.ReadOnlySpan{System.Char},Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Attempts to parse a <see cref="T:Microsoft.Xna.Framework.Vector2"/> from a comma-separated value pair.
            </summary>
            <param name="value">The string value.</param>
            <param name="result">The result if successful, otherwise a default <see cref="T:Microsoft.Xna.Framework.Vector2"/></param>.
            <returns><c>true</c> if the <paramref name="value"/> was successfully parsed into <paramref name="result"/>;
            <c>false</c> if the parsing was unsuccessful.</returns>
        </member>
        <member name="T:StardewUI.Tags">
            <summary>
            Typesafe heterogeneous container for associating arbitrary data with a view or other UI object.
            </summary>
        </member>
        <member name="F:StardewUI.Tags.Empty">
            <summary>
            Empty tags that can be used as a placeholder.
            </summary>
        </member>
        <member name="M:StardewUI.Tags.Create``1(``0)">
            <summary>
            Creates a new <see cref="T:StardewUI.Tags"/> holding a single initial value.
            </summary>
            <typeparam name="T">Type of tag value.</typeparam>
            <param name="value">The tag value.</param>
        </member>
        <member name="M:StardewUI.Tags.Create``2(``0,``1)">
            <summary>
            Creates a new <see cref="T:StardewUI.Tags"/> holding two initial values.
            </summary>
            <typeparam name="T1">Type of the first value.</typeparam>
            <typeparam name="T2">Type of the second value.</typeparam>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
        </member>
        <member name="M:StardewUI.Tags.Create``3(``0,``1,``2)">
            <summary>
            Creates a new <see cref="T:StardewUI.Tags"/> holding three initial values.
            </summary>
            <typeparam name="T1">Type of the first value.</typeparam>
            <typeparam name="T2">Type of the second value.</typeparam>
            <typeparam name="T3">Type of the third value.</typeparam>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <param name="value3">The third value.</param>
            <returns></returns>
        </member>
        <member name="M:StardewUI.Tags.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Tags.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.Tags.Get``1">
            <summary>
            Gets the tag value of the specified type, if one exists.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <returns>The stored value of type <typeparamref name="T"/>, if any; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:StardewUI.Tags.Set``1(``0)">
            <summary>
            Replaces the tag value of the specified type.
            </summary>
            <typeparam name="T">Thee value type.</typeparam>
            <param name="value">The new tag value.</param>
        </member>
        <member name="T:StardewUI.UiViewport">
            <summary>
            Utilities relating to the game's UI viewport.
            </summary>
        </member>
        <member name="M:StardewUI.UiViewport.GetMaxSize">
            <summary>
            Gets the maximum size for the entire viewport.
            </summary>
            <returns>The game's <see cref="F:StardewValley.Game1.uiViewport"/>, constrained to the viewport of the current
            <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/>.</returns>
        </member>
        <member name="T:StardewUI.View">
            <summary>
            Base class for typical widgets wanting to implement <see cref="T:StardewUI.IView"/>.
            </summary>
            <remarks>
            Use of this class isn't required, but provides some useful behaviors so that view types don't need to keep
            re-implementing them, such as a standard <see cref="M:StardewUI.View.Measure(Microsoft.Xna.Framework.Vector2)"/> implementation that skips unnecessary layouts.
            </remarks>
        </member>
        <member name="E:StardewUI.View.ButtonPress">
            <summary>
            Event raised when any button on any input device is pressed.
            </summary>
            <remarks>
            Only the views in the current focus path should receive these events.
            </remarks>
        </member>
        <member name="E:StardewUI.View.ButtonRepeat">
            <summary>
            Event raised when a button is being held while the view is in focus, and has been held long enough since the
            initial <see cref="E:StardewUI.View.ButtonPress"/> or the previous <c>ButtonRepeat</c> to trigger a repeated press.
            </summary>
            <remarks>
            <para>
            Because the game has its own logic to repeat key presses, which would cause <see cref="E:StardewUI.View.ButtonPress"/> to fire
            repeatedly, this event generally applies only to the controller; that is, it exists to allow callers to decide
            whether they want the handler to repeat while the button is held or to only fire when first pressed, providing
            slightly more control than keyboard events whose repetition is up to the whims of the vanilla game.
            </para>
            <para>
            Only the views in the current focus path should receive these events.
            </para>
            </remarks>
        </member>
        <member name="E:StardewUI.View.Click">
            <summary>
            Event raised when the view receives a click.
            </summary>
        </member>
        <member name="E:StardewUI.View.Drag">
            <summary>
            Event raised when the view is being dragged using the mouse.
            </summary>
        </member>
        <member name="E:StardewUI.View.DragEnd">
            <summary>
            Event raised when mouse dragging is stopped, i.e. when the button is released. Always raised after the last
            <see cref="E:StardewUI.View.Drag"/>, and only once per drag operation.
            </summary>
        </member>
        <member name="E:StardewUI.View.DragStart">
            <summary>
            Event raised when mouse dragging is first activated. Always raised before the first <see cref="E:StardewUI.View.Drag"/>, and only
            once per drag operation.
            </summary>
        </member>
        <member name="E:StardewUI.View.LeftClick">
            <summary>
            Event raised when the view receives a click initiated from the left mouse button, or the controller's action
            button (A).
            </summary>
        </member>
        <member name="E:StardewUI.View.PointerEnter">
            <summary>
            Event raised when the pointer enters the view.
            </summary>
        </member>
        <member name="E:StardewUI.View.PointerLeave">
            <summary>
            Event raised when the pointer exits the view.
            </summary>
        </member>
        <member name="E:StardewUI.View.PointerMove">
            <summary>
            Event raised when the pointer moves within the view.
            </summary>
        </member>
        <member name="E:StardewUI.View.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="E:StardewUI.View.RightClick">
            <summary>
            Event raised when the view receives a click initiated from the right mouse button, or the controller's tool-use
            button (X).
            </summary>
        </member>
        <member name="E:StardewUI.View.Wheel">
            <summary>
            Event raised when the scroll wheel moves.
            </summary>
        </member>
        <member name="P:StardewUI.View.IsDrawing">
            <summary>
            Indicates whether a UI-initiated drawing operation is in progress, from any view.
            </summary>
            <remarks>
            This state is primarily used by Framework patches as a way to limit their effective scope and avoid interfering
            with vanilla or 3P draws.
            </remarks>
        </member>
        <member name="P:StardewUI.View.ActualBounds">
            <inheritdoc/>
        </member>
        <member name="P:StardewUI.View.BorderSize">
            <summary>
            The layout size (not edge thickness) of the entire drawn area including the border, i.e. the
            <see cref="P:StardewUI.View.InnerSize"/> plus any borders defined in <see cref="M:StardewUI.View.GetBorderThickness"/>. Does not include the
            <see cref="P:StardewUI.View.Margin"/>.
            </summary>
        </member>
        <member name="P:StardewUI.View.ClipOrigin">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.View.ClipSize">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.View.ContentBounds">
            <inheritdoc/>
        </member>
        <member name="P:StardewUI.View.ContentSize">
            <summary>
            The size of the view's content, which is drawn inside the padding. Subclasses set this in their
            <see cref="M:StardewUI.View.OnMeasure(Microsoft.Xna.Framework.Vector2)"/> method and padding, margins, etc. are handled automatically.
            </summary>
        </member>
        <member name="P:StardewUI.View.Draggable">
            <summary>
            Whether or not this view should fire drag events such as <see cref="E:StardewUI.View.DragStart"/> and <see cref="E:StardewUI.View.Drag"/>.
            </summary>
        </member>
        <member name="P:StardewUI.View.FloatingBounds">
            <inheritdoc/>
        </member>
        <member name="P:StardewUI.View.FloatingElements">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.View.Focusable">
            <summary>
            Whether or not the view should be able to receive focus. Applies only to this specific view, not its children.
            </summary>
            <remarks>
            All views are non-focusable by default and must have their focus enabled explicitly. Subclasses may choose to
            override the default value if they should always be focusable.
            </remarks>
        </member>
        <member name="P:StardewUI.View.InnerSize">
            <summary>
            The size allocated to the entire area inside the border, i.e. <see cref="P:StardewUI.View.ContentSize"/> plus any
            <see cref="P:StardewUI.View.Padding"/>. Does not include border or <see cref="P:StardewUI.View.Margin"/>.
            </summary>
        </member>
        <member name="P:StardewUI.View.IsFocusable">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.View.Layout">
            <summary>
            Layout settings for this view; determines how its dimensions will be computed.
            </summary>
        </member>
        <member name="P:StardewUI.View.Margin">
            <summary>
            Margins (whitespace outside border) for this view.
            </summary>
        </member>
        <member name="P:StardewUI.View.Name">
            <summary>
            Simple name for this view, used in log/debug output; does not affect behavior.
            </summary>
        </member>
        <member name="P:StardewUI.View.Opacity">
            <summary>
            Opacity (alpha level) of the view.
            </summary>
            <remarks>
            Affects this view and all descendants; used to control opacity of an entire control or layout area.
            </remarks>
        </member>
        <member name="P:StardewUI.View.OuterSize">
            <summary>
            The size of the entire area occupied by this view including margins, border and padding.
            </summary>
        </member>
        <member name="P:StardewUI.View.Padding">
            <summary>
            Padding (whitespace inside border) for this view.
            </summary>
        </member>
        <member name="P:StardewUI.View.PointerEventsEnabled">
            <summary>
            Whether this view should receive pointer events like <see cref="E:StardewUI.View.Click"/> or <see cref="E:StardewUI.View.Drag"/>.
            </summary>
            <remarks>
            By default, all views receive pointer events; this may be disabled for views that intentionally overlap other
            views but shouldn't block their input, such as local non-modal overlays.
            </remarks>
        </member>
        <member name="P:StardewUI.View.PointerStyle">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.View.ScrollWithChildren">
            <inheritdoc />
            <summary>
            If set to an axis, specifies that when any child of the view is scrolled into view (using
            <see cref="M:StardewUI.View.ScrollIntoView(System.Collections.Generic.IEnumerable{StardewUI.ViewChild},Microsoft.Xna.Framework.Vector2@)"/>), then this entire view should be scrolled along with it.
            </summary>
        </member>
        <member name="P:StardewUI.View.Tags">
            <summary>
            The user-defined tags for this view.
            </summary>
        </member>
        <member name="P:StardewUI.View.Transform">
            <summary>
            Local transformation to apply to this view, including any children and floating elements.
            </summary>
        </member>
        <member name="P:StardewUI.View.TransformOrigin">
            <inheritdoc />
        </member>
        <member name="P:StardewUI.View.Tooltip">
            <summary>
            Localized tooltip to display on hover, if any.
            </summary>
        </member>
        <member name="P:StardewUI.View.Visibility">
            <summary>
            Visibility for this view.
            </summary>
        </member>
        <member name="P:StardewUI.View.ZIndex">
            <summary>
            Z order for this view within its direct parent. Higher indices draw later (on top).
            </summary>
        </member>
        <member name="P:StardewUI.View.HandlesOpacity">
            <summary>
            Whether the specific view type handles its own opacity.
            </summary>
            <remarks>
            <para>
            Subclasses can override this to provide their own, typically better optimized version of opacity; i.e. a basic
            text or image view could simply multiply its own background/foreground colors without requiring multiple render
            targets to handle the blending.
            </para>
            <para>
            Any <see cref="P:StardewUI.View.FloatingElements"/> will still use the default opacity implementation.
            </para>
            </remarks>
        </member>
        <member name="P:StardewUI.View.LayoutOffset">
            <summary>
            Pixel offset of the view's content, which is applied to all pointer events and child queries.
            </summary>
            <remarks>
            <para>
            A non-zero offset means that the nominal positions of any view children (e.g. as obtained from
            <see cref="M:StardewUI.View.GetChildren(System.Boolean)"/>) are different from their actual drawing positions on screen, for example in the case
            of a <see cref="T:StardewUI.Widgets.ScrollContainer"/> that is not at the default scroll position.
            </para>
            <para>
            If a view will internally shift content in this way without affecting layout, it should update the
            <see cref="P:StardewUI.View.LayoutOffset"/> property to ensure correctness of pointer events and coordinate-related queries such
            as <see cref="M:StardewUI.View.GetLocalChildrenAt(Microsoft.Xna.Framework.Vector2)"/>, <b>instead of</b> attempting to correct for that offset locally.
            </para>
            </remarks>
        </member>
        <member name="P:StardewUI.View.LastAvailableSize">
            <summary>
            The most recent size used in a <see cref="M:StardewUI.View.Measure(Microsoft.Xna.Framework.Vector2)"/> pass. Used for additional dirty checks.
            </summary>
        </member>
        <member name="M:StardewUI.View.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:StardewUI.View"/>.
            </summary>
            <remarks>
            The view's <see cref="P:StardewUI.View.Name"/> will default to the simple name of its most derived <see cref="T:System.Type"/>.
            </remarks>
        </member>
        <member name="M:StardewUI.View.ContainsPoint(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.View.Dispose">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.View.Draw(StardewUI.Graphics.ISpriteBatch)">
            <inheritdoc path="//*[not(self::remarks)]"/>
            <remarks>
            Drawing always happens after the measure pass, so <see cref="P:StardewUI.View.ContentSize"/> should be known and stable at this
            time, as long as the implementation itself is stable.
            </remarks>
        </member>
        <member name="M:StardewUI.View.FocusSearch(Microsoft.Xna.Framework.Vector2,StardewUI.Direction)">
            <inheritdoc path="//*[not(self::remarks)]"/>
            <remarks>
            This will first call <see cref="M:StardewUI.View.FindFocusableDescendant(Microsoft.Xna.Framework.Vector2,StardewUI.Direction)"/> to see if the specific view type wants to implement
            its own focus search. If there is no focusable descendant, then this will return a reference to the current view
            if <see cref="P:StardewUI.View.Focusable"/> is <c>true</c> and the position is <i>not</i> already within the view's bounds -
            meaning, any focusable view can accept focus from any direction, but will not consider itself a result if it is
            already focused (since we are trying to "move" focus).
            </remarks>
        </member>
        <member name="M:StardewUI.View.GetChildAt(Microsoft.Xna.Framework.Vector2,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.View.GetChildPosition(StardewUI.IView)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.View.GetChildren(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.View.GetChildrenAt(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.View.GetDefaultFocusChild">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.View.HasOutOfBoundsContent">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.View.IsDirty">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.View.IsVisible(System.Nullable{Microsoft.Xna.Framework.Vector2})">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.View.Measure(Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.View.OnButtonPress(StardewUI.Events.ButtonEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:StardewUI.View.OnButtonRepeat(StardewUI.Events.ButtonEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:StardewUI.View.OnClick(StardewUI.Events.ClickEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:StardewUI.View.OnDispose">
            <summary>
            Performs additional cleanup when <see cref="M:StardewUI.View.Dispose"/> is called.
            </summary>
            <remarks>
            The default implementation is a stub. Subclasses may override this if they require separate cleanup.
            </remarks>
        </member>
        <member name="M:StardewUI.View.OnDrag(StardewUI.Events.PointerEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:StardewUI.View.OnDrop(StardewUI.Events.PointerEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:StardewUI.View.OnPointerMove(StardewUI.Events.PointerMoveEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:StardewUI.View.OnUpdate(System.TimeSpan)">
            <inheritdoc/>
            <remarks>
            When overriding <see cref="M:StardewUI.View.OnUpdate(System.TimeSpan)"/>, be sure to call <c>base.OnUpdate()</c> to ensure that any view
            children also receive their updates.
            </remarks>
        </member>
        <member name="M:StardewUI.View.OnWheel(StardewUI.Events.WheelEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:StardewUI.View.ScrollIntoView(System.Collections.Generic.IEnumerable{StardewUI.ViewChild},Microsoft.Xna.Framework.Vector2@)">
            <inheritdoc/>
            <remarks>
            The default implementation does no scrolling of its own, only passes the request down to the child and aborts if
            the child returns <c>true</c>. Scrollable views must override this to provide scrolling behavior.
            </remarks>
        </member>
        <member name="M:StardewUI.View.ToString">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.View.FindFocusableDescendant(Microsoft.Xna.Framework.Vector2,StardewUI.Direction)">
            <summary>
            Searches for a focusable child within this view that is reachable in the specified <paramref name="direction"/>,
            and returns a result containing the view and search path if found.
            </summary>
            <param name="contentPosition">The search position, relative to where this view's content starts (after applying
            margin, borders and padding).</param>
            <param name="direction">The search direction.</param>
            <remarks>
            This is the same as <see cref="M:StardewUI.View.FocusSearch(Microsoft.Xna.Framework.Vector2,StardewUI.Direction)"/> but in pre-transformed content coordinates, and does not require
            checking for "self-focus" as <see cref="M:StardewUI.View.FocusSearch(Microsoft.Xna.Framework.Vector2,StardewUI.Direction)"/> already does this. The default implementation simply
            returns <c>null</c> as most views do not have children; subclasses with children must override this.
            </remarks>
        </member>
        <member name="M:StardewUI.View.GetBorderThickness">
            <summary>
            Measures the thickness of each edge of the border, if the view has a border.
            </summary>
            <remarks>
            <para>
            Used only by views that will implement a border via <see cref="M:StardewUI.View.OnDrawBorder(StardewUI.Graphics.ISpriteBatch)"/>. The border thickness is
            considered during layout, and generally treated as additional <see cref="P:StardewUI.View.Padding"/> for the purposes of setting
            allowed content size.
            </para>
            <para>
            Borders usually have a static size, but if the thickness can change, then implementations must account for it in
            their dirty checking (<see cref="M:StardewUI.View.IsContentDirty"/>).
            </para>
            </remarks>
            <returns>The border edge thicknesses.</returns>
        </member>
        <member name="M:StardewUI.View.GetLocalChildren">
            <summary>
            Gets the view's children with positions relative to the content area.
            </summary>
            <remarks>
            <para>
            This has the same signature as <see cref="M:StardewUI.View.GetChildren(System.Boolean)"/> but assumes that coordinates are in the same space as
            those used in <see cref="M:StardewUI.View.OnDrawContent(StardewUI.Graphics.ISpriteBatch)"/>, i.e. not accounting for margin/border/padding. These
            coordinates are automatically adjusted in the <see cref="M:StardewUI.View.GetChildren(System.Boolean)"/> to be relative to the entire view.
            </para>
            <para>
            The default implementation returns an empty sequence. Composite views must override this method in order for
            user interactions to behave correctly.
            </para>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:StardewUI.View.GetLocalChildrenAt(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Searches for all views at a given position relative to the content area.
            </summary>
            <remarks>
            The default implementation performs a linear search on all children and returns all whose bounds overlap the
            specified <paramref name="contentPosition"/>. Views can override this to provide optimized implementations for
            their layout, or handle overlapping views.
            </remarks>
            <param name="contentPosition">The search position, relative to where this view's content starts (after applying
            margin, borders and padding).</param>
            <returns>The views at the specified <paramref name="contentPosition"/>, in original layout order.</returns>
        </member>
        <member name="M:StardewUI.View.HasOwnContent">
            <summary>
            Checks if this view displays its own content, independent of any floating elements or children.
            </summary>
            <remarks>
            This is used by <see cref="M:StardewUI.View.IsVisible(System.Nullable{Microsoft.Xna.Framework.Vector2})"/> to determine whether children need to be searched. If a view provides
            its own content, e.g. a label or image displaying text or a sprite, or a frame displaying a background/border,
            then the entire view's bounds are understood to have visible content. Otherwise, the view is only considered
            visible as a whole if at least one child is visible, and is only visible at any given point if there is an
            intersecting child at that point.
            </remarks>
        </member>
        <member name="M:StardewUI.View.IsContentDirty">
            <summary>
            Checks whether or not the internal content/layout has changed.
            </summary>
            <remarks>
            The base implementation of <see cref="M:StardewUI.View.IsDirty"/> only checks if the base layout attributes have changed, i.e.
            <see cref="P:StardewUI.View.Layout"/>, <see cref="P:StardewUI.View.Margin"/>, <see cref="P:StardewUI.View.Padding"/>, etc. It does not know about content/data in
            any subclasses; those that accept content parameters (like text) will typically use
            <see cref="T:StardewUI.Layout.DirtyTracker`1"/> to hold that content and should implement this method to check their
            <see cref="P:StardewUI.Layout.DirtyTracker`1.IsDirty"/> states.
            </remarks>
            <returns><c>true</c> if content has changed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:StardewUI.View.LogFocusSearch(System.String)">
            <summary>
            Outputs a debug log entry with the current view type, name and specified message.
            </summary>
            <remarks>
            Used primarily for debugging focus searches and requires the <c>DEBUG_FOCUS_SEARCH</c> compiler flag.
            </remarks>
            <param name="message">The message to log in addition to the view type and name.</param>
        </member>
        <member name="M:StardewUI.View.OnDrawBorder(StardewUI.Graphics.ISpriteBatch)">
            <summary>
            Draws the view's border, if it has one.
            </summary>
            <remarks>
            This is called from <see cref="M:StardewUI.View.Draw(StardewUI.Graphics.ISpriteBatch)"/> after applying <see cref="P:StardewUI.View.Margin"/> but before <see cref="P:StardewUI.View.Padding"/>.
            </remarks>
            <param name="b">Sprite batch to hold the drawing output.</param>
        </member>
        <member name="M:StardewUI.View.OnDrawContent(StardewUI.Graphics.ISpriteBatch)">
            <summary>
            Draws the inner content of this view.
            </summary>
            <remarks>
            This is called from <see cref="M:StardewUI.View.Draw(StardewUI.Graphics.ISpriteBatch)"/> after applying both <see cref="P:StardewUI.View.Margin"/> and <see cref="P:StardewUI.View.Padding"/>.
            </remarks>
            <param name="b">Sprite batch to hold the drawing output.</param>
        </member>
        <member name="M:StardewUI.View.OnMeasure(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Performs the internal layout.
            </summary>
            <remarks>
            <para>
            This is called from <see cref="M:StardewUI.View.Measure(Microsoft.Xna.Framework.Vector2)"/> only when the layout is dirty (layout parameters or content changed)
            and a new layout is actually required. Subclasses must implement this and set <see cref="P:StardewUI.View.ContentSize"/> once
            layout is complete. Typically, <see cref="M:StardewUI.Layout.LayoutParameters.Resolve(Microsoft.Xna.Framework.Vector2,System.Func{Microsoft.Xna.Framework.Vector2})"/> should be used in order to ensure that
            the original <see cref="T:StardewUI.Layout.LayoutParameters"/> are respected (e.g. if the actual content size is smaller than the
            configured size).
            </para>
            <para>
            The <paramref name="availableSize"/> provided to the method is pre-adjusted for <see cref="P:StardewUI.View.Margin"/>,
            <see cref="P:StardewUI.View.Padding"/>, and any border determined by <see cref="M:StardewUI.View.GetBorderThickness"/>.
            </para>
            </remarks>
            <param name="availableSize">Size available in the container, after applying padding, margin and borders.</param>
        </member>
        <member name="M:StardewUI.View.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:StardewUI.View.PropertyChanged"/> event.
            </summary>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:StardewUI.View.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:StardewUI.View.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">The name of the property that was changed.</param>
        </member>
        <member name="M:StardewUI.View.ResetDirty">
            <summary>
            Resets any dirty state associated with this view.
            </summary>
            <remarks>
            This is called at the end of <see cref="M:StardewUI.View.Measure(Microsoft.Xna.Framework.Vector2)"/>, so that on the next pass, all state appears clean unless it
            was marked dirty after the last pass completed. The default implementation is a no-op; subclasses should use it
            to clear any private dirty state, e.g. via <see cref="M:StardewUI.Layout.DirtyTracker`1.ResetDirty"/>.
            </remarks>
        </member>
        <member name="T:StardewUI.ViewChild">
            <summary>
            Provides information about a view that is the child of another view. Used for interactions.
            </summary>
            <param name="View">The child view.</param>
            <param name="Position">The position of the <paramref name="View"/>, relative to the parent.</param>
        </member>
        <member name="M:StardewUI.ViewChild.#ctor(StardewUI.IView,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Provides information about a view that is the child of another view. Used for interactions.
            </summary>
            <param name="View">The child view.</param>
            <param name="Position">The position of the <paramref name="View"/>, relative to the parent.</param>
        </member>
        <member name="P:StardewUI.ViewChild.View">
            <summary>The child view.</summary>
        </member>
        <member name="P:StardewUI.ViewChild.Position">
            <summary>The position of the <paramref name="View"/>, relative to the parent.</summary>
        </member>
        <member name="M:StardewUI.ViewChild.AsWeak">
            <summary>
            Returns a copy of this instance as a weak version that does not keep the <see cref="T:StardewUI.IView"/> alive.
            </summary>
            <remarks>
            Use whenever it is necessary to store a reference to both the view and its position in places where the view may
            disappear from scope, e.g. a deep descendant of a menu's root view.
            </remarks>
        </member>
        <member name="M:StardewUI.ViewChild.Center">
            <summary>
            Gets the point at the exact center of the view.
            </summary>
        </member>
        <member name="M:StardewUI.ViewChild.CenterPoint">
            <summary>
            Gets the nearest whole pixel point at the exact center of the view.
            </summary>
        </member>
        <member name="M:StardewUI.ViewChild.ContainsPoint(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Checks if a given point, relative to the view's parent, is within the bounds of this child.
            </summary>
            <param name="point">The point to test.</param>
            <returns><c>true</c> if <paramref name="point"/> is within the parent-relative bounds of this child; otherwise
            <c>false</c>.</returns>
        </member>
        <member name="M:StardewUI.ViewChild.FocusSearch(Microsoft.Xna.Framework.Vector2,StardewUI.Direction)">
            <summary>
            Performs a focus search on the referenced view.
            </summary>
            <remarks>
            This is equivalent to <see cref="M:StardewUI.IView.FocusSearch(Microsoft.Xna.Framework.Vector2,StardewUI.Direction)"/> but implicitly handles its own <see cref="P:StardewUI.ViewChild.Position"/>, so
            it can be used recursively without directly adjusting any coordinates.
            </remarks>
            <param name="contentPosition">The current position, relative to the parent that owns this child.</param>
            <param name="direction">The direction of cursor movement.</param>
            <returns>The next focusable view reached by moving in the specified <paramref name="direction"/>, or <c>null</c>
            if there are no focusable descendants that are possible to reach in that direction.</returns>
        </member>
        <member name="M:StardewUI.ViewChild.GetActualBounds">
            <summary>
            Returns a <see cref="T:StardewUI.Layout.Bounds"/> representing the parent-relative layout bounds of this child.
            </summary>
            <remarks>
            Equivalent to the <see cref="P:StardewUI.IView.ActualBounds"/> offset by this child's <see cref="P:StardewUI.ViewChild.Position"/>.
            </remarks>
        </member>
        <member name="M:StardewUI.ViewChild.GetContentBounds">
            <summary>
            Returns a <see cref="T:StardewUI.Layout.Bounds"/> representing the parent-relative content bounds of this child.
            </summary>
            <remarks>
            Equivalent to the <see cref="P:StardewUI.IView.ContentBounds"/> offset by this child's <see cref="P:StardewUI.ViewChild.Position"/>.
            </remarks>
        </member>
        <member name="M:StardewUI.ViewChild.GetFloatingBounds">
            <summary>
            Returns a sequence of <see cref="T:StardewUI.Layout.Bounds"/> representing the parent-relative bounds of this child's own floating
            elements and those of all its descendants.
            </summary>
        </member>
        <member name="M:StardewUI.ViewChild.IsVisible(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Checks if the visible area of this child contains a point relative to the view's parent.
            </summary>
            <param name="point">The point to test.</param>
            <returns><c>true</c> if <paramref name="point"/> is within the visible, parent-relative bounds of this child;
            otherwise <c>false</c>.</returns>
        </member>
        <member name="M:StardewUI.ViewChild.Offset(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Offsets the position by a given distance.
            </summary>
            <param name="distance">The offset distance.</param>
            <returns>A copy of the current <see cref="T:StardewUI.ViewChild"/> having the same <see cref="P:StardewUI.ViewChild.View"/> and a
            <see cref="P:StardewUI.ViewChild.Position"/> offset by <paramref name="distance"/>.</returns>
        </member>
        <member name="M:StardewUI.ViewChild.IsInDirection(Microsoft.Xna.Framework.Vector2,StardewUI.Direction)">
            <summary>
            Checks if a view can be reached by travelling from a given point in a given direction.
            </summary>
            <param name="origin">The origin point.</param>
            <param name="direction">The direction from <paramref name="origin"/>.</param>
            <returns><c>true</c> if the view's boundaries either already contain the <paramref name="origin"/> or are in the
            specified <paramref name="direction"/> from the <paramref name="origin"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:StardewUI.WeakViewChild">
            <summary>
            A variant of <see cref="T:StardewUI.ViewChild"/> that uses a weak <see cref="T:StardewUI.IView"/> reference, safe to store without keeping
            the underlying view alive.
            </summary>
        </member>
        <member name="M:StardewUI.WeakViewChild.TryResolve(StardewUI.ViewChild@)">
            <summary>
            Tries to resolve this instance into a normal <see cref="T:StardewUI.ViewChild"/> with strong view reference.
            </summary>
            <param name="viewChild">Set to a <see cref="T:StardewUI.ViewChild"/> with live <see cref="T:StardewUI.IView"/>, if the underlying view
            is still alive; otherwise <c>null</c>.</param>
            <returns><c>true</c> if the underlying <see cref="T:StardewUI.IView"/> was still alive; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:StardewUI.ViewExtensions">
            <summary>
            Commonly-used extensions for the <see cref="T:StardewUI.IView"/> interface and related types.
            </summary>
        </member>
        <member name="M:StardewUI.ViewExtensions.FocusablePath(System.Collections.Generic.IEnumerable{StardewUI.ViewChild})">
            <summary>
            Returns the focusable component of the path to a view, typically a cursor target.
            </summary>
            <param name="path">The view path.</param>
            <returns>The sequence of <paramref name="path"/> elements ending with the last view for which
            <see cref="P:StardewUI.IView.IsFocusable"/> is <c>true</c>. If there are no focusable views in the path, returns an empty
            sequence.</returns>
        </member>
        <member name="M:StardewUI.ViewExtensions.GetDefaultFocusPath(StardewUI.IView)">
            <summary>
            Retrieves a path to the default focus child/descendant of a view.
            </summary>
            <param name="view">The view at which to start the search.</param>
            <returns>A sequence of <see cref="T:StardewUI.ViewChild"/> elements with the <see cref="T:StardewUI.IView"/> and position (relative to
            parent) at each level, starting with the specified <paramref name="view"/> and ending with the lowest-level
            <see cref="T:StardewUI.IView"/> in the default focus path. If no focusable descendant is found, returns an empty
            sequence.</returns>
        </member>
        <member name="M:StardewUI.ViewExtensions.GetPathToPosition(StardewUI.IView,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Boolean)">
            <summary>
            Retrieves a path to the view at a given position.
            </summary>
            <param name="view">The view at which to start the search.</param>
            <param name="position">The position to search for, in coordinates relative to the
            <paramref name="view"/>.</param>
            <param name="preferFocusable"><c>true</c> to prioritize a focusable child over a non-focusable child with a higher
            z-index in case of overlap; <c>false</c> to always use the topmost child.</param>
            <param name="requirePointerEvents">Whether to exclude views whose <see cref="P:StardewUI.IView.PointerEventsEnabled"/> is
            currently <c>false</c>. This short-circuits the pathing; if any ancestor of a view has pointer events disabled
            then it cannot be part of the path.</param>
            <returns>A sequence of <see cref="T:StardewUI.ViewChild"/> elements with the <see cref="T:StardewUI.IView"/> and position (relative to
            parent) at each level, starting with the specified <paramref name="view"/> and ending with the lowest-level
            <see cref="T:StardewUI.IView"/> that still overlaps with the specified <paramref name="position"/>.
            If no match is found, returns an empty sequence.</returns>
        </member>
        <member name="M:StardewUI.ViewExtensions.GetPathToView(StardewUI.IView,StardewUI.IView)">
            <summary>
            Retrieves the path to a descendant view.
            </summary>
            <remarks>
            This method has worst-case O(N) performance, so avoid calling it in tight loops such as draw methods, and cache
            the result whenever possible.
            </remarks>
            <param name="view">The view at which to start the search.</param>
            <param name="descendant">The descendant view to search for.</param>
            <returns>A sequence of <see cref="T:StardewUI.ViewChild"/> elements with the <see cref="T:StardewUI.IView"/> and position (relative to
            parent) at each level, starting with the specified <paramref name="view"/> and ending with the specified
            <paramref name="descendant"/>. If no match is found, returns <c>null</c>.</returns>
        </member>
        <member name="M:StardewUI.ViewExtensions.ResolveChildPath(StardewUI.IView,System.Collections.Generic.IEnumerable{StardewUI.IView})">
            <summary>
            Takes an existing view path and resolves it with child coordinates for the view at each level.
            </summary>
            <param name="view">The root view.</param>
            <param name="path">The path from root down to some descendant, such as the path returned by
            <see cref="M:StardewUI.ViewExtensions.GetPathToPosition(StardewUI.IView,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Boolean)"/>.</param>
            <returns>A sequence of <see cref="T:StardewUI.ViewChild"/> elements, starting at the <paramref name="view"/>, where each
            child's <see cref="P:StardewUI.ViewChild.Position"/> is the child's most current location within its parent.</returns>
        </member>
        <member name="M:StardewUI.ViewExtensions.ToGlobalPositions(System.Collections.Generic.IEnumerable{StardewUI.ViewChild})">
            <summary>
            Converts a view path in parent-relative coordinates (e.g. from <see cref="M:StardewUI.ViewExtensions.GetPathToPosition(StardewUI.IView,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Boolean)"/> and transforms
            each element to have an absolute <see cref="P:StardewUI.ViewChild.Position"/>.
            </summary>
            <remarks>
            Since <see cref="T:StardewUI.ViewChild"/> does not specify whether the position is local (parent) or global (absolute), it
            is not possible to validate the incoming sequence and prevent a "double transformation". Callers are responsible
            for knowing whether or not the input sequence is local or global.
            </remarks>
            <param name="path">The path from root down to leaf view.</param>
            <returns>The <paramref name="path"/> with positions in global coordinates.</returns>
        </member>
        <member name="M:StardewUI.ViewExtensions.ZOrder(System.Collections.Generic.IEnumerable{StardewUI.ViewChild},System.Boolean)">
            <summary>
            Sorts a sequence of children in ascending z-order.
            </summary>
            <remarks>
            Order is preserved between views with the same <see cref="P:StardewUI.IView.ZIndex"/>, so the resulting sequence will have
            a primary order of z-index (lower indices first) and a secondary order of original sequence position. This is
            the correct order for drawing views.
            </remarks>
            <param name="children">The view children.</param>
            <param name="focusPriority"><c>true</c> to sort focusable children first regardless of z-index; <c>false</c> to
            ignore <see cref="P:StardewUI.IView.IsFocusable"/>.</param>
            <returns>The <paramref name="children"/> ordered by the view's <see cref="P:StardewUI.IView.ZIndex"/> and original sequence
            order.</returns>
        </member>
        <member name="M:StardewUI.ViewExtensions.ZOrderDescending(System.Collections.Generic.IEnumerable{StardewUI.ViewChild},System.Boolean)">
            <summary>
            Sorts a sequence of children in descending z-order.
            </summary>
            <remarks>
            The resulting sequence will have an order such that views with higher <see cref="P:StardewUI.IView.ZIndex"/> appear first,
            and views with the same z-index will appear in the <em>reverse</em> order of the original sequence. This is the
            correct order for handling cursor events and any other actions that need to operate on the "topmost" view first.
            </remarks>
            <param name="children">The view children.</param>
            <param name="focusPriority"><c>true</c> to sort focusable children first regardless of z-index; <c>false</c> to
            ignore <see cref="P:StardewUI.IView.IsFocusable"/>.</param>
            <returns></returns>
        </member>
        <member name="T:StardewUI.ViewMenu">
            <summary>
            Generic menu implementation based on a root <see cref="T:StardewUI.IView"/>.
            </summary>
        </member>
        <member name="E:StardewUI.ViewMenu.Closed">
            <summary>
            Event raised when the menu is closed.
            </summary>
        </member>
        <member name="P:StardewUI.ViewMenu.CloseButtonOffset">
            <summary>
            Offset from the menu view's top-right edge to draw the close button, if a <see cref="P:StardewUI.ViewMenu.CloseButtonSprite"/> is
            also specified.
            </summary>
        </member>
        <member name="P:StardewUI.ViewMenu.CloseButtonSprite">
            <summary>
            The sprite to draw for the close button shown on the upper right. If no value is specified, then no close button
            will be drawn. The default behavior is to not show any close button.
            </summary>
        </member>
        <member name="P:StardewUI.ViewMenu.CloseOnOutsideClick">
            <summary>
            Whether to automatically close the menu when a mouse click is detected outside the bounds of the menu and any
            floating elements.
            </summary>
            <remarks>
            This setting is primarily intended for submenus and makes them behave more like overlays.
            </remarks>
        </member>
        <member name="P:StardewUI.ViewMenu.CursorAttachment">
            <summary>
            Additional cursor to draw below or adjacent to the normal mouse cursor.
            </summary>
        </member>
        <member name="P:StardewUI.ViewMenu.DimmingAmount">
            <summary>
            Amount of dimming between 0 and 1; i.e. opacity of the background underlay.
            </summary>
            <remarks>
            Underlay is only drawn when game options do not force clear backgrounds.
            </remarks>
        </member>
        <member name="P:StardewUI.ViewMenu.TooltipsEnabled">
            <summary>
            Whether to display tooltips on mouse hover.
            </summary>
            <remarks>
            Tooltips should normally always be left enabled; one reason to disable them would be if a
            <see cref="P:StardewUI.ViewMenu.CursorAttachment"/> is set that would overlap.
            </remarks>
        </member>
        <member name="P:StardewUI.ViewMenu.View">
            <summary>
            The view to display with this menu.
            </summary>
        </member>
        <member name="P:StardewUI.ViewMenu.Gutter">
            <summary>
            Gets or sets the menu's gutter edges, which constrain the portion of the viewport in which any part of the menu
            may be drawn.
            </summary>
            <remarks>
            Gutters effectively shrink the viewport for both measurement (size calculation) and layout (centering) by
            clipping the screen edges.
            </remarks>
        </member>
        <member name="M:StardewUI.ViewMenu.#ctor(StardewUI.Layout.Edges,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:StardewUI.ViewMenu"/>.
            </summary>
            <param name="gutter">Gutter edges, in which no content should be drawn. Used for overscan, or general
            aesthetics.</param>
            <param name="forceDefaultFocus">Whether to always focus (snap the cursor to) the default element, even if the
            menu was triggered by keyboard/mouse.</param>
        </member>
        <member name="M:StardewUI.ViewMenu.CreateView">
            <summary>
            Creates the view.
            </summary>
            <remarks>
            Subclasses will generally create an entire tree in this method and store references to any views that might
            require content updates.
            </remarks>
            <returns>The created view.</returns>
        </member>
        <member name="M:StardewUI.ViewMenu.applyMovementKey(System.Int32)">
            <summary>
            Initiates a focus search in the specified direction.
            </summary>
            <param name="directionValue">An integer value corresponding to the direction; one of 0 (up), 1 (right), 2 (down)
            or 3 (left).</param>
        </member>
        <member name="M:StardewUI.ViewMenu.areGamePadControlsImplemented">
            <summary>
            Returns whether or not the menu wants <b>exclusive</b> gamepad controls.
            </summary>
            <remarks>
            This implementation always returns <c>false</c>. Contrary to what the name in Stardew's code implies, this
            setting is not required for <see cref="M:StardewUI.ViewMenu.receiveGamePadButton(Microsoft.Xna.Framework.Input.Buttons)"/> to work; instead, when enabled, it
            suppresses the game's default mapping of button presses to clicks, and would therefore require reimplementing
            key-repeat and other basic behaviors. There is no reason to enable it here.
            </remarks>
            <returns>Always <c>false</c>.</returns>
        </member>
        <member name="M:StardewUI.ViewMenu.Close">
            <summary>
            Closes this menu, either by removing it from the parent if it is a child menu, or removing it as the game's
            active menu if it is standalone.
            </summary>
        </member>
        <member name="M:StardewUI.ViewMenu.Dispose">
            <inheritdoc />
        </member>
        <member name="M:StardewUI.ViewMenu.draw(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Draws the current menu content.
            </summary>
            <param name="b">The target batch.</param>
        </member>
        <member name="M:StardewUI.ViewMenu.gamePadButtonHeld(Microsoft.Xna.Framework.Input.Buttons)">
            <summary>
            Invoked on every frame during which a controller button is down, once for each held button.
            </summary>
            <param name="b">The button that is down.</param>
        </member>
        <member name="M:StardewUI.ViewMenu.leftClickHeld(System.Int32,System.Int32)">
            <summary>
            Invoked on every frame in which a mouse button is down, regardless of the state in the previous frame.
            </summary>
            <param name="x">The mouse's current X position on screen.</param>
            <param name="y">The mouse's current Y position on screen.</param>
        </member>
        <member name="M:StardewUI.ViewMenu.Open(StardewUI.MenuActivationMode)">
            <summary>
            Opens this menu, i.e. makes it active if it is not already active.
            </summary>
            <remarks>
            </remarks>
            <param name="activationMode">The activation behavior which determines which (if any) other active menu this one
            can replace. Ignored when the game's title menu is open.</param>
        </member>
        <member name="M:StardewUI.ViewMenu.performHoverAction(System.Int32,System.Int32)">
            <summary>
            Invoked on every frame with the mouse's current coordinates.
            </summary>
            <remarks>
            Essentially the same as <see cref="M:StardewUI.ViewMenu.update(Microsoft.Xna.Framework.GameTime)"/> but slightly more convenient for mouse hover/movement
            effects because of the arguments provided.
            </remarks>
            <param name="x">The mouse's current X position on screen.</param>
            <param name="y">The mouse's current Y position on screen.</param>
        </member>
        <member name="M:StardewUI.ViewMenu.populateClickableComponentList">
            <inheritdoc />
            <remarks>
            Always a no-op for menus in StardewUI.
            </remarks>
        </member>
        <member name="M:StardewUI.ViewMenu.readyToClose">
            <summary>
            Checks if the menu is allowed to be closed by the game's default input handling.
            </summary>
        </member>
        <member name="M:StardewUI.ViewMenu.receiveGamePadButton(Microsoft.Xna.Framework.Input.Buttons)">
            <summary>
            Invoked whenever a controller button is newly pressed.
            </summary>
            <param name="b">The button that was pressed.</param>
        </member>
        <member name="M:StardewUI.ViewMenu.receiveKeyPress(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Invoked whenever a keyboard key is newly pressed.
            </summary>
            <param name="key">The key that was pressed.</param>
        </member>
        <member name="M:StardewUI.ViewMenu.receiveLeftClick(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Invoked whenever the left mouse button is newly pressed.
            </summary>
            <param name="x">The mouse's current X position on screen.</param>
            <param name="y">The mouse's current Y position on screen.</param>
            <param name="playSound">Currently not used.</param>
        </member>
        <member name="M:StardewUI.ViewMenu.receiveRightClick(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Invoked whenever the right mouse button is newly pressed.
            </summary>
            <param name="x">The mouse's current X position on screen.</param>
            <param name="y">The mouse's current Y position on screen.</param>
            <param name="playSound">Currently not used.</param>
        </member>
        <member name="M:StardewUI.ViewMenu.receiveScrollWheelAction(System.Int32)">
            <summary>
            Invoked whenever the mouse wheel is used. Only works with vertical scrolls.
            </summary>
            <param name="value">A value indicating the desired vertical scroll direction; negative values indicate "down"
            and positive values indicate "up".</param>
        </member>
        <member name="M:StardewUI.ViewMenu.releaseLeftClick(System.Int32,System.Int32)">
            <summary>
            Invoked whenever the left mouse button is just released, after being pressed/held on the last frame.
            </summary>
            <param name="x">The mouse's current X position on screen.</param>
            <param name="y">The mouse's current Y position on screen.</param>
        </member>
        <member name="M:StardewUI.ViewMenu.shouldDrawCloseButton">
            <summary>
            Returns whether or not to draw a button on the upper right that closes the menu when clicked.
            </summary>
            <remarks>
            Regardless of this value, a close button will never be drawn unless <see cref="P:StardewUI.ViewMenu.CloseButtonSprite"/> is set.
            </remarks>
        </member>
        <member name="M:StardewUI.ViewMenu.update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Runs on every update tick.
            </summary>
            <param name="time">The current <see cref="T:Microsoft.Xna.Framework.GameTime"/> including the time elapsed since last update tick.</param>
        </member>
        <member name="M:StardewUI.ViewMenu.BuildTooltip(System.Collections.Generic.IEnumerable{StardewUI.ViewChild})">
            <summary>
            Builds/formats a tooltip given the sequence of views from root to the lowest-level hovered child.
            </summary>
            <remarks>
            The default implementation reads the value of the <em>last</em> (lowest-level) view with a non-null
            <see cref="P:StardewUI.IView.Tooltip"/>, and breaks <see cref="P:StardewUI.Data.TooltipData.Text"/> and <see cref="P:StardewUI.Data.TooltipData.Title"/> lines
            longer than 640px, which is the default vanilla tooltip width.
            </remarks>
            <param name="path">Sequence of all elements, and their relative positions, that the mouse coordinates are
            currently within.</param>
            <returns>The tooltip string to display, or <c>null</c> to not show any tooltip.</returns>
        </member>
        <member name="M:StardewUI.ViewMenu.CustomClose">
            <summary>
            When overridden in a derived class, provides an alternative method to close the menu instead of the default
            logic in <see cref="M:StardewValley.Menus.IClickableMenu.exitThisMenu(System.Boolean)"/>.
            </summary>
            <remarks>
            The method will only be called when the menu is closed (either programmatically or via the UI) while
            <see cref="M:StardewUI.ViewMenu.GetCloseBehavior"/> is returning <see cref="F:StardewUI.MenuCloseBehavior.Custom"/>.
            </remarks>
        </member>
        <member name="M:StardewUI.ViewMenu.GetCloseBehavior">
            <summary>
            Gets the current close behavior for the menu.
            </summary>
            <remarks>
            The default implementation always returns <see cref="F:StardewUI.MenuCloseBehavior.Default"/>. Subclasses may override this
            in order to use <see cref="M:StardewUI.ViewMenu.CustomClose"/>, or disable closure entirely.
            </remarks>
        </member>
        <member name="M:StardewUI.ViewMenu.GetOriginPosition(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
            <summary>
            Computes the origin (top left) position of the menu for a given viewport and offset.
            </summary>
            <param name="viewportSize">The available size of the viewport in which the menu is to be displayed.</param>
            <param name="gutterOffset">The offset implied by any asymmetrical <see cref="P:StardewUI.ViewMenu.Gutter"/> setting; for example,
            a gutter whose <see cref="P:StardewUI.Layout.Edges.Left"/> edge is <c>100</c> px and whose <see cref="P:StardewUI.Layout.Edges.Right"/> edge is only
            <c>50</c> px would have an X offset of <c>25</c> px (half the difference, because centered).</param>
            <returns>The origin (top left) position for the menu's root view.</returns>
        </member>
        <member name="M:StardewUI.ViewMenu.OnClosed(System.EventArgs)">
            <summary>
            Invokes the <see cref="E:StardewUI.ViewMenu.Closed"/> event handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:StardewUI.GenerateDescriptorAttribute">
            <summary>
            Marks a class for descriptor precompilation.
            </summary>
        </member>
    </members>
</doc>
